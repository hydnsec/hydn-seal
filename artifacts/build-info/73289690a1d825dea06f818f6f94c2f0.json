{"id":"73289690a1d825dea06f818f6f94c2f0","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16+commit.07a7930e","input":{"language":"Solidity","sources":{"contracts/HYDNSeal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport './openzepplin/ERC1155Upgradeable.sol';\nimport './openzepplin/ERC1155SupplyUpgradeable.sol';\nimport './HYDNSealStorage.sol';\n\n//\n\ncontract HYDNSeal is\n  Initializable,\n  ContextUpgradeable,\n  UUPSUpgradeable,\n  OwnableUpgradeable,\n  HYDNERC1155Upgradeable,\n  HYDNERC1155SupplyUpgradeable,\n  HYDNSealStorage\n{\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  function initialize(string memory _baseURI) external initializer {\n    __Context_init();\n    __UUPSUpgradeable_init();\n    __Ownable_init();\n    __ERC1155_init(_baseURI);\n    __ERC1155Supply_init();\n    currentAuditId = block.chainid * 10_000_000;\n    name = 'HYDN Seal';\n    // solhint-disable-next-line prettier/prettier\n    // prettier-ignore\n    symbol = unicode\"â›‘\";\n  }\n\n  function reinitialize(string memory _baseURI) external reinitializer(2) {\n    _setURI(_baseURI);\n  }\n\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\n    newImplementation; // avoid empty block\n  }\n\n  function _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual override(HYDNERC1155SupplyUpgradeable, HYDNERC1155Upgradeable) {\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n  }\n\n  function safeTransferFrom(\n    address,\n    address,\n    uint256,\n    uint256,\n    bytes memory\n  ) public override {\n    revert('HYDNSeal: transfer not allowed');\n  }\n\n  function safeBatchTransferFrom(\n    address,\n    address,\n    uint256[] memory,\n    uint256[] memory,\n    bytes memory\n  ) public override {\n    revert('HYDNSeal: transfer batch not allowed');\n  }\n\n  function uri(uint256 _tokenId) public view override returns (string memory) {\n    require(exists(_tokenId), 'HYDNSeal: token not existing');\n    return string(abi.encodePacked(super.uri(_tokenId), StringsUpgradeable.toString(_tokenId)));\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return currentAuditId - block.chainid * 10_000_000;\n  }\n\n  function mintSeal(address[] calldata _contracts) external onlyOwner returns (bool success) {\n    currentAuditId += 1;\n    uint256 id = currentAuditId;\n    for (uint256 i = 0; i < _contracts.length; i++) {\n      require(AddressUpgradeable.isContract(_contracts[i]), 'HYDNSeal: receiver is not a contract');\n      _mint(_contracts[i], id, 1, '');\n    }\n    return true;\n  }\n}\n"},"contracts/openzepplin/ERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n// Hydn: Copy of OpenZeppelin - change are:\n//  - _mint function do not call the _doSafeTransferAcceptanceCheck hook as the token is not transferable we don't want to check if the contract accept it or not\n\npragma solidity ^0.8.0;\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract HYDNERC1155Upgradeable is\n  Initializable,\n  ContextUpgradeable,\n  ERC165Upgradeable,\n  IERC1155Upgradeable,\n  IERC1155MetadataURIUpgradeable\n{\n  using AddressUpgradeable for address;\n\n  // Mapping from token ID to account balances\n  mapping(uint256 => mapping(address => uint256)) private _balances;\n\n  // Mapping from account to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n  string private _uri;\n\n  /**\n   * @dev See {_setURI}.\n   */\n  function __ERC1155_init(string memory uri_) internal onlyInitializing {\n    __ERC1155_init_unchained(uri_);\n  }\n\n  function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n    _setURI(uri_);\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165Upgradeable, IERC165Upgradeable)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC1155Upgradeable).interfaceId ||\n      interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC1155MetadataURI-uri}.\n   *\n   * This implementation returns the same URI for *all* token types. It relies\n   * on the token type ID substitution mechanism\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n   *\n   * Clients calling this function must replace the `\\{id\\}` substring with the\n   * actual token type ID.\n   */\n  function uri(uint256) public view virtual override returns (string memory) {\n    return _uri;\n  }\n\n  /**\n   * @dev See {IERC1155-balanceOf}.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n    require(account != address(0), 'ERC1155: address zero is not a valid owner');\n    return _balances[id][account];\n  }\n\n  /**\n   * @dev See {IERC1155-balanceOfBatch}.\n   *\n   * Requirements:\n   *\n   * - `accounts` and `ids` must have the same length.\n   */\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n  {\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\n\n    uint256[] memory batchBalances = new uint256[](accounts.length);\n\n    for (uint256 i = 0; i < accounts.length; ++i) {\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\n    }\n\n    return batchBalances;\n  }\n\n  /**\n   * @dev See {IERC1155-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved) public virtual override {\n    _setApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC1155-isApprovedForAll}.\n   */\n  function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n    return _operatorApprovals[account][operator];\n  }\n\n  /**\n   * @dev See {IERC1155-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) public virtual override {\n    require(\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\n      'ERC1155: caller is not token owner nor approved'\n    );\n    _safeTransferFrom(from, to, id, amount, data);\n  }\n\n  /**\n   * @dev See {IERC1155-safeBatchTransferFrom}.\n   */\n  function safeBatchTransferFrom(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) public virtual override {\n    require(\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\n      'ERC1155: caller is not token owner nor approved'\n    );\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\n  }\n\n  /**\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function _safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) internal virtual {\n    require(to != address(0), 'ERC1155: transfer to the zero address');\n\n    address operator = _msgSender();\n    uint256[] memory ids = _asSingletonArray(id);\n    uint256[] memory amounts = _asSingletonArray(amount);\n\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    uint256 fromBalance = _balances[id][from];\n    require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\n    unchecked {\n      _balances[id][from] = fromBalance - amount;\n    }\n    _balances[id][to] += amount;\n\n    emit TransferSingle(operator, from, to, id, amount);\n\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function _safeBatchTransferFrom(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\n    require(to != address(0), 'ERC1155: transfer to the zero address');\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    for (uint256 i = 0; i < ids.length; ++i) {\n      uint256 id = ids[i];\n      uint256 amount = amounts[i];\n\n      uint256 fromBalance = _balances[id][from];\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\n      unchecked {\n        _balances[id][from] = fromBalance - amount;\n      }\n      _balances[id][to] += amount;\n    }\n\n    emit TransferBatch(operator, from, to, ids, amounts);\n\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n  }\n\n  /**\n   * @dev Sets a new URI for all token types, by relying on the token type ID\n   * substitution mechanism\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n   *\n   * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\n   * clients with the token type ID.\n   *\n   * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n   * interpreted by clients as\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n   * for token type ID 0x4cce0.\n   *\n   * See {uri}.\n   *\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\n   * this function emits no events.\n   */\n  function _setURI(string memory newuri) internal virtual {\n    _uri = newuri;\n  }\n\n  /**\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function _mint(\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) internal virtual {\n    require(to != address(0), 'ERC1155: mint to the zero address');\n\n    address operator = _msgSender();\n    uint256[] memory ids = _asSingletonArray(id);\n    uint256[] memory amounts = _asSingletonArray(amount);\n\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n    _balances[id][to] += amount;\n    emit TransferSingle(operator, address(0), to, id, amount);\n\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function _mintBatch(\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {\n    require(to != address(0), 'ERC1155: mint to the zero address');\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n    for (uint256 i = 0; i < ids.length; i++) {\n      _balances[ids[i]][to] += amounts[i];\n    }\n\n    emit TransferBatch(operator, address(0), to, ids, amounts);\n\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens of token type `id` from `from`\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `from` must have at least `amount` tokens of token type `id`.\n   */\n  function _burn(\n    address from,\n    uint256 id,\n    uint256 amount\n  ) internal virtual {\n    require(from != address(0), 'ERC1155: burn from the zero address');\n\n    address operator = _msgSender();\n    uint256[] memory ids = _asSingletonArray(id);\n    uint256[] memory amounts = _asSingletonArray(amount);\n\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\n\n    uint256 fromBalance = _balances[id][from];\n    require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\n    unchecked {\n      _balances[id][from] = fromBalance - amount;\n    }\n\n    emit TransferSingle(operator, from, address(0), id, amount);\n\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\n  }\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   */\n  function _burnBatch(\n    address from,\n    uint256[] memory ids,\n    uint256[] memory amounts\n  ) internal virtual {\n    require(from != address(0), 'ERC1155: burn from the zero address');\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\n\n    for (uint256 i = 0; i < ids.length; i++) {\n      uint256 id = ids[i];\n      uint256 amount = amounts[i];\n\n      uint256 fromBalance = _balances[id][from];\n      require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\n      unchecked {\n        _balances[id][from] = fromBalance - amount;\n      }\n    }\n\n    emit TransferBatch(operator, from, address(0), ids, amounts);\n\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\n  }\n\n  /**\n   * @dev Approve `operator` to operate on all of `owner` tokens\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function _setApprovalForAll(\n    address owner,\n    address operator,\n    bool approved\n  ) internal virtual {\n    require(owner != operator, 'ERC1155: setting approval status for self');\n    _operatorApprovals[owner][operator] = approved;\n    emit ApprovalForAll(owner, operator, approved);\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting\n   * and burning, as well as batched variants.\n   *\n   * The same hook is called on both single and batched variants. For single\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\n   *\n   * Calling conditions (for each `id` and `amount` pair):\n   *\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * of token type `id` will be  transferred to `to`.\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\n   * for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n   * will be burned.\n   * - `from` and `to` are never both zero.\n   * - `ids` and `amounts` have the same, non-zero length.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any token transfer. This includes minting\n   * and burning, as well as batched variants.\n   *\n   * The same hook is called on both single and batched variants. For single\n   * transfers, the length of the `id` and `amount` arrays will be 1.\n   *\n   * Calling conditions (for each `id` and `amount` pair):\n   *\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * of token type `id` will be  transferred to `to`.\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\n   * for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n   * will be burned.\n   * - `from` and `to` are never both zero.\n   * - `ids` and `amounts` have the same, non-zero length.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual {}\n\n  function _doSafeTransferAcceptanceCheck(\n    address operator,\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) private {\n    if (to.isContract()) {\n      try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (\n        bytes4 response\n      ) {\n        if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n          revert('ERC1155: ERC1155Receiver rejected tokens');\n        }\n      } catch Error(string memory reason) {\n        revert(reason);\n      } catch {\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\n      }\n    }\n  }\n\n  function _doSafeBatchTransferAcceptanceCheck(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) private {\n    if (to.isContract()) {\n      try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n        bytes4 response\n      ) {\n        if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n          revert('ERC1155: ERC1155Receiver rejected tokens');\n        }\n      } catch Error(string memory reason) {\n        revert(reason);\n      } catch {\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\n      }\n    }\n  }\n\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n    uint256[] memory array = new uint256[](1);\n    array[0] = element;\n\n    return array;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[47] private __gap;\n}\n"},"contracts/openzepplin/ERC1155SupplyUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n// Hydn: Copy of OpenZeppelin - only change is to reference the modified ERC1155Upgradeable reference\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\nimport './ERC1155Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract HYDNERC1155SupplyUpgradeable is Initializable, HYDNERC1155Upgradeable {\n  function __ERC1155Supply_init() internal onlyInitializing {}\n\n  function __ERC1155Supply_init_unchained() internal onlyInitializing {}\n\n  mapping(uint256 => uint256) private _totalSupply;\n\n  /**\n   * @dev Total amount of tokens in with a given id.\n   */\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\n    return _totalSupply[id];\n  }\n\n  /**\n   * @dev Indicates whether any token exist with a given id, or not.\n   */\n  function exists(uint256 id) public view virtual returns (bool) {\n    return HYDNERC1155SupplyUpgradeable.totalSupply(id) > 0;\n  }\n\n  /**\n   * @dev See {ERC1155-_beforeTokenTransfer}.\n   */\n  function _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal virtual override {\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    if (from == address(0)) {\n      for (uint256 i = 0; i < ids.length; ++i) {\n        _totalSupply[ids[i]] += amounts[i];\n      }\n    }\n\n    if (to == address(0)) {\n      for (uint256 i = 0; i < ids.length; ++i) {\n        uint256 id = ids[i];\n        uint256 amount = amounts[i];\n        uint256 supply = _totalSupply[id];\n        require(supply >= amount, 'ERC1155: burn amount exceeds totalSupply');\n        unchecked {\n          _totalSupply[id] = supply - amount;\n        }\n      }\n    }\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"},"contracts/HYDNSealStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n//\n\nabstract contract HYDNSealStorage {\n  string public name;\n  string public symbol;\n  uint256 public currentAuditId;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Supply_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\n    }\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":20000,"details":{"peephole":true,"inliner":true,"jumpdestRemover":true,"orderLiterals":false,"deduplicate":true,"cse":true,"constantOptimizer":true,"yulDetails":{"optimizerSteps":"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]"}}},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true},"libraries":{"":{"__CACHE_BREAKER__":"0x00000000d41867734bbee4c6863d9255b2b06ac1"}}}},"output":{"errors":[{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n  --> contracts/HYDNSeal.sol:45:3:\n   |\n45 |   function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\n   |   ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":1471,"file":"contracts/HYDNSeal.sol","start":1340},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/HYDNSeal.sol:60:3:\n   |\n60 |   function safeTransferFrom(\n   |   ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":1972,"file":"contracts/HYDNSeal.sol","start":1805},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/HYDNSeal.sol:70:3:\n   |\n70 |   function safeBatchTransferFrom(\n   |   ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":2172,"file":"contracts/HYDNSeal.sol","start":1976},"type":"Warning"}],"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ContextUpgradeable":[2692],"Initializable":[671],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":2693,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":672,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,2692,671],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2125:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2162:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2154:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2135:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2135:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2135:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2115:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2115:9:0"},"nodeType":"ModifierInvocation","src":"2115:9:0"}],"name":"renounceOwnership","nameLocation":"2080:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2097:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2125:0:0"},"scope":131,"src":"2071:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2391:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2409:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2429:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2421:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2421:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2409:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2433:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2401:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2401:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2503:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2484:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2484:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2484:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2178:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2381:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2381:9:0"},"nodeType":"ModifierInvocation","src":"2381:9:0"}],"name":"transferOwnership","nameLocation":"2330:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2356:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2348:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2347:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2391:0:0"},"scope":131,"src":"2321:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2736:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2754:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2746:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2746:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2765:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2746:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2781:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2790:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2781:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2781:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2834:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2844:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2813:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2813:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2808:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2525:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2682:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2709:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2701:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2700:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2736:0:0"},"scope":131,"src":"2673:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2866:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3145:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3125:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3125:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3133:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3125:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2445:0","usedErrors":[]}],"src":"102:3052:0"},"id":0},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[141]},"id":142,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"138:203:1","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":141,"linearizedBaseContracts":[141],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"387:438:1","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:1","nodeType":"FunctionDefinition","parameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"852:2:1"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":140,"src":"878:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:1"},"scope":141,"src":"830:57:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":142,"src":"342:547:1","usedErrors":[]}],"src":"113:777:1"},"id":1},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ERC1967UpgradeUpgradeable":[510],"IBeaconUpgradeable":[520],"IERC1822ProxiableUpgradeable":[141],"Initializable":[671],"StorageSlotUpgradeable":[2752]},"id":511,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":143,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":521,"src":"141:42:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":142,"src":"184:56:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":2651,"src":"241:44:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":2753,"src":"286:48:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":148,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":672,"src":"335:36:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":150,"name":"Initializable","nameLocations":["657:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"657:13:2"},"id":151,"nodeType":"InheritanceSpecifier","src":"657:13:2"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"373:236:2","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"id":510,"linearizedBaseContracts":[510,671],"name":"ERC1967UpgradeUpgradeable","nameLocation":"628:25:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":156,"nodeType":"Block","src":"736:7:2","statements":[]},"id":157,"implemented":true,"kind":"function","modifiers":[{"id":154,"kind":"modifierInvocation","modifierName":{"id":153,"name":"onlyInitializing","nameLocations":["719:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"719:16:2"},"nodeType":"ModifierInvocation","src":"719:16:2"}],"name":"__ERC1967Upgrade_init","nameLocation":"686:21:2","nodeType":"FunctionDefinition","parameters":{"id":152,"nodeType":"ParameterList","parameters":[],"src":"707:2:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"736:0:2"},"scope":510,"src":"677:66:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":162,"nodeType":"Block","src":"818:7:2","statements":[]},"id":163,"implemented":true,"kind":"function","modifiers":[{"id":160,"kind":"modifierInvocation","modifierName":{"id":159,"name":"onlyInitializing","nameLocations":["801:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"801:16:2"},"nodeType":"ModifierInvocation","src":"801:16:2"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"758:31:2","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"789:2:2"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"818:0:2"},"scope":510,"src":"749:76:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":166,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"934:14:2","nodeType":"VariableDeclaration","scope":510,"src":"909:108:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"909:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:66:2","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"1024:214:2","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":170,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1269:20:2","nodeType":"VariableDeclaration","scope":510,"src":"1243:115:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1292:66:2","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"1365:68:2","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":175,"name":"Upgraded","nameLocation":"1444:8:2","nodeType":"EventDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1469:14:2","nodeType":"VariableDeclaration","scope":175,"src":"1453:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":172,"name":"address","nodeType":"ElementaryTypeName","src":"1453:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1452:32:2"},"src":"1438:47:2"},{"body":{"id":187,"nodeType":"Block","src":"1625:89:2","statements":[{"expression":{"expression":{"arguments":[{"id":183,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"1680:20:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":181,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"1642:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2752_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1665:14:2","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2718,"src":"1642:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2698_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1642:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1702:5:2","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"1642:65:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":180,"id":186,"nodeType":"Return","src":"1635:72:2"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"1491:67:2","text":" @dev Returns the current implementation address."},"id":188,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1572:18:2","nodeType":"FunctionDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[],"src":"1590:2:2"},"returnParameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":188,"src":"1616:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1615:9:2"},"scope":510,"src":"1563:151:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":211,"nodeType":"Block","src":"1868:218:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":197,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"1916:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":195,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"1886:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2650_$","typeString":"type(library AddressUpgradeable)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1905:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"1886:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1936:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1878:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1878:106:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":201,"nodeType":"ExpressionStatement","src":"1878:106:2"},{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":205,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"2032:20:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":202,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"1994:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2752_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2017:14:2","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2718,"src":"1994:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2698_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1994:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":207,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2054:5:2","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"1994:65:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":208,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2062:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1994:85:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":210,"nodeType":"ExpressionStatement","src":"1994:85:2"}]},"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"1720:80:2","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":212,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1814:18:2","nodeType":"FunctionDefinition","parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"newImplementation","nameLocation":"1841:17:2","nodeType":"VariableDeclaration","scope":212,"src":"1833:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1832:27:2"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[],"src":"1868:0:2"},"scope":510,"src":"1805:281:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":226,"nodeType":"Block","src":"2248:96:2","statements":[{"expression":{"arguments":[{"id":219,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"2277:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"2258:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"2258:37:2"},{"eventCall":{"arguments":[{"id":223,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"2319:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":222,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"2310:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"EmitStatement","src":"2305:32:2"}]},"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"2092:95:2","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2201:10:2","nodeType":"FunctionDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"newImplementation","nameLocation":"2220:17:2","nodeType":"VariableDeclaration","scope":227,"src":"2212:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2211:27:2"},"returnParameters":{"id":217,"nodeType":"ParameterList","parameters":[],"src":"2248:0:2"},"scope":510,"src":"2192:152:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":254,"nodeType":"Block","src":"2606:160:2","statements":[{"expression":{"arguments":[{"id":238,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"2627:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":237,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"2616:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":240,"nodeType":"ExpressionStatement","src":"2616:29:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":241,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2659:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2664:6:2","memberName":"length","nodeType":"MemberAccess","src":"2659:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2673:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2659:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":245,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"2678:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2659:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":253,"nodeType":"IfStatement","src":"2655:105:2","trueBody":{"id":252,"nodeType":"Block","src":"2689:71:2","statements":[{"expression":{"arguments":[{"id":248,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"2725:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":249,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2744:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":247,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"2703:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2703:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":251,"nodeType":"ExpressionStatement","src":"2703:46:2"}]}}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"2350:123:2","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":255,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2487:17:2","nodeType":"FunctionDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"newImplementation","nameLocation":"2522:17:2","nodeType":"VariableDeclaration","scope":255,"src":"2514:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"2514:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"data","nameLocation":"2562:4:2","nodeType":"VariableDeclaration","scope":255,"src":"2549:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":231,"name":"bytes","nodeType":"ElementaryTypeName","src":"2549:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"forceCall","nameLocation":"2581:9:2","nodeType":"VariableDeclaration","scope":255,"src":"2576:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":233,"name":"bool","nodeType":"ElementaryTypeName","src":"2576:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2504:92:2"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"2606:0:2"},"scope":510,"src":"2478:288:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":307,"nodeType":"Block","src":"3070:842:2","statements":[{"condition":{"expression":{"arguments":[{"id":267,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"3422:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":265,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"3384:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2752_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:14:2","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"3384:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2701_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2701_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":269,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3438:5:2","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2700,"src":"3384:59:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":305,"nodeType":"Block","src":"3513:393:2","statements":[{"clauses":[{"block":{"id":290,"nodeType":"Block","src":"3618:115:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":284,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3644:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":285,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"3652:20:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3644:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3674:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":283,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3636:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3636:82:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":289,"nodeType":"ExpressionStatement","src":"3636:82:2"}]},"errorName":"","id":291,"nodeType":"TryCatchClause","parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"slot","nameLocation":"3612:4:2","nodeType":"VariableDeclaration","scope":291,"src":"3604:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3604:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3603:14:2"},"src":"3595:138:2"},{"block":{"id":296,"nodeType":"Block","src":"3740:89:2","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3765:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":292,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3758:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3758:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":295,"nodeType":"ExpressionStatement","src":"3758:56:2"}]},"errorName":"","id":297,"nodeType":"TryCatchClause","src":"3734:95:2"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":276,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3560:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":275,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3531:28:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$141_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$141","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3579:13:2","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":140,"src":"3531:61:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:63:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":298,"nodeType":"TryStatement","src":"3527:302:2"},{"expression":{"arguments":[{"id":300,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3860:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":301,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"3879:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":302,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3885:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":299,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"3842:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3842:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"ExpressionStatement","src":"3842:53:2"}]},"id":306,"nodeType":"IfStatement","src":"3380:526:2","trueBody":{"id":274,"nodeType":"Block","src":"3445:62:2","statements":[{"expression":{"arguments":[{"id":271,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3478:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":270,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"3459:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3459:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":273,"nodeType":"ExpressionStatement","src":"3459:37:2"}]}}]},"documentation":{"id":256,"nodeType":"StructuredDocumentation","src":"2772:161:2","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":308,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2947:21:2","nodeType":"FunctionDefinition","parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":258,"mutability":"mutable","name":"newImplementation","nameLocation":"2986:17:2","nodeType":"VariableDeclaration","scope":308,"src":"2978:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"2978:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":260,"mutability":"mutable","name":"data","nameLocation":"3026:4:2","nodeType":"VariableDeclaration","scope":308,"src":"3013:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":259,"name":"bytes","nodeType":"ElementaryTypeName","src":"3013:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":262,"mutability":"mutable","name":"forceCall","nameLocation":"3045:9:2","nodeType":"VariableDeclaration","scope":308,"src":"3040:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":261,"name":"bool","nodeType":"ElementaryTypeName","src":"3040:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2968:92:2"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[],"src":"3070:0:2"},"scope":510,"src":"2938:974:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"3918:189:2","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":312,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4138:11:2","nodeType":"VariableDeclaration","scope":510,"src":"4112:106:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4112:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4152:66:2","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"4225:67:2","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":319,"name":"AdminChanged","nameLocation":"4303:12:2","nodeType":"EventDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"4324:13:2","nodeType":"VariableDeclaration","scope":319,"src":"4316:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"4316:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"4347:8:2","nodeType":"VariableDeclaration","scope":319,"src":"4339:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"4339:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4315:41:2"},"src":"4297:60:2"},{"body":{"id":331,"nodeType":"Block","src":"4471:80:2","statements":[{"expression":{"expression":{"arguments":[{"id":327,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"4526:11:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":325,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"4488:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2752_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4511:14:2","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2718,"src":"4488:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2698_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4488:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":329,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4539:5:2","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"4488:56:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":324,"id":330,"nodeType":"Return","src":"4481:63:2"}]},"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"4363:50:2","text":" @dev Returns the current admin."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4427:9:2","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[],"src":"4436:2:2"},"returnParameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":332,"src":"4462:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"4462:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4461:9:2"},"scope":510,"src":"4418:133:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":357,"nodeType":"Block","src":"4678:167:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":339,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"4696:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4716:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4708:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":340,"name":"address","nodeType":"ElementaryTypeName","src":"4708:7:2","typeDescriptions":{}}},"id":343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4708:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4696:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4720:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":338,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4688:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4688:73:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":347,"nodeType":"ExpressionStatement","src":"4688:73:2"},{"expression":{"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":351,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"4809:11:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":348,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"4771:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2752_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4794:14:2","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2718,"src":"4771:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2698_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4822:5:2","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"4771:56:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":354,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"4830:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4771:67:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":356,"nodeType":"ExpressionStatement","src":"4771:67:2"}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4557:71:2","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":358,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4642:9:2","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"newAdmin","nameLocation":"4660:8:2","nodeType":"VariableDeclaration","scope":358,"src":"4652:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"4652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4651:18:2"},"returnParameters":{"id":337,"nodeType":"ParameterList","parameters":[],"src":"4678:0:2"},"scope":510,"src":"4633:212:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":374,"nodeType":"Block","src":"5005:86:2","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":365,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"5033:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5033:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":367,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5046:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"5020:12:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5020:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":369,"nodeType":"EmitStatement","src":"5015:40:2"},{"expression":{"arguments":[{"id":371,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5075:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":370,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"5065:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5065:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":373,"nodeType":"ExpressionStatement","src":"5065:19:2"}]},"documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"4851:100:2","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":375,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4965:12:2","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"newAdmin","nameLocation":"4986:8:2","nodeType":"VariableDeclaration","scope":375,"src":"4978:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"4978:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4977:18:2"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"5005:0:2"},"scope":510,"src":"4956:135:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"5097:232:2","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":379,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5360:12:2","nodeType":"VariableDeclaration","scope":510,"src":"5334:107:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5334:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5375:66:2","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"5448:60:2","text":" @dev Emitted when the beacon is upgraded."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":384,"name":"BeaconUpgraded","nameLocation":"5519:14:2","nodeType":"EventDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"5550:6:2","nodeType":"VariableDeclaration","scope":384,"src":"5534:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":381,"name":"address","nodeType":"ElementaryTypeName","src":"5534:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5533:24:2"},"src":"5513:45:2"},{"body":{"id":396,"nodeType":"Block","src":"5674:81:2","statements":[{"expression":{"expression":{"arguments":[{"id":392,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"5729:12:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":390,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"5691:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2752_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5714:14:2","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2718,"src":"5691:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2698_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5691:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5743:5:2","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"5691:57:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":389,"id":395,"nodeType":"Return","src":"5684:64:2"}]},"documentation":{"id":385,"nodeType":"StructuredDocumentation","src":"5564:51:2","text":" @dev Returns the current beacon."},"id":397,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5629:10:2","nodeType":"FunctionDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"5639:2:2"},"returnParameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":397,"src":"5665:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"5665:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5664:9:2"},"scope":510,"src":"5620:135:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":432,"nodeType":"Block","src":"5884:368:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":406,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"5932:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":404,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"5902:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2650_$","typeString":"type(library AddressUpgradeable)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5921:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"5902:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5902:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5944:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5894:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:90:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":410,"nodeType":"ExpressionStatement","src":"5894:90:2"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":415,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"6064:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":414,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"6045:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$520_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6045:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$520","typeString":"contract IBeaconUpgradeable"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6075:14:2","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":519,"src":"6045:44:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6045:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":412,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"6015:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2650_$","typeString":"type(library AddressUpgradeable)"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6034:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"6015:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6015:77:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6106:50:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":411,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5994:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5994:172:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":422,"nodeType":"ExpressionStatement","src":"5994:172:2"},{"expression":{"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":426,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"6214:12:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":423,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"6176:22:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2752_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6199:14:2","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2718,"src":"6176:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2698_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6176:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6228:5:2","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"6176:57:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":429,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"6236:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6176:69:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":431,"nodeType":"ExpressionStatement","src":"6176:69:2"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"5761:71:2","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":433,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5846:10:2","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"newBeacon","nameLocation":"5865:9:2","nodeType":"VariableDeclaration","scope":433,"src":"5857:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"5857:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5856:19:2"},"returnParameters":{"id":402,"nodeType":"ParameterList","parameters":[],"src":"5884:0:2"},"scope":510,"src":"5837:415:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":468,"nodeType":"Block","src":"6681:221:2","statements":[{"expression":{"arguments":[{"id":444,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"6702:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":443,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6691:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6691:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":446,"nodeType":"ExpressionStatement","src":"6691:21:2"},{"eventCall":{"arguments":[{"id":448,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"6742:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":447,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"6727:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6727:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":450,"nodeType":"EmitStatement","src":"6722:30:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":451,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"6766:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6771:6:2","memberName":"length","nodeType":"MemberAccess","src":"6766:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6780:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6766:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":455,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"6785:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6766:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":467,"nodeType":"IfStatement","src":"6762:134:2","trueBody":{"id":466,"nodeType":"Block","src":"6796:100:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":459,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"6851:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":458,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"6832:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$520_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$520","typeString":"contract IBeaconUpgradeable"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6862:14:2","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":519,"src":"6832:44:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":463,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"6880:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":457,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"6810:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6810:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":465,"nodeType":"ExpressionStatement","src":"6810:75:2"}]}}]},"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"6258:292:2","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":469,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6564:23:2","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"newBeacon","nameLocation":"6605:9:2","nodeType":"VariableDeclaration","scope":469,"src":"6597:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":435,"name":"address","nodeType":"ElementaryTypeName","src":"6597:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"data","nameLocation":"6637:4:2","nodeType":"VariableDeclaration","scope":469,"src":"6624:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":437,"name":"bytes","nodeType":"ElementaryTypeName","src":"6624:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"forceCall","nameLocation":"6656:9:2","nodeType":"VariableDeclaration","scope":469,"src":"6651:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"6651:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6587:84:2"},"returnParameters":{"id":442,"nodeType":"ParameterList","parameters":[],"src":"6681:0:2"},"scope":510,"src":"6555:347:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":503,"nodeType":"Block","src":"7185:358:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":482,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"7233:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":480,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7203:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2650_$","typeString":"type(library AddressUpgradeable)"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7222:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"7203:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7203:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7242:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":479,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7195:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7195:88:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":486,"nodeType":"ExpressionStatement","src":"7195:88:2"},{"assignments":[488,490],"declarations":[{"constant":false,"id":488,"mutability":"mutable","name":"success","nameLocation":"7359:7:2","nodeType":"VariableDeclaration","scope":503,"src":"7354:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":487,"name":"bool","nodeType":"ElementaryTypeName","src":"7354:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"returndata","nameLocation":"7381:10:2","nodeType":"VariableDeclaration","scope":503,"src":"7368:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":489,"name":"bytes","nodeType":"ElementaryTypeName","src":"7368:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":495,"initialValue":{"arguments":[{"id":493,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"7415:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":491,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"7395:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7402:12:2","memberName":"delegatecall","nodeType":"MemberAccess","src":"7395:19:2","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7395:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7353:67:2"},{"expression":{"arguments":[{"id":498,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"7473:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":499,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7482:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:41:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"expression":{"id":496,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7437:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2650_$","typeString":"type(library AddressUpgradeable)"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7456:16:2","memberName":"verifyCallResult","nodeType":"MemberAccess","referencedDeclaration":2649,"src":"7437:35:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7437:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":478,"id":502,"nodeType":"Return","src":"7430:106:2"}]},"documentation":{"id":470,"nodeType":"StructuredDocumentation","src":"6908:175:2","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":504,"implemented":true,"kind":"function","modifiers":[],"name":"_functionDelegateCall","nameLocation":"7097:21:2","nodeType":"FunctionDefinition","parameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":472,"mutability":"mutable","name":"target","nameLocation":"7127:6:2","nodeType":"VariableDeclaration","scope":504,"src":"7119:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":471,"name":"address","nodeType":"ElementaryTypeName","src":"7119:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":474,"mutability":"mutable","name":"data","nameLocation":"7148:4:2","nodeType":"VariableDeclaration","scope":504,"src":"7135:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":473,"name":"bytes","nodeType":"ElementaryTypeName","src":"7135:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7118:35:2"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"7171:12:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":476,"name":"bytes","nodeType":"ElementaryTypeName","src":"7171:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7170:14:2"},"scope":510,"src":"7088:455:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"7549:254:2","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":509,"mutability":"mutable","name":"__gap","nameLocation":"7828:5:2","nodeType":"VariableDeclaration","scope":510,"src":"7808:25:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"7808:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":508,"length":{"hexValue":"3530","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:2:2","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"7808:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":511,"src":"610:7226:2","usedErrors":[]}],"src":"116:7721:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[520]},"id":521,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":512,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":513,"nodeType":"StructuredDocumentation","src":"118:79:3","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":520,"linearizedBaseContracts":[520],"name":"IBeaconUpgradeable","nameLocation":"208:18:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"233:162:3","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":519,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:3","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"423:2:3"},"returnParameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":519,"src":"449:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":516,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:3"},"scope":520,"src":"400:58:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":521,"src":"198:262:3","usedErrors":[]}],"src":"93:368:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"Initializable":[671]},"id":672,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":522,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":523,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":672,"sourceUnit":2651,"src":"138:44:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"184:2198:4","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":671,"linearizedBaseContracts":[671],"name":"Initializable","nameLocation":"2401:13:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"2421:109:4","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":527,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:4","nodeType":"VariableDeclaration","scope":671,"src":"2535:26:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":526,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"2568:91:4","text":" @dev Indicates that the contract is in the process of being initialized."},"id":530,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:4","nodeType":"VariableDeclaration","scope":671,"src":"2664:26:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":529,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"2697:90:4","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":535,"name":"Initialized","nameLocation":"2798:11:4","nodeType":"EventDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:4","nodeType":"VariableDeclaration","scope":535,"src":"2810:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":532,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:4"},"src":"2792:33:4"},{"body":{"id":590,"nodeType":"Block","src":"3101:483:4","statements":[{"assignments":[539],"declarations":[{"constant":false,"id":539,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3116:14:4","nodeType":"VariableDeclaration","scope":590,"src":"3111:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":538,"name":"bool","nodeType":"ElementaryTypeName","src":"3111:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":542,"initialValue":{"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3133:14:4","subExpression":{"id":540,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3134:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3111:36:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":544,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3179:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":545,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"3197:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3212:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3197:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3179:34:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":549,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3178:36:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3219:45:4","subExpression":{"arguments":[{"arguments":[{"id":554,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3258:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$671","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$671","typeString":"contract Initializable"}],"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3250:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":552,"name":"address","nodeType":"ElementaryTypeName","src":"3250:7:4","typeDescriptions":{}}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3250:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":550,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"3220:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2650_$","typeString":"type(library AddressUpgradeable)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3239:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"3220:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3220:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":558,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"3268:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3284:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3268:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3219:66:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":562,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3218:68:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3178:108:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3300:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":543,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3157:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3157:201:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":566,"nodeType":"ExpressionStatement","src":"3157:201:4"},{"expression":{"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":567,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"3368:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3383:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3368:16:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":570,"nodeType":"ExpressionStatement","src":"3368:16:4"},{"condition":{"id":571,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3398:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":577,"nodeType":"IfStatement","src":"3394:65:4","trueBody":{"id":576,"nodeType":"Block","src":"3414:45:4","statements":[{"expression":{"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":572,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3428:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3444:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3428:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":575,"nodeType":"ExpressionStatement","src":"3428:20:4"}]}},{"id":578,"nodeType":"PlaceholderStatement","src":"3468:1:4"},{"condition":{"id":579,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3483:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":589,"nodeType":"IfStatement","src":"3479:99:4","trueBody":{"id":588,"nodeType":"Block","src":"3499:79:4","statements":[{"expression":{"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":580,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3513:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3529:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3513:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":583,"nodeType":"ExpressionStatement","src":"3513:21:4"},{"eventCall":{"arguments":[{"hexValue":"31","id":585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":584,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"3553:11:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3553:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":587,"nodeType":"EmitStatement","src":"3548:19:4"}]}}]},"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"2831:242:4","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."},"id":591,"name":"initializer","nameLocation":"3087:11:4","nodeType":"ModifierDefinition","parameters":{"id":537,"nodeType":"ParameterList","parameters":[],"src":"3098:2:4"},"src":"3078:506:4","virtual":false,"visibility":"internal"},{"body":{"id":623,"nodeType":"Block","src":"4399:255:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4417:14:4","subExpression":{"id":597,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"4418:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":599,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"4435:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":600,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4450:7:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4435:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4417:40:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4459:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":596,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4409:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4409:99:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":605,"nodeType":"ExpressionStatement","src":"4409:99:4"},{"expression":{"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":606,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"4518:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":607,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4533:7:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4518:22:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":609,"nodeType":"ExpressionStatement","src":"4518:22:4"},{"expression":{"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":610,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"4550:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4566:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4550:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":613,"nodeType":"ExpressionStatement","src":"4550:20:4"},{"id":614,"nodeType":"PlaceholderStatement","src":"4580:1:4"},{"expression":{"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":615,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"4591:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4607:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4591:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":618,"nodeType":"ExpressionStatement","src":"4591:21:4"},{"eventCall":{"arguments":[{"id":620,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4639:7:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":619,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"4627:11:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4627:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":622,"nodeType":"EmitStatement","src":"4622:25:4"}]},"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"3590:766:4","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."},"id":624,"name":"reinitializer","nameLocation":"4370:13:4","nodeType":"ModifierDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"version","nameLocation":"4390:7:4","nodeType":"VariableDeclaration","scope":624,"src":"4384:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":593,"name":"uint8","nodeType":"ElementaryTypeName","src":"4384:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4383:15:4"},"src":"4361:293:4","virtual":false,"visibility":"internal"},{"body":{"id":633,"nodeType":"Block","src":"4892:97:4","statements":[{"expression":{"arguments":[{"id":628,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"4910:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4925:45:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":627,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4902:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4902:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"ExpressionStatement","src":"4902:69:4"},{"id":632,"nodeType":"PlaceholderStatement","src":"4981:1:4"}]},"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"4660:199:4","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":634,"name":"onlyInitializing","nameLocation":"4873:16:4","nodeType":"ModifierDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"4889:2:4"},"src":"4864:125:4","virtual":false,"visibility":"internal"},{"body":{"id":669,"nodeType":"Block","src":"5437:230:4","statements":[{"expression":{"arguments":[{"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5455:14:4","subExpression":{"id":639,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"5456:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5471:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":638,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5447:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"5447:66:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":644,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5527:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5547:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":646,"name":"uint8","nodeType":"ElementaryTypeName","src":"5547:5:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":645,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5542:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5542:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5554:3:4","memberName":"max","nodeType":"MemberAccess","src":"5542:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5527:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":668,"nodeType":"IfStatement","src":"5523:138:4","trueBody":{"id":667,"nodeType":"Block","src":"5559:102:4","statements":[{"expression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":651,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5573:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5593:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":653,"name":"uint8","nodeType":"ElementaryTypeName","src":"5593:5:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":652,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5588:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5588:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5600:3:4","memberName":"max","nodeType":"MemberAccess","src":"5588:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5573:30:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":658,"nodeType":"ExpressionStatement","src":"5573:30:4"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5639:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":661,"name":"uint8","nodeType":"ElementaryTypeName","src":"5639:5:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":660,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5634:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5634:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5646:3:4","memberName":"max","nodeType":"MemberAccess","src":"5634:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":659,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"5622:11:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5622:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":666,"nodeType":"EmitStatement","src":"5617:33:4"}]}}]},"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"4995:388:4","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."},"id":670,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5397:20:4","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[],"src":"5417:2:4"},"returnParameters":{"id":637,"nodeType":"ParameterList","parameters":[],"src":"5437:0:4"},"scope":671,"src":"5388:279:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":672,"src":"2383:3286:4","usedErrors":[]}],"src":"113:5557:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ERC1967UpgradeUpgradeable":[510],"IBeaconUpgradeable":[520],"IERC1822ProxiableUpgradeable":[141],"Initializable":[671],"StorageSlotUpgradeable":[2752],"UUPSUpgradeable":[807]},"id":808,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":673,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":674,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":808,"sourceUnit":142,"src":"140:56:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":675,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":808,"sourceUnit":511,"src":"197:50:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":676,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":808,"sourceUnit":672,"src":"248:29:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":678,"name":"Initializable","nameLocations":["965:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"965:13:5"},"id":679,"nodeType":"InheritanceSpecifier","src":"965:13:5"},{"baseName":{"id":680,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:5"],"nodeType":"IdentifierPath","referencedDeclaration":141,"src":"980:28:5"},"id":681,"nodeType":"InheritanceSpecifier","src":"980:28:5"},{"baseName":{"id":682,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:5"],"nodeType":"IdentifierPath","referencedDeclaration":510,"src":"1010:25:5"},"id":683,"nodeType":"InheritanceSpecifier","src":"1010:25:5"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"279:648:5","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":807,"linearizedBaseContracts":[807,510,141,671],"name":"UUPSUpgradeable","nameLocation":"946:15:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":688,"nodeType":"Block","src":"1102:7:5","statements":[]},"id":689,"implemented":true,"kind":"function","modifiers":[{"id":686,"kind":"modifierInvocation","modifierName":{"id":685,"name":"onlyInitializing","nameLocations":["1085:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1085:16:5"},"nodeType":"ModifierInvocation","src":"1085:16:5"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:5","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"1073:2:5"},"returnParameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"1102:0:5"},"scope":807,"src":"1042:67:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":694,"nodeType":"Block","src":"1185:7:5","statements":[]},"id":695,"implemented":true,"kind":"function","modifiers":[{"id":692,"kind":"modifierInvocation","modifierName":{"id":691,"name":"onlyInitializing","nameLocations":["1168:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1168:16:5"},"nodeType":"ModifierInvocation","src":"1168:16:5"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:5","nodeType":"FunctionDefinition","parameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"1156:2:5"},"returnParameters":{"id":693,"nodeType":"ParameterList","parameters":[],"src":"1185:0:5"},"scope":807,"src":"1115:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"1197:87:5","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":702,"mutability":"immutable","name":"__self","nameLocation":"1315:6:5","nodeType":"VariableDeclaration","scope":807,"src":"1289:48:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":700,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$807","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$807","typeString":"contract UUPSUpgradeable"}],"id":699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":698,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:5","typeDescriptions":{}}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":724,"nodeType":"Block","src":"1863:205:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":708,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$807","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$807","typeString":"contract UUPSUpgradeable"}],"id":707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:5","typeDescriptions":{}}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":710,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"1898:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":705,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":714,"nodeType":"ExpressionStatement","src":"1873:80:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":716,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"1971:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":718,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"1995:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":715,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":722,"nodeType":"ExpressionStatement","src":"1963:87:5"},{"id":723,"nodeType":"PlaceholderStatement","src":"2060:1:5"}]},"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"1344:493:5","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":725,"name":"onlyProxy","nameLocation":"1851:9:5","nodeType":"ModifierDefinition","parameters":{"id":704,"nodeType":"ParameterList","parameters":[],"src":"1860:2:5"},"src":"1842:226:5","virtual":false,"visibility":"internal"},{"body":{"id":739,"nodeType":"Block","src":"2298:120:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":731,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$807","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$807","typeString":"contract UUPSUpgradeable"}],"id":730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:5","typeDescriptions":{}}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":733,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"2333:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":728,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":737,"nodeType":"ExpressionStatement","src":"2308:92:5"},{"id":738,"nodeType":"PlaceholderStatement","src":"2410:1:5"}]},"documentation":{"id":726,"nodeType":"StructuredDocumentation","src":"2074:195:5","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":740,"name":"notDelegated","nameLocation":"2283:12:5","nodeType":"ModifierDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[],"src":"2295:2:5"},"src":"2274:144:5","virtual":false,"visibility":"internal"},{"baseFunctions":[140],"body":{"id":751,"nodeType":"Block","src":"3091:44:5","statements":[{"expression":{"id":749,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"3108:20:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":748,"id":750,"nodeType":"Return","src":"3101:27:5"}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"2424:575:5","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate that the this implementation remains valid after an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":752,"implemented":true,"kind":"function","modifiers":[{"id":745,"kind":"modifierInvocation","modifierName":{"id":744,"name":"notDelegated","nameLocations":["3060:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"3060:12:5"},"nodeType":"ModifierInvocation","src":"3060:12:5"}],"name":"proxiableUUID","nameLocation":"3013:13:5","nodeType":"FunctionDefinition","overrides":{"id":743,"nodeType":"OverrideSpecifier","overrides":[],"src":"3051:8:5"},"parameters":{"id":742,"nodeType":"ParameterList","parameters":[],"src":"3026:2:5"},"returnParameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":752,"src":"3082:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3082:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3081:9:5"},"scope":807,"src":"3004:131:5","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":773,"nodeType":"Block","src":"3388:124:5","statements":[{"expression":{"arguments":[{"id":761,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"3416:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":760,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3398:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3398:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":763,"nodeType":"ExpressionStatement","src":"3398:36:5"},{"expression":{"arguments":[{"id":765,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"3466:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3495:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":767,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3485:9:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":766,"name":"bytes","nodeType":"ElementaryTypeName","src":"3489:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3485:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3499:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":764,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"3444:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3444:61:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":772,"nodeType":"ExpressionStatement","src":"3444:61:5"}]},"documentation":{"id":753,"nodeType":"StructuredDocumentation","src":"3141:169:5","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"3659cfe6","id":774,"implemented":true,"kind":"function","modifiers":[{"id":758,"kind":"modifierInvocation","modifierName":{"id":757,"name":"onlyProxy","nameLocations":["3378:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":725,"src":"3378:9:5"},"nodeType":"ModifierInvocation","src":"3378:9:5"}],"name":"upgradeTo","nameLocation":"3324:9:5","nodeType":"FunctionDefinition","parameters":{"id":756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":755,"mutability":"mutable","name":"newImplementation","nameLocation":"3342:17:5","nodeType":"VariableDeclaration","scope":774,"src":"3334:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":754,"name":"address","nodeType":"ElementaryTypeName","src":"3334:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3333:27:5"},"returnParameters":{"id":759,"nodeType":"ParameterList","parameters":[],"src":"3388:0:5"},"scope":807,"src":"3315:197:5","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":794,"nodeType":"Block","src":"3868:115:5","statements":[{"expression":{"arguments":[{"id":785,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3896:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":784,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3878:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3878:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":787,"nodeType":"ExpressionStatement","src":"3878:36:5"},{"expression":{"arguments":[{"id":789,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3946:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":790,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"3965:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3971:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":788,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"3924:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3924:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":793,"nodeType":"ExpressionStatement","src":"3924:52:5"}]},"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"3518:238:5","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"4f1ef286","id":795,"implemented":true,"kind":"function","modifiers":[{"id":782,"kind":"modifierInvocation","modifierName":{"id":781,"name":"onlyProxy","nameLocations":["3858:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":725,"src":"3858:9:5"},"nodeType":"ModifierInvocation","src":"3858:9:5"}],"name":"upgradeToAndCall","nameLocation":"3770:16:5","nodeType":"FunctionDefinition","parameters":{"id":780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":777,"mutability":"mutable","name":"newImplementation","nameLocation":"3795:17:5","nodeType":"VariableDeclaration","scope":795,"src":"3787:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"3787:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":779,"mutability":"mutable","name":"data","nameLocation":"3827:4:5","nodeType":"VariableDeclaration","scope":795,"src":"3814:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":778,"name":"bytes","nodeType":"ElementaryTypeName","src":"3814:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:46:5"},"returnParameters":{"id":783,"nodeType":"ParameterList","parameters":[],"src":"3868:0:5"},"scope":807,"src":"3761:222:5","stateMutability":"payable","virtual":true,"visibility":"external"},{"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"3989:397:5","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":801,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4400:17:5","nodeType":"FunctionDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"newImplementation","nameLocation":"4426:17:5","nodeType":"VariableDeclaration","scope":801,"src":"4418:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"4418:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4417:27:5"},"returnParameters":{"id":800,"nodeType":"ParameterList","parameters":[],"src":"4461:0:5"},"scope":807,"src":"4391:71:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"4468:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":806,"mutability":"mutable","name":"__gap","nameLocation":"4747:5:5","nodeType":"VariableDeclaration","scope":807,"src":"4727:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":803,"name":"uint256","nodeType":"ElementaryTypeName","src":"4727:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":805,"length":{"hexValue":"3530","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4735:2:5","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4727:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":808,"src":"928:3827:5","usedErrors":[]}],"src":"115:4641:5"},"id":5},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ContextUpgradeable":[2692],"ERC1155Upgradeable":[2052],"ERC165Upgradeable":[3022],"IERC1155MetadataURIUpgradeable":[2407],"IERC1155ReceiverUpgradeable":[2093],"IERC1155Upgradeable":[2215],"IERC165Upgradeable":[3034],"Initializable":[671]},"id":2053,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":809,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","file":"./IERC1155Upgradeable.sol","id":810,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2053,"sourceUnit":2216,"src":"134:35:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","file":"./IERC1155ReceiverUpgradeable.sol","id":811,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2053,"sourceUnit":2094,"src":"170:43:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","file":"./extensions/IERC1155MetadataURIUpgradeable.sol","id":812,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2053,"sourceUnit":2408,"src":"214:57:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":813,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2053,"sourceUnit":2651,"src":"272:44:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":814,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2053,"sourceUnit":2693,"src":"317:44:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../../utils/introspection/ERC165Upgradeable.sol","id":815,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2053,"sourceUnit":3023,"src":"362:57:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":816,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2053,"sourceUnit":672,"src":"420:45:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":818,"name":"Initializable","nameLocations":["713:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"713:13:6"},"id":819,"nodeType":"InheritanceSpecifier","src":"713:13:6"},{"baseName":{"id":820,"name":"ContextUpgradeable","nameLocations":["728:18:6"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"728:18:6"},"id":821,"nodeType":"InheritanceSpecifier","src":"728:18:6"},{"baseName":{"id":822,"name":"ERC165Upgradeable","nameLocations":["748:17:6"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"748:17:6"},"id":823,"nodeType":"InheritanceSpecifier","src":"748:17:6"},{"baseName":{"id":824,"name":"IERC1155Upgradeable","nameLocations":["767:19:6"],"nodeType":"IdentifierPath","referencedDeclaration":2215,"src":"767:19:6"},"id":825,"nodeType":"InheritanceSpecifier","src":"767:19:6"},{"baseName":{"id":826,"name":"IERC1155MetadataURIUpgradeable","nameLocations":["788:30:6"],"nodeType":"IdentifierPath","referencedDeclaration":2407,"src":"788:30:6"},"id":827,"nodeType":"InheritanceSpecifier","src":"788:30:6"}],"canonicalName":"ERC1155Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"467:214:6","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155\n _Available since v3.1._"},"fullyImplemented":true,"id":2052,"linearizedBaseContracts":[2052,2407,2215,3022,3034,2692,671],"name":"ERC1155Upgradeable","nameLocation":"691:18:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":830,"libraryName":{"id":828,"name":"AddressUpgradeable","nameLocations":["831:18:6"],"nodeType":"IdentifierPath","referencedDeclaration":2650,"src":"831:18:6"},"nodeType":"UsingForDirective","src":"825:37:6","typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":836,"mutability":"mutable","name":"_balances","nameLocation":"973:9:6","nodeType":"VariableDeclaration","scope":2052,"src":"917:65:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":835,"keyType":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"917:47:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueType":{"id":834,"keyType":{"id":832,"name":"address","nodeType":"ElementaryTypeName","src":"944:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"936:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"955:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":842,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1092:18:6","nodeType":"VariableDeclaration","scope":2052,"src":"1039:71:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":841,"keyType":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"1047:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1039:44:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":840,"keyType":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1058:24:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":839,"name":"bool","nodeType":"ElementaryTypeName","src":"1077:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":844,"mutability":"mutable","name":"_uri","nameLocation":"1246:4:6","nodeType":"VariableDeclaration","scope":2052,"src":"1231:19:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":843,"name":"string","nodeType":"ElementaryTypeName","src":"1231:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":856,"nodeType":"Block","src":"1370:47:6","statements":[{"expression":{"arguments":[{"id":853,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"1405:4:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":852,"name":"__ERC1155_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"1380:24:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1380:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":855,"nodeType":"ExpressionStatement","src":"1380:30:6"}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"1257:38:6","text":" @dev See {_setURI}."},"id":857,"implemented":true,"kind":"function","modifiers":[{"id":850,"kind":"modifierInvocation","modifierName":{"id":849,"name":"onlyInitializing","nameLocations":["1353:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1353:16:6"},"nodeType":"ModifierInvocation","src":"1353:16:6"}],"name":"__ERC1155_init","nameLocation":"1309:14:6","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"uri_","nameLocation":"1338:4:6","nodeType":"VariableDeclaration","scope":857,"src":"1324:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":846,"name":"string","nodeType":"ElementaryTypeName","src":"1324:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1323:20:6"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[],"src":"1370:0:6"},"scope":2052,"src":"1300:117:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":868,"nodeType":"Block","src":"1503:30:6","statements":[{"expression":{"arguments":[{"id":865,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"1521:4:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":864,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"1513:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1513:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":867,"nodeType":"ExpressionStatement","src":"1513:13:6"}]},"id":869,"implemented":true,"kind":"function","modifiers":[{"id":862,"kind":"modifierInvocation","modifierName":{"id":861,"name":"onlyInitializing","nameLocations":["1486:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1486:16:6"},"nodeType":"ModifierInvocation","src":"1486:16:6"}],"name":"__ERC1155_init_unchained","nameLocation":"1432:24:6","nodeType":"FunctionDefinition","parameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":859,"mutability":"mutable","name":"uri_","nameLocation":"1471:4:6","nodeType":"VariableDeclaration","scope":869,"src":"1457:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":858,"name":"string","nodeType":"ElementaryTypeName","src":"1457:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1456:20:6"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[],"src":"1503:0:6"},"scope":2052,"src":"1423:110:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3016,3033],"body":{"id":899,"nodeType":"Block","src":"1730:219:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":880,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"1759:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":882,"name":"IERC1155Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"1779:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2215_$","typeString":"type(contract IERC1155Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2215_$","typeString":"type(contract IERC1155Upgradeable)"}],"id":881,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1774:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1774:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Upgradeable_$2215","typeString":"type(contract IERC1155Upgradeable)"}},"id":884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1774:37:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1759:52:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":886,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"1827:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":888,"name":"IERC1155MetadataURIUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"1847:30:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2407_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2407_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}],"id":887,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1842:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURIUpgradeable_$2407","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1879:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1842:48:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1827:63:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1759:131:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":895,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"1930:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":893,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1906:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155Upgradeable_$2052_$","typeString":"type(contract super ERC1155Upgradeable)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1912:17:6","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3016,"src":"1906:23:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1906:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1759:183:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":879,"id":898,"nodeType":"Return","src":"1740:202:6"}]},"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"1539:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":900,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1609:17:6","nodeType":"FunctionDefinition","overrides":{"id":876,"nodeType":"OverrideSpecifier","overrides":[{"id":874,"name":"ERC165Upgradeable","nameLocations":["1676:17:6"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"1676:17:6"},{"id":875,"name":"IERC165Upgradeable","nameLocations":["1695:18:6"],"nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"1695:18:6"}],"src":"1667:47:6"},"parameters":{"id":873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"interfaceId","nameLocation":"1634:11:6","nodeType":"VariableDeclaration","scope":900,"src":"1627:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":871,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1627:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1626:20:6"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"1724:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":877,"name":"bool","nodeType":"ElementaryTypeName","src":"1724:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1723:6:6"},"scope":2052,"src":"1600:349:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2406],"body":{"id":911,"nodeType":"Block","src":"2423:28:6","statements":[{"expression":{"id":909,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"2440:4:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":908,"id":910,"nodeType":"Return","src":"2433:11:6"}]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"1955:388:6","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":912,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"2357:3:6","nodeType":"FunctionDefinition","overrides":{"id":905,"nodeType":"OverrideSpecifier","overrides":[],"src":"2390:8:6"},"parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":912,"src":"2361:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"2361:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2360:9:6"},"returnParameters":{"id":908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":912,"src":"2408:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":906,"name":"string","nodeType":"ElementaryTypeName","src":"2408:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2407:15:6"},"scope":2052,"src":"2348:103:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2153],"body":{"id":939,"nodeType":"Block","src":"2688:132:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":924,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"2706:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2725:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:6","typeDescriptions":{}}},"id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2706:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2729:44:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""},"value":"ERC1155: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""}],"id":923,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2698:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2698:76:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":932,"nodeType":"ExpressionStatement","src":"2698:76:6"},{"expression":{"baseExpression":{"baseExpression":{"id":933,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"2791:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":935,"indexExpression":{"id":934,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"2801:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2791:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":937,"indexExpression":{"id":936,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"2805:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2791:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":922,"id":938,"nodeType":"Return","src":"2784:29:6"}]},"documentation":{"id":913,"nodeType":"StructuredDocumentation","src":"2457:131:6","text":" @dev See {IERC1155-balanceOf}.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":940,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2602:9:6","nodeType":"FunctionDefinition","overrides":{"id":919,"nodeType":"OverrideSpecifier","overrides":[],"src":"2661:8:6"},"parameters":{"id":918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":915,"mutability":"mutable","name":"account","nameLocation":"2620:7:6","nodeType":"VariableDeclaration","scope":940,"src":"2612:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":914,"name":"address","nodeType":"ElementaryTypeName","src":"2612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":917,"mutability":"mutable","name":"id","nameLocation":"2637:2:6","nodeType":"VariableDeclaration","scope":940,"src":"2629:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":916,"name":"uint256","nodeType":"ElementaryTypeName","src":"2629:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2611:29:6"},"returnParameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":940,"src":"2679:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":920,"name":"uint256","nodeType":"ElementaryTypeName","src":"2679:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:9:6"},"scope":2052,"src":"2593:227:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2166],"body":{"id":1003,"nodeType":"Block","src":"3150:335:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":955,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"3168:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3177:6:6","memberName":"length","nodeType":"MemberAccess","src":"3168:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":957,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"3187:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3191:6:6","memberName":"length","nodeType":"MemberAccess","src":"3187:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3168:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368","id":960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3199:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""},"value":"ERC1155: accounts and ids length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""}],"id":954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3160:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3160:83:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":962,"nodeType":"ExpressionStatement","src":"3160:83:6"},{"assignments":[967],"declarations":[{"constant":false,"id":967,"mutability":"mutable","name":"batchBalances","nameLocation":"3271:13:6","nodeType":"VariableDeclaration","scope":1003,"src":"3254:30:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":965,"name":"uint256","nodeType":"ElementaryTypeName","src":"3254:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":966,"nodeType":"ArrayTypeName","src":"3254:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":974,"initialValue":{"arguments":[{"expression":{"id":971,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"3301:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3310:6:6","memberName":"length","nodeType":"MemberAccess","src":"3301:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3287:13:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":968,"name":"uint256","nodeType":"ElementaryTypeName","src":"3291:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":969,"nodeType":"ArrayTypeName","src":"3291:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3287:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3254:63:6"},{"body":{"id":999,"nodeType":"Block","src":"3374:74:6","statements":[{"expression":{"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":986,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"3388:13:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":988,"indexExpression":{"id":987,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"3402:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3388:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":990,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"3417:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":992,"indexExpression":{"id":991,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"3426:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3417:11:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":993,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"3430:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":995,"indexExpression":{"id":994,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"3434:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3430:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":989,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"3407:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3388:49:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":998,"nodeType":"ExpressionStatement","src":"3388:49:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":979,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"3348:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":980,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"3352:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3361:6:6","memberName":"length","nodeType":"MemberAccess","src":"3352:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3348:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1000,"initializationExpression":{"assignments":[976],"declarations":[{"constant":false,"id":976,"mutability":"mutable","name":"i","nameLocation":"3341:1:6","nodeType":"VariableDeclaration","scope":1000,"src":"3333:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":975,"name":"uint256","nodeType":"ElementaryTypeName","src":"3333:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":978,"initialValue":{"hexValue":"30","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3345:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3333:13:6"},"loopExpression":{"expression":{"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3369:3:6","subExpression":{"id":983,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"3371:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":985,"nodeType":"ExpressionStatement","src":"3369:3:6"},"nodeType":"ForStatement","src":"3328:120:6"},{"expression":{"id":1001,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"3465:13:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":953,"id":1002,"nodeType":"Return","src":"3458:20:6"}]},"documentation":{"id":941,"nodeType":"StructuredDocumentation","src":"2826:146:6","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":1004,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2986:14:6","nodeType":"FunctionDefinition","overrides":{"id":949,"nodeType":"OverrideSpecifier","overrides":[],"src":"3102:8:6"},"parameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"mutability":"mutable","name":"accounts","nameLocation":"3018:8:6","nodeType":"VariableDeclaration","scope":1004,"src":"3001:25:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":942,"name":"address","nodeType":"ElementaryTypeName","src":"3001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":943,"nodeType":"ArrayTypeName","src":"3001:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":947,"mutability":"mutable","name":"ids","nameLocation":"3045:3:6","nodeType":"VariableDeclaration","scope":1004,"src":"3028:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"3028:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":946,"nodeType":"ArrayTypeName","src":"3028:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3000:49:6"},"returnParameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1004,"src":"3128:16:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"3128:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":951,"nodeType":"ArrayTypeName","src":"3128:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3127:18:6"},"scope":2052,"src":"2977:508:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2174],"body":{"id":1020,"nodeType":"Block","src":"3637:69:6","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1014,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"3666:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3666:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1016,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"3680:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1017,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"3690:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1013,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"3647:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3647:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1019,"nodeType":"ExpressionStatement","src":"3647:52:6"}]},"documentation":{"id":1005,"nodeType":"StructuredDocumentation","src":"3491:57:6","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":1021,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3562:17:6","nodeType":"FunctionDefinition","overrides":{"id":1011,"nodeType":"OverrideSpecifier","overrides":[],"src":"3628:8:6"},"parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1007,"mutability":"mutable","name":"operator","nameLocation":"3588:8:6","nodeType":"VariableDeclaration","scope":1021,"src":"3580:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1006,"name":"address","nodeType":"ElementaryTypeName","src":"3580:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1009,"mutability":"mutable","name":"approved","nameLocation":"3603:8:6","nodeType":"VariableDeclaration","scope":1021,"src":"3598:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1008,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3579:33:6"},"returnParameters":{"id":1012,"nodeType":"ParameterList","parameters":[],"src":"3637:0:6"},"scope":2052,"src":"3553:153:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2184],"body":{"id":1038,"nodeType":"Block","src":"3878:61:6","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1032,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"3895:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1034,"indexExpression":{"id":1033,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"3914:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3895:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1036,"indexExpression":{"id":1035,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"3923:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3895:37:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1031,"id":1037,"nodeType":"Return","src":"3888:44:6"}]},"documentation":{"id":1022,"nodeType":"StructuredDocumentation","src":"3712:56:6","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1039,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3782:16:6","nodeType":"FunctionDefinition","overrides":{"id":1028,"nodeType":"OverrideSpecifier","overrides":[],"src":"3854:8:6"},"parameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1024,"mutability":"mutable","name":"account","nameLocation":"3807:7:6","nodeType":"VariableDeclaration","scope":1039,"src":"3799:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1023,"name":"address","nodeType":"ElementaryTypeName","src":"3799:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1026,"mutability":"mutable","name":"operator","nameLocation":"3824:8:6","nodeType":"VariableDeclaration","scope":1039,"src":"3816:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1025,"name":"address","nodeType":"ElementaryTypeName","src":"3816:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3798:35:6"},"returnParameters":{"id":1031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1039,"src":"3872:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1029,"name":"bool","nodeType":"ElementaryTypeName","src":"3872:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3871:6:6"},"scope":2052,"src":"3773:166:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2198],"body":{"id":1076,"nodeType":"Block","src":"4175:226:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1055,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"4206:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1056,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4214:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4206:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1060,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"4247:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1061,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4253:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1059,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"4230:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4230:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4206:60:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4280:49:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""},"value":"ERC1155: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""}],"id":1054,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4185:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4185:154:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1067,"nodeType":"ExpressionStatement","src":"4185:154:6"},{"expression":{"arguments":[{"id":1069,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"4367:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1070,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"4373:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1071,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"4377:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1072,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"4381:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1073,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"4389:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1068,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"4349:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4349:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1075,"nodeType":"ExpressionStatement","src":"4349:45:6"}]},"documentation":{"id":1040,"nodeType":"StructuredDocumentation","src":"3945:56:6","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":1077,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4015:16:6","nodeType":"FunctionDefinition","overrides":{"id":1052,"nodeType":"OverrideSpecifier","overrides":[],"src":"4166:8:6"},"parameters":{"id":1051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"from","nameLocation":"4049:4:6","nodeType":"VariableDeclaration","scope":1077,"src":"4041:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1041,"name":"address","nodeType":"ElementaryTypeName","src":"4041:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1044,"mutability":"mutable","name":"to","nameLocation":"4071:2:6","nodeType":"VariableDeclaration","scope":1077,"src":"4063:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1043,"name":"address","nodeType":"ElementaryTypeName","src":"4063:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1046,"mutability":"mutable","name":"id","nameLocation":"4091:2:6","nodeType":"VariableDeclaration","scope":1077,"src":"4083:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"4083:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"amount","nameLocation":"4111:6:6","nodeType":"VariableDeclaration","scope":1077,"src":"4103:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"4103:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"data","nameLocation":"4140:4:6","nodeType":"VariableDeclaration","scope":1077,"src":"4127:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1049,"name":"bytes","nodeType":"ElementaryTypeName","src":"4127:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4031:119:6"},"returnParameters":{"id":1053,"nodeType":"ParameterList","parameters":[],"src":"4175:0:6"},"scope":2052,"src":"4006:395:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2214],"body":{"id":1116,"nodeType":"Block","src":"4667:233:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1095,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"4698:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1096,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4706:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4706:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4698:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1100,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"4739:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1101,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4745:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4745:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1099,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"4722:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4722:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4698:60:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":1105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4772:49:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""},"value":"ERC1155: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""}],"id":1094,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4677:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4677:154:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1107,"nodeType":"ExpressionStatement","src":"4677:154:6"},{"expression":{"arguments":[{"id":1109,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"4864:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1110,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"4870:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1111,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"4874:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1112,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"4879:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1113,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"4888:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1108,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"4841:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4841:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1115,"nodeType":"ExpressionStatement","src":"4841:52:6"}]},"documentation":{"id":1078,"nodeType":"StructuredDocumentation","src":"4407:61:6","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":1117,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4482:21:6","nodeType":"FunctionDefinition","overrides":{"id":1092,"nodeType":"OverrideSpecifier","overrides":[],"src":"4658:8:6"},"parameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"mutability":"mutable","name":"from","nameLocation":"4521:4:6","nodeType":"VariableDeclaration","scope":1117,"src":"4513:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1079,"name":"address","nodeType":"ElementaryTypeName","src":"4513:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"to","nameLocation":"4543:2:6","nodeType":"VariableDeclaration","scope":1117,"src":"4535:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"4535:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"ids","nameLocation":"4572:3:6","nodeType":"VariableDeclaration","scope":1117,"src":"4555:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"4555:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1084,"nodeType":"ArrayTypeName","src":"4555:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1088,"mutability":"mutable","name":"amounts","nameLocation":"4602:7:6","nodeType":"VariableDeclaration","scope":1117,"src":"4585:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1086,"name":"uint256","nodeType":"ElementaryTypeName","src":"4585:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1087,"nodeType":"ArrayTypeName","src":"4585:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1090,"mutability":"mutable","name":"data","nameLocation":"4632:4:6","nodeType":"VariableDeclaration","scope":1117,"src":"4619:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1089,"name":"bytes","nodeType":"ElementaryTypeName","src":"4619:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4503:139:6"},"returnParameters":{"id":1093,"nodeType":"ParameterList","parameters":[],"src":"4667:0:6"},"scope":2052,"src":"4473:427:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1233,"nodeType":"Block","src":"5513:784:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1132,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"5531:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5545:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5537:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1133,"name":"address","nodeType":"ElementaryTypeName","src":"5537:7:6","typeDescriptions":{}}},"id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5537:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5531:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5549:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":1131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5523:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5523:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1140,"nodeType":"ExpressionStatement","src":"5523:66:6"},{"assignments":[1142],"declarations":[{"constant":false,"id":1142,"mutability":"mutable","name":"operator","nameLocation":"5608:8:6","nodeType":"VariableDeclaration","scope":1233,"src":"5600:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"5600:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1145,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1143,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"5619:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5619:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5600:31:6"},{"assignments":[1150],"declarations":[{"constant":false,"id":1150,"mutability":"mutable","name":"ids","nameLocation":"5658:3:6","nodeType":"VariableDeclaration","scope":1233,"src":"5641:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1148,"name":"uint256","nodeType":"ElementaryTypeName","src":"5641:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1149,"nodeType":"ArrayTypeName","src":"5641:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1154,"initialValue":{"arguments":[{"id":1152,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"5682:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1151,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5664:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5664:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5641:44:6"},{"assignments":[1159],"declarations":[{"constant":false,"id":1159,"mutability":"mutable","name":"amounts","nameLocation":"5712:7:6","nodeType":"VariableDeclaration","scope":1233,"src":"5695:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1157,"name":"uint256","nodeType":"ElementaryTypeName","src":"5695:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1158,"nodeType":"ArrayTypeName","src":"5695:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1163,"initialValue":{"arguments":[{"id":1161,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"5740:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1160,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5722:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5722:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5695:52:6"},{"expression":{"arguments":[{"id":1165,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"5779:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1166,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"5789:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1167,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"5795:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1168,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"5799:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1169,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"5804:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1170,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"5813:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1164,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"5758:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5758:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1172,"nodeType":"ExpressionStatement","src":"5758:60:6"},{"assignments":[1174],"declarations":[{"constant":false,"id":1174,"mutability":"mutable","name":"fromBalance","nameLocation":"5837:11:6","nodeType":"VariableDeclaration","scope":1233,"src":"5829:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"5829:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1180,"initialValue":{"baseExpression":{"baseExpression":{"id":1175,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"5851:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1177,"indexExpression":{"id":1176,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"5861:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5851:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1179,"indexExpression":{"id":1178,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"5865:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5851:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5829:41:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1182,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"5888:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1183,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"5903:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5888:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5911:44:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":1181,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5880:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5880:76:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1187,"nodeType":"ExpressionStatement","src":"5880:76:6"},{"id":1198,"nodeType":"UncheckedBlock","src":"5966:77:6","statements":[{"expression":{"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1188,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"5990:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1191,"indexExpression":{"id":1189,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"6000:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5990:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1192,"indexExpression":{"id":1190,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"6004:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5990:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1193,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"6012:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1194,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"6026:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6012:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5990:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1197,"nodeType":"ExpressionStatement","src":"5990:42:6"}]},{"expression":{"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1199,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"6052:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1202,"indexExpression":{"id":1200,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"6062:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6052:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1203,"indexExpression":{"id":1201,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6066:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6052:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1204,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"6073:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6052:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1206,"nodeType":"ExpressionStatement","src":"6052:27:6"},{"eventCall":{"arguments":[{"id":1208,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"6110:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1209,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"6120:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1210,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6126:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1211,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"6130:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1212,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"6134:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1207,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"6095:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6095:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1214,"nodeType":"EmitStatement","src":"6090:51:6"},{"expression":{"arguments":[{"id":1216,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"6172:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1217,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"6182:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1218,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6188:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1219,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"6192:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1220,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"6197:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1221,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"6206:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1215,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"6152:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6152:59:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1223,"nodeType":"ExpressionStatement","src":"6152:59:6"},{"expression":{"arguments":[{"id":1225,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"6253:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1226,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"6263:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1227,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6269:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1228,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"6273:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1229,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"6277:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1230,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"6285:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1224,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"6222:30:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6222:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1232,"nodeType":"ExpressionStatement","src":"6222:68:6"}]},"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"4906:439:6","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1234,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"5359:17:6","nodeType":"FunctionDefinition","parameters":{"id":1129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"mutability":"mutable","name":"from","nameLocation":"5394:4:6","nodeType":"VariableDeclaration","scope":1234,"src":"5386:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"5386:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"to","nameLocation":"5416:2:6","nodeType":"VariableDeclaration","scope":1234,"src":"5408:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"5408:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"id","nameLocation":"5436:2:6","nodeType":"VariableDeclaration","scope":1234,"src":"5428:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"5428:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"amount","nameLocation":"5456:6:6","nodeType":"VariableDeclaration","scope":1234,"src":"5448:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1125,"name":"uint256","nodeType":"ElementaryTypeName","src":"5448:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1128,"mutability":"mutable","name":"data","nameLocation":"5485:4:6","nodeType":"VariableDeclaration","scope":1234,"src":"5472:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1127,"name":"bytes","nodeType":"ElementaryTypeName","src":"5472:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5376:119:6"},"returnParameters":{"id":1130,"nodeType":"ParameterList","parameters":[],"src":"5513:0:6"},"scope":2052,"src":"5350:947:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1368,"nodeType":"Block","src":"6831:927:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1251,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"6849:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6853:6:6","memberName":"length","nodeType":"MemberAccess","src":"6849:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1253,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"6863:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6871:6:6","memberName":"length","nodeType":"MemberAccess","src":"6863:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6849:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6879:42:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6841:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6841:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1258,"nodeType":"ExpressionStatement","src":"6841:81:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1260,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"6940:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6954:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6946:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1261,"name":"address","nodeType":"ElementaryTypeName","src":"6946:7:6","typeDescriptions":{}}},"id":1264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6946:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6940:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6958:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":1259,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6932:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6932:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1268,"nodeType":"ExpressionStatement","src":"6932:66:6"},{"assignments":[1270],"declarations":[{"constant":false,"id":1270,"mutability":"mutable","name":"operator","nameLocation":"7017:8:6","nodeType":"VariableDeclaration","scope":1368,"src":"7009:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1269,"name":"address","nodeType":"ElementaryTypeName","src":"7009:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1273,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1271,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"7028:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7028:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7009:31:6"},{"expression":{"arguments":[{"id":1275,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"7072:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1276,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7082:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1277,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7088:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1278,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7092:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1279,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"7097:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1280,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"7106:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1274,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"7051:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7051:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1282,"nodeType":"ExpressionStatement","src":"7051:60:6"},{"body":{"id":1340,"nodeType":"Block","src":"7163:370:6","statements":[{"assignments":[1295],"declarations":[{"constant":false,"id":1295,"mutability":"mutable","name":"id","nameLocation":"7185:2:6","nodeType":"VariableDeclaration","scope":1340,"src":"7177:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"7177:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1299,"initialValue":{"baseExpression":{"id":1296,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7190:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1298,"indexExpression":{"id":1297,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"7194:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7190:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7177:19:6"},{"assignments":[1301],"declarations":[{"constant":false,"id":1301,"mutability":"mutable","name":"amount","nameLocation":"7218:6:6","nodeType":"VariableDeclaration","scope":1340,"src":"7210:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1300,"name":"uint256","nodeType":"ElementaryTypeName","src":"7210:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1305,"initialValue":{"baseExpression":{"id":1302,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"7227:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1304,"indexExpression":{"id":1303,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"7235:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7227:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7210:27:6"},{"assignments":[1307],"declarations":[{"constant":false,"id":1307,"mutability":"mutable","name":"fromBalance","nameLocation":"7260:11:6","nodeType":"VariableDeclaration","scope":1340,"src":"7252:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"7252:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1313,"initialValue":{"baseExpression":{"baseExpression":{"id":1308,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"7274:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1310,"indexExpression":{"id":1309,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"7284:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7274:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1312,"indexExpression":{"id":1311,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7288:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7274:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7252:41:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1315,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"7315:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1316,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"7330:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7315:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7338:44:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":1314,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7307:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:76:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1320,"nodeType":"ExpressionStatement","src":"7307:76:6"},{"id":1331,"nodeType":"UncheckedBlock","src":"7397:85:6","statements":[{"expression":{"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1321,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"7425:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1324,"indexExpression":{"id":1322,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"7435:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7425:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1325,"indexExpression":{"id":1323,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7439:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7425:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1326,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"7447:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1327,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"7461:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7447:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7425:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1330,"nodeType":"ExpressionStatement","src":"7425:42:6"}]},{"expression":{"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1332,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"7495:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1335,"indexExpression":{"id":1333,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"7505:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7495:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1336,"indexExpression":{"id":1334,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7509:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7495:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1337,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"7516:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7495:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1339,"nodeType":"ExpressionStatement","src":"7495:27:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1287,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"7142:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1288,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7146:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7150:6:6","memberName":"length","nodeType":"MemberAccess","src":"7146:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7142:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1341,"initializationExpression":{"assignments":[1284],"declarations":[{"constant":false,"id":1284,"mutability":"mutable","name":"i","nameLocation":"7135:1:6","nodeType":"VariableDeclaration","scope":1341,"src":"7127:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1283,"name":"uint256","nodeType":"ElementaryTypeName","src":"7127:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1286,"initialValue":{"hexValue":"30","id":1285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7139:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7127:13:6"},"loopExpression":{"expression":{"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7158:3:6","subExpression":{"id":1291,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"7160:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1293,"nodeType":"ExpressionStatement","src":"7158:3:6"},"nodeType":"ForStatement","src":"7122:411:6"},{"eventCall":{"arguments":[{"id":1343,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"7562:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1344,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7572:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1345,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7578:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1346,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7582:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1347,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"7587:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1342,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"7548:13:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7548:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1349,"nodeType":"EmitStatement","src":"7543:52:6"},{"expression":{"arguments":[{"id":1351,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"7626:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1352,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7636:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1353,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7642:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1354,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7646:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1355,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"7651:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1356,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"7660:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1350,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"7606:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7606:59:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1358,"nodeType":"ExpressionStatement","src":"7606:59:6"},{"expression":{"arguments":[{"id":1360,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"7712:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1361,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7722:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1362,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7728:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1363,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7732:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1364,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"7737:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1365,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"7746:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1359,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7676:35:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7676:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1367,"nodeType":"ExpressionStatement","src":"7676:75:6"}]},"documentation":{"id":1235,"nodeType":"StructuredDocumentation","src":"6303:335:6","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1369,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"6652:22:6","nodeType":"FunctionDefinition","parameters":{"id":1248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"from","nameLocation":"6692:4:6","nodeType":"VariableDeclaration","scope":1369,"src":"6684:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1236,"name":"address","nodeType":"ElementaryTypeName","src":"6684:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"to","nameLocation":"6714:2:6","nodeType":"VariableDeclaration","scope":1369,"src":"6706:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"6706:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"ids","nameLocation":"6743:3:6","nodeType":"VariableDeclaration","scope":1369,"src":"6726:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"6726:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1241,"nodeType":"ArrayTypeName","src":"6726:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"amounts","nameLocation":"6773:7:6","nodeType":"VariableDeclaration","scope":1369,"src":"6756:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"6756:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1244,"nodeType":"ArrayTypeName","src":"6756:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1247,"mutability":"mutable","name":"data","nameLocation":"6803:4:6","nodeType":"VariableDeclaration","scope":1369,"src":"6790:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1246,"name":"bytes","nodeType":"ElementaryTypeName","src":"6790:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6674:139:6"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[],"src":"6831:0:6"},"scope":2052,"src":"6643:1115:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1379,"nodeType":"Block","src":"8637:30:6","statements":[{"expression":{"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1375,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"8647:4:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1376,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"8654:6:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"8647:13:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1378,"nodeType":"ExpressionStatement","src":"8647:13:6"}]},"documentation":{"id":1370,"nodeType":"StructuredDocumentation","src":"7764:812:6","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the amounts in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":1380,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"8590:7:6","nodeType":"FunctionDefinition","parameters":{"id":1373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1372,"mutability":"mutable","name":"newuri","nameLocation":"8612:6:6","nodeType":"VariableDeclaration","scope":1380,"src":"8598:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1371,"name":"string","nodeType":"ElementaryTypeName","src":"8598:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8597:22:6"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[],"src":"8637:0:6"},"scope":2052,"src":"8581:86:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1480,"nodeType":"Block","src":"9169:580:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1393,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"9187:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9201:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9193:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1394,"name":"address","nodeType":"ElementaryTypeName","src":"9193:7:6","typeDescriptions":{}}},"id":1397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9193:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9187:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9205:35:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9179:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9179:62:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1401,"nodeType":"ExpressionStatement","src":"9179:62:6"},{"assignments":[1403],"declarations":[{"constant":false,"id":1403,"mutability":"mutable","name":"operator","nameLocation":"9260:8:6","nodeType":"VariableDeclaration","scope":1480,"src":"9252:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1402,"name":"address","nodeType":"ElementaryTypeName","src":"9252:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1406,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1404,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"9271:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9271:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9252:31:6"},{"assignments":[1411],"declarations":[{"constant":false,"id":1411,"mutability":"mutable","name":"ids","nameLocation":"9310:3:6","nodeType":"VariableDeclaration","scope":1480,"src":"9293:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1409,"name":"uint256","nodeType":"ElementaryTypeName","src":"9293:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1410,"nodeType":"ArrayTypeName","src":"9293:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1415,"initialValue":{"arguments":[{"id":1413,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"9334:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1412,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"9316:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9316:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9293:44:6"},{"assignments":[1420],"declarations":[{"constant":false,"id":1420,"mutability":"mutable","name":"amounts","nameLocation":"9364:7:6","nodeType":"VariableDeclaration","scope":1480,"src":"9347:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1418,"name":"uint256","nodeType":"ElementaryTypeName","src":"9347:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1419,"nodeType":"ArrayTypeName","src":"9347:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1424,"initialValue":{"arguments":[{"id":1422,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"9392:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1421,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"9374:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9374:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9347:52:6"},{"expression":{"arguments":[{"id":1426,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"9431:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9449:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9441:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1427,"name":"address","nodeType":"ElementaryTypeName","src":"9441:7:6","typeDescriptions":{}}},"id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9441:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1431,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"9453:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1432,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"9457:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1433,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"9462:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1434,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"9471:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1425,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"9410:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9410:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1436,"nodeType":"ExpressionStatement","src":"9410:66:6"},{"expression":{"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1437,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"9487:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1440,"indexExpression":{"id":1438,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"9497:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9487:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1441,"indexExpression":{"id":1439,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"9501:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1442,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"9508:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9487:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1444,"nodeType":"ExpressionStatement","src":"9487:27:6"},{"eventCall":{"arguments":[{"id":1446,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"9544:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9562:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9554:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1447,"name":"address","nodeType":"ElementaryTypeName","src":"9554:7:6","typeDescriptions":{}}},"id":1450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9554:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1451,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"9566:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1452,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"9570:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1453,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"9574:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1445,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"9529:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9529:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1455,"nodeType":"EmitStatement","src":"9524:57:6"},{"expression":{"arguments":[{"id":1457,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"9612:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9630:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9622:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1458,"name":"address","nodeType":"ElementaryTypeName","src":"9622:7:6","typeDescriptions":{}}},"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9622:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1462,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"9634:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1463,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"9638:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1464,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"9643:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1465,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"9652:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1456,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"9592:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9592:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1467,"nodeType":"ExpressionStatement","src":"9592:65:6"},{"expression":{"arguments":[{"id":1469,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"9699:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9717:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9709:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1470,"name":"address","nodeType":"ElementaryTypeName","src":"9709:7:6","typeDescriptions":{}}},"id":1473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9709:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1474,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"9721:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1475,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"9725:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1476,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"9729:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1477,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"9737:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1468,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"9668:30:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9668:74:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1479,"nodeType":"ExpressionStatement","src":"9668:74:6"}]},"documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"8673:362:6","text":" @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1481,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9049:5:6","nodeType":"FunctionDefinition","parameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"mutability":"mutable","name":"to","nameLocation":"9072:2:6","nodeType":"VariableDeclaration","scope":1481,"src":"9064:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"9064:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"id","nameLocation":"9092:2:6","nodeType":"VariableDeclaration","scope":1481,"src":"9084:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"9084:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"amount","nameLocation":"9112:6:6","nodeType":"VariableDeclaration","scope":1481,"src":"9104:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1386,"name":"uint256","nodeType":"ElementaryTypeName","src":"9104:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"data","nameLocation":"9141:4:6","nodeType":"VariableDeclaration","scope":1481,"src":"9128:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1388,"name":"bytes","nodeType":"ElementaryTypeName","src":"9128:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9054:97:6"},"returnParameters":{"id":1391,"nodeType":"ParameterList","parameters":[],"src":"9169:0:6"},"scope":2052,"src":"9040:709:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1591,"nodeType":"Block","src":"10293:637:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1496,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"10311:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10325:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10317:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1497,"name":"address","nodeType":"ElementaryTypeName","src":"10317:7:6","typeDescriptions":{}}},"id":1500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10317:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10311:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10329:35:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1495,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10303:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10303:62:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1504,"nodeType":"ExpressionStatement","src":"10303:62:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1506,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"10383:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10387:6:6","memberName":"length","nodeType":"MemberAccess","src":"10383:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1508,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"10397:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10405:6:6","memberName":"length","nodeType":"MemberAccess","src":"10397:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10383:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10413:42:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1505,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10375:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10375:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1513,"nodeType":"ExpressionStatement","src":"10375:81:6"},{"assignments":[1515],"declarations":[{"constant":false,"id":1515,"mutability":"mutable","name":"operator","nameLocation":"10475:8:6","nodeType":"VariableDeclaration","scope":1591,"src":"10467:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1514,"name":"address","nodeType":"ElementaryTypeName","src":"10467:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1518,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1516,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"10486:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10486:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10467:31:6"},{"expression":{"arguments":[{"id":1520,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"10530:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10548:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10540:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1521,"name":"address","nodeType":"ElementaryTypeName","src":"10540:7:6","typeDescriptions":{}}},"id":1524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10540:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1525,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"10552:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1526,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"10556:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1527,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"10561:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1528,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"10570:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1519,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"10509:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10509:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1530,"nodeType":"ExpressionStatement","src":"10509:66:6"},{"body":{"id":1554,"nodeType":"Block","src":"10627:60:6","statements":[{"expression":{"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1542,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"10641:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1547,"indexExpression":{"baseExpression":{"id":1543,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"10651:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1545,"indexExpression":{"id":1544,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"10655:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10651:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10641:17:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1548,"indexExpression":{"id":1546,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"10659:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10641:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":1549,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"10666:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1551,"indexExpression":{"id":1550,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"10674:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10666:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10641:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1553,"nodeType":"ExpressionStatement","src":"10641:35:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1535,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"10606:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1536,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"10610:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10614:6:6","memberName":"length","nodeType":"MemberAccess","src":"10610:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10606:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1555,"initializationExpression":{"assignments":[1532],"declarations":[{"constant":false,"id":1532,"mutability":"mutable","name":"i","nameLocation":"10599:1:6","nodeType":"VariableDeclaration","scope":1555,"src":"10591:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"10591:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1534,"initialValue":{"hexValue":"30","id":1533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10603:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10591:13:6"},"loopExpression":{"expression":{"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10622:3:6","subExpression":{"id":1539,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"10622:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1541,"nodeType":"ExpressionStatement","src":"10622:3:6"},"nodeType":"ForStatement","src":"10586:101:6"},{"eventCall":{"arguments":[{"id":1557,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"10716:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10734:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10726:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1558,"name":"address","nodeType":"ElementaryTypeName","src":"10726:7:6","typeDescriptions":{}}},"id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10726:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1562,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"10738:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1563,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"10742:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1564,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"10747:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1556,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"10702:13:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10702:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1566,"nodeType":"EmitStatement","src":"10697:58:6"},{"expression":{"arguments":[{"id":1568,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"10786:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10804:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10796:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1569,"name":"address","nodeType":"ElementaryTypeName","src":"10796:7:6","typeDescriptions":{}}},"id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10796:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1573,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"10808:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1574,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"10812:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1575,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"10817:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1576,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"10826:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1567,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"10766:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10766:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1578,"nodeType":"ExpressionStatement","src":"10766:65:6"},{"expression":{"arguments":[{"id":1580,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"10878:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10896:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10888:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1581,"name":"address","nodeType":"ElementaryTypeName","src":"10888:7:6","typeDescriptions":{}}},"id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10888:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1585,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"10900:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1586,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"10904:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1587,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"10909:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1588,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"10918:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1579,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"10842:35:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10842:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1590,"nodeType":"ExpressionStatement","src":"10842:81:6"}]},"documentation":{"id":1482,"nodeType":"StructuredDocumentation","src":"9755:379:6","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1592,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"10148:10:6","nodeType":"FunctionDefinition","parameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1484,"mutability":"mutable","name":"to","nameLocation":"10176:2:6","nodeType":"VariableDeclaration","scope":1592,"src":"10168:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1483,"name":"address","nodeType":"ElementaryTypeName","src":"10168:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1487,"mutability":"mutable","name":"ids","nameLocation":"10205:3:6","nodeType":"VariableDeclaration","scope":1592,"src":"10188:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1485,"name":"uint256","nodeType":"ElementaryTypeName","src":"10188:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1486,"nodeType":"ArrayTypeName","src":"10188:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1490,"mutability":"mutable","name":"amounts","nameLocation":"10235:7:6","nodeType":"VariableDeclaration","scope":1592,"src":"10218:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1488,"name":"uint256","nodeType":"ElementaryTypeName","src":"10218:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1489,"nodeType":"ArrayTypeName","src":"10218:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"data","nameLocation":"10265:4:6","nodeType":"VariableDeclaration","scope":1592,"src":"10252:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1491,"name":"bytes","nodeType":"ElementaryTypeName","src":"10252:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10158:117:6"},"returnParameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"10293:0:6"},"scope":2052,"src":"10139:791:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1696,"nodeType":"Block","src":"11320:682:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1603,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"11338:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11354:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11346:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1604,"name":"address","nodeType":"ElementaryTypeName","src":"11346:7:6","typeDescriptions":{}}},"id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11346:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11338:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11358:37:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1602,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11330:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11330:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1611,"nodeType":"ExpressionStatement","src":"11330:66:6"},{"assignments":[1613],"declarations":[{"constant":false,"id":1613,"mutability":"mutable","name":"operator","nameLocation":"11415:8:6","nodeType":"VariableDeclaration","scope":1696,"src":"11407:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1612,"name":"address","nodeType":"ElementaryTypeName","src":"11407:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1616,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1614,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"11426:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11426:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11407:31:6"},{"assignments":[1621],"declarations":[{"constant":false,"id":1621,"mutability":"mutable","name":"ids","nameLocation":"11465:3:6","nodeType":"VariableDeclaration","scope":1696,"src":"11448:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"11448:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1620,"nodeType":"ArrayTypeName","src":"11448:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1625,"initialValue":{"arguments":[{"id":1623,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"11489:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1622,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"11471:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11471:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11448:44:6"},{"assignments":[1630],"declarations":[{"constant":false,"id":1630,"mutability":"mutable","name":"amounts","nameLocation":"11519:7:6","nodeType":"VariableDeclaration","scope":1696,"src":"11502:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1628,"name":"uint256","nodeType":"ElementaryTypeName","src":"11502:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1629,"nodeType":"ArrayTypeName","src":"11502:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1634,"initialValue":{"arguments":[{"id":1632,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"11547:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1631,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"11529:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11529:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11502:52:6"},{"expression":{"arguments":[{"id":1636,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"11586:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1637,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"11596:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11610:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11602:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"11602:7:6","typeDescriptions":{}}},"id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11602:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1642,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"11614:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1643,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"11619:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11628:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1635,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"11565:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11565:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1646,"nodeType":"ExpressionStatement","src":"11565:66:6"},{"assignments":[1648],"declarations":[{"constant":false,"id":1648,"mutability":"mutable","name":"fromBalance","nameLocation":"11650:11:6","nodeType":"VariableDeclaration","scope":1696,"src":"11642:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1647,"name":"uint256","nodeType":"ElementaryTypeName","src":"11642:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1654,"initialValue":{"baseExpression":{"baseExpression":{"id":1649,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"11664:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1651,"indexExpression":{"id":1650,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"11674:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11664:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1653,"indexExpression":{"id":1652,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"11678:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11664:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11642:41:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1656,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"11701:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1657,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"11716:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11701:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11724:38:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1655,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11693:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11693:70:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1661,"nodeType":"ExpressionStatement","src":"11693:70:6"},{"id":1672,"nodeType":"UncheckedBlock","src":"11773:77:6","statements":[{"expression":{"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1662,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"11797:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1665,"indexExpression":{"id":1663,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"11807:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11797:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1666,"indexExpression":{"id":1664,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"11811:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11797:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1667,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"11819:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1668,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"11833:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11819:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11797:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1671,"nodeType":"ExpressionStatement","src":"11797:42:6"}]},{"eventCall":{"arguments":[{"id":1674,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"11880:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1675,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"11890:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11904:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11896:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1676,"name":"address","nodeType":"ElementaryTypeName","src":"11896:7:6","typeDescriptions":{}}},"id":1679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11896:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1680,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"11908:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1681,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"11912:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1673,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"11865:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11865:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1683,"nodeType":"EmitStatement","src":"11860:59:6"},{"expression":{"arguments":[{"id":1685,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"11950:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1686,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"11960:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11974:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11966:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"11966:7:6","typeDescriptions":{}}},"id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1691,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"11978:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1692,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"11983:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11992:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1684,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"11930:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11930:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1695,"nodeType":"ExpressionStatement","src":"11930:65:6"}]},"documentation":{"id":1593,"nodeType":"StructuredDocumentation","src":"10936:275:6","text":" @dev Destroys `amount` tokens of token type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens of token type `id`."},"id":1697,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11225:5:6","nodeType":"FunctionDefinition","parameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1595,"mutability":"mutable","name":"from","nameLocation":"11248:4:6","nodeType":"VariableDeclaration","scope":1697,"src":"11240:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1594,"name":"address","nodeType":"ElementaryTypeName","src":"11240:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1597,"mutability":"mutable","name":"id","nameLocation":"11270:2:6","nodeType":"VariableDeclaration","scope":1697,"src":"11262:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1596,"name":"uint256","nodeType":"ElementaryTypeName","src":"11262:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1599,"mutability":"mutable","name":"amount","nameLocation":"11290:6:6","nodeType":"VariableDeclaration","scope":1697,"src":"11282:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1598,"name":"uint256","nodeType":"ElementaryTypeName","src":"11282:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11230:72:6"},"returnParameters":{"id":1601,"nodeType":"ParameterList","parameters":[],"src":"11320:0:6"},"scope":2052,"src":"11216:786:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1819,"nodeType":"Block","src":"12370:814:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1710,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"12388:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12404:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12396:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1711,"name":"address","nodeType":"ElementaryTypeName","src":"12396:7:6","typeDescriptions":{}}},"id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12396:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12388:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12408:37:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1709,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12380:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1718,"nodeType":"ExpressionStatement","src":"12380:66:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1720,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"12464:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12468:6:6","memberName":"length","nodeType":"MemberAccess","src":"12464:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1722,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"12478:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12486:6:6","memberName":"length","nodeType":"MemberAccess","src":"12478:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12464:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12494:42:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1719,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12456:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12456:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1727,"nodeType":"ExpressionStatement","src":"12456:81:6"},{"assignments":[1729],"declarations":[{"constant":false,"id":1729,"mutability":"mutable","name":"operator","nameLocation":"12556:8:6","nodeType":"VariableDeclaration","scope":1819,"src":"12548:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1728,"name":"address","nodeType":"ElementaryTypeName","src":"12548:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1732,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1730,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"12567:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12567:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12548:31:6"},{"expression":{"arguments":[{"id":1734,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12611:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1735,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"12621:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12635:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12627:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1736,"name":"address","nodeType":"ElementaryTypeName","src":"12627:7:6","typeDescriptions":{}}},"id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12627:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1740,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"12639:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1741,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"12644:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12653:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1733,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"12590:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12590:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1744,"nodeType":"ExpressionStatement","src":"12590:66:6"},{"body":{"id":1794,"nodeType":"Block","src":"12708:323:6","statements":[{"assignments":[1757],"declarations":[{"constant":false,"id":1757,"mutability":"mutable","name":"id","nameLocation":"12730:2:6","nodeType":"VariableDeclaration","scope":1794,"src":"12722:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1756,"name":"uint256","nodeType":"ElementaryTypeName","src":"12722:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1761,"initialValue":{"baseExpression":{"id":1758,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"12735:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1760,"indexExpression":{"id":1759,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"12739:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12735:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12722:19:6"},{"assignments":[1763],"declarations":[{"constant":false,"id":1763,"mutability":"mutable","name":"amount","nameLocation":"12763:6:6","nodeType":"VariableDeclaration","scope":1794,"src":"12755:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"12755:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1767,"initialValue":{"baseExpression":{"id":1764,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"12772:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1766,"indexExpression":{"id":1765,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"12780:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12772:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12755:27:6"},{"assignments":[1769],"declarations":[{"constant":false,"id":1769,"mutability":"mutable","name":"fromBalance","nameLocation":"12805:11:6","nodeType":"VariableDeclaration","scope":1794,"src":"12797:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"12797:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1775,"initialValue":{"baseExpression":{"baseExpression":{"id":1770,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"12819:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1772,"indexExpression":{"id":1771,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"12829:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12819:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1774,"indexExpression":{"id":1773,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"12833:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12819:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12797:41:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1777,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"12860:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1778,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"12875:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12860:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12883:38:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1776,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12852:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12852:70:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1782,"nodeType":"ExpressionStatement","src":"12852:70:6"},{"id":1793,"nodeType":"UncheckedBlock","src":"12936:85:6","statements":[{"expression":{"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1783,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"12964:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1786,"indexExpression":{"id":1784,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"12974:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12964:13:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1787,"indexExpression":{"id":1785,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"12978:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12964:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1788,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"12986:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1789,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"13000:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12986:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12964:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1792,"nodeType":"ExpressionStatement","src":"12964:42:6"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1749,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"12687:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1750,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"12691:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12695:6:6","memberName":"length","nodeType":"MemberAccess","src":"12691:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12687:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1795,"initializationExpression":{"assignments":[1746],"declarations":[{"constant":false,"id":1746,"mutability":"mutable","name":"i","nameLocation":"12680:1:6","nodeType":"VariableDeclaration","scope":1795,"src":"12672:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"12672:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1748,"initialValue":{"hexValue":"30","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12684:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12672:13:6"},"loopExpression":{"expression":{"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12703:3:6","subExpression":{"id":1753,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"12703:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1755,"nodeType":"ExpressionStatement","src":"12703:3:6"},"nodeType":"ForStatement","src":"12667:364:6"},{"eventCall":{"arguments":[{"id":1797,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"13060:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1798,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"13070:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13084:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13076:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1799,"name":"address","nodeType":"ElementaryTypeName","src":"13076:7:6","typeDescriptions":{}}},"id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13076:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1803,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"13088:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1804,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"13093:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1796,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"13046:13:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13046:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1806,"nodeType":"EmitStatement","src":"13041:60:6"},{"expression":{"arguments":[{"id":1808,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"13132:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1809,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"13142:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13156:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13148:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1810,"name":"address","nodeType":"ElementaryTypeName","src":"13148:7:6","typeDescriptions":{}}},"id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13148:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1814,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"13160:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1815,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"13165:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13174:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1807,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"13112:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13112:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1818,"nodeType":"ExpressionStatement","src":"13112:65:6"}]},"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"12008:228:6","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length."},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"12250:10:6","nodeType":"FunctionDefinition","parameters":{"id":1707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"from","nameLocation":"12278:4:6","nodeType":"VariableDeclaration","scope":1820,"src":"12270:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"12270:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1703,"mutability":"mutable","name":"ids","nameLocation":"12309:3:6","nodeType":"VariableDeclaration","scope":1820,"src":"12292:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1701,"name":"uint256","nodeType":"ElementaryTypeName","src":"12292:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1702,"nodeType":"ArrayTypeName","src":"12292:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1706,"mutability":"mutable","name":"amounts","nameLocation":"12339:7:6","nodeType":"VariableDeclaration","scope":1820,"src":"12322:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1704,"name":"uint256","nodeType":"ElementaryTypeName","src":"12322:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1705,"nodeType":"ArrayTypeName","src":"12322:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12260:92:6"},"returnParameters":{"id":1708,"nodeType":"ParameterList","parameters":[],"src":"12370:0:6"},"scope":2052,"src":"12241:943:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1851,"nodeType":"Block","src":"13443:200:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1831,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"13461:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1832,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"13470:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13461:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":1834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13480:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":1830,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13453:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13453:71:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1836,"nodeType":"ExpressionStatement","src":"13453:71:6"},{"expression":{"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1837,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"13534:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1840,"indexExpression":{"id":1838,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"13553:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13534:25:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1841,"indexExpression":{"id":1839,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"13560:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13534:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1842,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"13572:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13534:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1844,"nodeType":"ExpressionStatement","src":"13534:46:6"},{"eventCall":{"arguments":[{"id":1846,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"13610:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1847,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"13617:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1848,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"13627:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1845,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"13595:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13595:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1850,"nodeType":"EmitStatement","src":"13590:46:6"}]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"13190:125:6","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1852,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13329:18:6","nodeType":"FunctionDefinition","parameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"owner","nameLocation":"13365:5:6","nodeType":"VariableDeclaration","scope":1852,"src":"13357:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"13357:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"operator","nameLocation":"13388:8:6","nodeType":"VariableDeclaration","scope":1852,"src":"13380:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1824,"name":"address","nodeType":"ElementaryTypeName","src":"13380:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"approved","nameLocation":"13411:8:6","nodeType":"VariableDeclaration","scope":1852,"src":"13406:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1826,"name":"bool","nodeType":"ElementaryTypeName","src":"13406:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13347:78:6"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[],"src":"13443:0:6"},"scope":2052,"src":"13320:323:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1870,"nodeType":"Block","src":"14791:2:6","statements":[]},"documentation":{"id":1853,"nodeType":"StructuredDocumentation","src":"13649:925:6","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `ids` and `amounts` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1871,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14588:20:6","nodeType":"FunctionDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"operator","nameLocation":"14626:8:6","nodeType":"VariableDeclaration","scope":1871,"src":"14618:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1854,"name":"address","nodeType":"ElementaryTypeName","src":"14618:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1857,"mutability":"mutable","name":"from","nameLocation":"14652:4:6","nodeType":"VariableDeclaration","scope":1871,"src":"14644:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1856,"name":"address","nodeType":"ElementaryTypeName","src":"14644:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1859,"mutability":"mutable","name":"to","nameLocation":"14674:2:6","nodeType":"VariableDeclaration","scope":1871,"src":"14666:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1858,"name":"address","nodeType":"ElementaryTypeName","src":"14666:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"ids","nameLocation":"14703:3:6","nodeType":"VariableDeclaration","scope":1871,"src":"14686:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"14686:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1861,"nodeType":"ArrayTypeName","src":"14686:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"amounts","nameLocation":"14733:7:6","nodeType":"VariableDeclaration","scope":1871,"src":"14716:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"14716:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1864,"nodeType":"ArrayTypeName","src":"14716:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"data","nameLocation":"14763:4:6","nodeType":"VariableDeclaration","scope":1871,"src":"14750:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1866,"name":"bytes","nodeType":"ElementaryTypeName","src":"14750:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14608:165:6"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[],"src":"14791:0:6"},"scope":2052,"src":"14579:214:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1889,"nodeType":"Block","src":"15937:2:6","statements":[]},"documentation":{"id":1872,"nodeType":"StructuredDocumentation","src":"14799:922:6","text":" @dev Hook that is called after any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `id` and `amount` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1890,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15735:19:6","nodeType":"FunctionDefinition","parameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1874,"mutability":"mutable","name":"operator","nameLocation":"15772:8:6","nodeType":"VariableDeclaration","scope":1890,"src":"15764:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1873,"name":"address","nodeType":"ElementaryTypeName","src":"15764:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"from","nameLocation":"15798:4:6","nodeType":"VariableDeclaration","scope":1890,"src":"15790:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1875,"name":"address","nodeType":"ElementaryTypeName","src":"15790:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"to","nameLocation":"15820:2:6","nodeType":"VariableDeclaration","scope":1890,"src":"15812:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1877,"name":"address","nodeType":"ElementaryTypeName","src":"15812:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1881,"mutability":"mutable","name":"ids","nameLocation":"15849:3:6","nodeType":"VariableDeclaration","scope":1890,"src":"15832:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"15832:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1880,"nodeType":"ArrayTypeName","src":"15832:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1884,"mutability":"mutable","name":"amounts","nameLocation":"15879:7:6","nodeType":"VariableDeclaration","scope":1890,"src":"15862:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1882,"name":"uint256","nodeType":"ElementaryTypeName","src":"15862:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1883,"nodeType":"ArrayTypeName","src":"15862:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"data","nameLocation":"15909:4:6","nodeType":"VariableDeclaration","scope":1890,"src":"15896:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1885,"name":"bytes","nodeType":"ElementaryTypeName","src":"15896:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15754:165:6"},"returnParameters":{"id":1888,"nodeType":"ParameterList","parameters":[],"src":"15937:0:6"},"scope":2052,"src":"15726:213:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1952,"nodeType":"Block","src":"16138:554:6","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1905,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"16152:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16155:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"16152:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16152:15:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1951,"nodeType":"IfStatement","src":"16148:538:6","trueBody":{"id":1950,"nodeType":"Block","src":"16169:517:6","statements":[{"clauses":[{"block":{"id":1932,"nodeType":"Block","src":"16297:195:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"16319:8:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1922,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"16331:27:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16359:17:6","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2074,"src":"16331:45:6","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16377:8:6","memberName":"selector","nodeType":"MemberAccess","src":"16331:54:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16319:66:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1931,"nodeType":"IfStatement","src":"16315:163:6","trueBody":{"id":1930,"nodeType":"Block","src":"16387:91:6","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16416:42:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1926,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16409:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16409:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1929,"nodeType":"ExpressionStatement","src":"16409:50:6"}]}}]},"errorName":"","id":1933,"nodeType":"TryCatchClause","parameters":{"id":1920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1919,"mutability":"mutable","name":"response","nameLocation":"16287:8:6","nodeType":"VariableDeclaration","scope":1933,"src":"16280:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1918,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16280:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16279:17:6"},"src":"16271:221:6"},{"block":{"id":1941,"nodeType":"Block","src":"16527:47:6","statements":[{"expression":{"arguments":[{"id":1938,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"16552:6:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1937,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16545:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16545:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1940,"nodeType":"ExpressionStatement","src":"16545:14:6"}]},"errorName":"Error","id":1942,"nodeType":"TryCatchClause","parameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"reason","nameLocation":"16519:6:6","nodeType":"VariableDeclaration","scope":1942,"src":"16505:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1934,"name":"string","nodeType":"ElementaryTypeName","src":"16505:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16504:22:6"},"src":"16493:81:6"},{"block":{"id":1947,"nodeType":"Block","src":"16581:95:6","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572","id":1944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16606:54:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""}],"id":1943,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16599:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16599:62:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1946,"nodeType":"ExpressionStatement","src":"16599:62:6"}]},"errorName":"","id":1948,"nodeType":"TryCatchClause","src":"16575:101:6"}],"externalCall":{"arguments":[{"id":1912,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"16237:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1913,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"16247:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1914,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"16253:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1915,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"16257:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1916,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"16265:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1909,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"16215:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1908,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"16187:27:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16187:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$2093","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16219:17:6","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2074,"src":"16187:49:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16187:83:6","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1949,"nodeType":"TryStatement","src":"16183:493:6"}]}}]},"id":1953,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15954:30:6","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"operator","nameLocation":"16002:8:6","nodeType":"VariableDeclaration","scope":1953,"src":"15994:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1891,"name":"address","nodeType":"ElementaryTypeName","src":"15994:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1894,"mutability":"mutable","name":"from","nameLocation":"16028:4:6","nodeType":"VariableDeclaration","scope":1953,"src":"16020:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1893,"name":"address","nodeType":"ElementaryTypeName","src":"16020:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1896,"mutability":"mutable","name":"to","nameLocation":"16050:2:6","nodeType":"VariableDeclaration","scope":1953,"src":"16042:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1895,"name":"address","nodeType":"ElementaryTypeName","src":"16042:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"id","nameLocation":"16070:2:6","nodeType":"VariableDeclaration","scope":1953,"src":"16062:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1897,"name":"uint256","nodeType":"ElementaryTypeName","src":"16062:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1900,"mutability":"mutable","name":"amount","nameLocation":"16090:6:6","nodeType":"VariableDeclaration","scope":1953,"src":"16082:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1899,"name":"uint256","nodeType":"ElementaryTypeName","src":"16082:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1902,"mutability":"mutable","name":"data","nameLocation":"16119:4:6","nodeType":"VariableDeclaration","scope":1953,"src":"16106:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1901,"name":"bytes","nodeType":"ElementaryTypeName","src":"16106:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15984:145:6"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[],"src":"16138:0:6"},"scope":2052,"src":"15945:747:6","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2017,"nodeType":"Block","src":"16916:596:6","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1970,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"16930:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16933:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"16930:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16930:15:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2016,"nodeType":"IfStatement","src":"16926:580:6","trueBody":{"id":2015,"nodeType":"Block","src":"16947:559:6","statements":[{"clauses":[{"block":{"id":1997,"nodeType":"Block","src":"17112:200:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1986,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"17134:8:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1987,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"17146:27:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17174:22:6","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"17146:50:6","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17197:8:6","memberName":"selector","nodeType":"MemberAccess","src":"17146:59:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17134:71:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1996,"nodeType":"IfStatement","src":"17130:168:6","trueBody":{"id":1995,"nodeType":"Block","src":"17207:91:6","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17236:42:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1991,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17229:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17229:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1994,"nodeType":"ExpressionStatement","src":"17229:50:6"}]}}]},"errorName":"","id":1998,"nodeType":"TryCatchClause","parameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"response","nameLocation":"17089:8:6","nodeType":"VariableDeclaration","scope":1998,"src":"17082:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1983,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17082:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17064:47:6"},"src":"17056:256:6"},{"block":{"id":2006,"nodeType":"Block","src":"17347:47:6","statements":[{"expression":{"arguments":[{"id":2003,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"17372:6:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2002,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17365:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17365:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2005,"nodeType":"ExpressionStatement","src":"17365:14:6"}]},"errorName":"Error","id":2007,"nodeType":"TryCatchClause","parameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"reason","nameLocation":"17339:6:6","nodeType":"VariableDeclaration","scope":2007,"src":"17325:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1999,"name":"string","nodeType":"ElementaryTypeName","src":"17325:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17324:22:6"},"src":"17313:81:6"},{"block":{"id":2012,"nodeType":"Block","src":"17401:95:6","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17426:54:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""}],"id":2008,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17419:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17419:62:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2011,"nodeType":"ExpressionStatement","src":"17419:62:6"}]},"errorName":"","id":2013,"nodeType":"TryCatchClause","src":"17395:101:6"}],"externalCall":{"arguments":[{"id":1977,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"17020:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1978,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"17030:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1979,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"17036:3:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1980,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"17041:7:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1981,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"17050:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1974,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"16993:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1973,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"16965:27:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16965:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$2093","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16997:22:6","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"16965:54:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16965:90:6","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2014,"nodeType":"TryStatement","src":"16961:535:6"}]}}]},"id":2018,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"16707:35:6","nodeType":"FunctionDefinition","parameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"operator","nameLocation":"16760:8:6","nodeType":"VariableDeclaration","scope":2018,"src":"16752:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1954,"name":"address","nodeType":"ElementaryTypeName","src":"16752:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"from","nameLocation":"16786:4:6","nodeType":"VariableDeclaration","scope":2018,"src":"16778:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1956,"name":"address","nodeType":"ElementaryTypeName","src":"16778:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1959,"mutability":"mutable","name":"to","nameLocation":"16808:2:6","nodeType":"VariableDeclaration","scope":2018,"src":"16800:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1958,"name":"address","nodeType":"ElementaryTypeName","src":"16800:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1962,"mutability":"mutable","name":"ids","nameLocation":"16837:3:6","nodeType":"VariableDeclaration","scope":2018,"src":"16820:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"16820:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1961,"nodeType":"ArrayTypeName","src":"16820:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"amounts","nameLocation":"16867:7:6","nodeType":"VariableDeclaration","scope":2018,"src":"16850:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1963,"name":"uint256","nodeType":"ElementaryTypeName","src":"16850:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1964,"nodeType":"ArrayTypeName","src":"16850:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1967,"mutability":"mutable","name":"data","nameLocation":"16897:4:6","nodeType":"VariableDeclaration","scope":2018,"src":"16884:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1966,"name":"bytes","nodeType":"ElementaryTypeName","src":"16884:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16742:165:6"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[],"src":"16916:0:6"},"scope":2052,"src":"16698:814:6","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2045,"nodeType":"Block","src":"17602:109:6","statements":[{"assignments":[2030],"declarations":[{"constant":false,"id":2030,"mutability":"mutable","name":"array","nameLocation":"17629:5:6","nodeType":"VariableDeclaration","scope":2045,"src":"17612:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"17612:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2029,"nodeType":"ArrayTypeName","src":"17612:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2036,"initialValue":{"arguments":[{"hexValue":"31","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17651:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17637:13:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"17641:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2032,"nodeType":"ArrayTypeName","src":"17641:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17637:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17612:41:6"},{"expression":{"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2037,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"17663:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2039,"indexExpression":{"hexValue":"30","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17669:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17663:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2040,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"17674:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17663:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2042,"nodeType":"ExpressionStatement","src":"17663:18:6"},{"expression":{"id":2043,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"17699:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":2025,"id":2044,"nodeType":"Return","src":"17692:12:6"}]},"id":2046,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArray","nameLocation":"17527:17:6","nodeType":"FunctionDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"element","nameLocation":"17553:7:6","nodeType":"VariableDeclaration","scope":2046,"src":"17545:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"17545:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17544:17:6"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2046,"src":"17584:16:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"17584:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2023,"nodeType":"ArrayTypeName","src":"17584:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17583:18:6"},"scope":2052,"src":"17518:193:6","stateMutability":"pure","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"17717:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2051,"mutability":"mutable","name":"__gap","nameLocation":"17996:5:6","nodeType":"VariableDeclaration","scope":2052,"src":"17976:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage","typeString":"uint256[47]"},"typeName":{"baseType":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"17976:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2050,"length":{"hexValue":"3437","id":2049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17984:2:6","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"nodeType":"ArrayTypeName","src":"17976:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage_ptr","typeString":"uint256[47]"}},"visibility":"private"}],"scope":2053,"src":"682:17322:6","usedErrors":[]}],"src":"109:17896:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","exportedSymbols":{"IERC1155ReceiverUpgradeable":[2093],"IERC165Upgradeable":[3034]},"id":2094,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2054,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../../utils/introspection/IERC165Upgradeable.sol","id":2055,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2094,"sourceUnit":3035,"src":"143:58:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2057,"name":"IERC165Upgradeable","nameLocations":["284:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"284:18:7"},"id":2058,"nodeType":"InheritanceSpecifier","src":"284:18:7"}],"canonicalName":"IERC1155ReceiverUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2056,"nodeType":"StructuredDocumentation","src":"203:39:7","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":2093,"linearizedBaseContracts":[2093,3034],"name":"IERC1155ReceiverUpgradeable","nameLocation":"253:27:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"309:826:7","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":2074,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1149:17:7","nodeType":"FunctionDefinition","parameters":{"id":2070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"operator","nameLocation":"1184:8:7","nodeType":"VariableDeclaration","scope":2074,"src":"1176:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2060,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2063,"mutability":"mutable","name":"from","nameLocation":"1210:4:7","nodeType":"VariableDeclaration","scope":2074,"src":"1202:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2062,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"id","nameLocation":"1232:2:7","nodeType":"VariableDeclaration","scope":2074,"src":"1224:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2064,"name":"uint256","nodeType":"ElementaryTypeName","src":"1224:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2067,"mutability":"mutable","name":"value","nameLocation":"1252:5:7","nodeType":"VariableDeclaration","scope":2074,"src":"1244:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"1244:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2069,"mutability":"mutable","name":"data","nameLocation":"1282:4:7","nodeType":"VariableDeclaration","scope":2074,"src":"1267:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2068,"name":"bytes","nodeType":"ElementaryTypeName","src":"1267:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1166:126:7"},"returnParameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2074,"src":"1311:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2071,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1311:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1310:8:7"},"scope":2093,"src":"1140:179:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2075,"nodeType":"StructuredDocumentation","src":"1325:994:7","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":2092,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2333:22:7","nodeType":"FunctionDefinition","parameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2077,"mutability":"mutable","name":"operator","nameLocation":"2373:8:7","nodeType":"VariableDeclaration","scope":2092,"src":"2365:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2076,"name":"address","nodeType":"ElementaryTypeName","src":"2365:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2079,"mutability":"mutable","name":"from","nameLocation":"2399:4:7","nodeType":"VariableDeclaration","scope":2092,"src":"2391:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"ids","nameLocation":"2432:3:7","nodeType":"VariableDeclaration","scope":2092,"src":"2413:22:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2080,"name":"uint256","nodeType":"ElementaryTypeName","src":"2413:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2081,"nodeType":"ArrayTypeName","src":"2413:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"values","nameLocation":"2464:6:7","nodeType":"VariableDeclaration","scope":2092,"src":"2445:25:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2083,"name":"uint256","nodeType":"ElementaryTypeName","src":"2445:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2084,"nodeType":"ArrayTypeName","src":"2445:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2087,"mutability":"mutable","name":"data","nameLocation":"2495:4:7","nodeType":"VariableDeclaration","scope":2092,"src":"2480:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2086,"name":"bytes","nodeType":"ElementaryTypeName","src":"2480:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2355:150:7"},"returnParameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2092,"src":"2524:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2089,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2524:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2523:8:7"},"scope":2093,"src":"2324:208:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2094,"src":"243:2291:7","usedErrors":[]}],"src":"118:2417:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","exportedSymbols":{"IERC1155Upgradeable":[2215],"IERC165Upgradeable":[3034]},"id":2216,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2095,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../../utils/introspection/IERC165Upgradeable.sol","id":2096,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2216,"sourceUnit":3035,"src":"135:58:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2098,"name":"IERC165Upgradeable","nameLocations":["394:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"394:18:8"},"id":2099,"nodeType":"InheritanceSpecifier","src":"394:18:8"}],"canonicalName":"IERC1155Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2097,"nodeType":"StructuredDocumentation","src":"195:165:8","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":2215,"linearizedBaseContracts":[2215,3034],"name":"IERC1155Upgradeable","nameLocation":"371:19:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2100,"nodeType":"StructuredDocumentation","src":"419:121:8","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":2112,"name":"TransferSingle","nameLocation":"551:14:8","nodeType":"EventDefinition","parameters":{"id":2111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"582:8:8","nodeType":"VariableDeclaration","scope":2112,"src":"566:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2101,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2104,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"608:4:8","nodeType":"VariableDeclaration","scope":2112,"src":"592:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2103,"name":"address","nodeType":"ElementaryTypeName","src":"592:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2106,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"630:2:8","nodeType":"VariableDeclaration","scope":2112,"src":"614:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2105,"name":"address","nodeType":"ElementaryTypeName","src":"614:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2108,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"642:2:8","nodeType":"VariableDeclaration","scope":2112,"src":"634:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"634:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2110,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"654:5:8","nodeType":"VariableDeclaration","scope":2112,"src":"646:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"565:95:8"},"src":"545:116:8"},{"anonymous":false,"documentation":{"id":2113,"nodeType":"StructuredDocumentation","src":"667:144:8","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":2127,"name":"TransferBatch","nameLocation":"822:13:8","nodeType":"EventDefinition","parameters":{"id":2126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"861:8:8","nodeType":"VariableDeclaration","scope":2127,"src":"845:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2114,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2117,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"895:4:8","nodeType":"VariableDeclaration","scope":2127,"src":"879:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2116,"name":"address","nodeType":"ElementaryTypeName","src":"879:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2119,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"925:2:8","nodeType":"VariableDeclaration","scope":2127,"src":"909:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2118,"name":"address","nodeType":"ElementaryTypeName","src":"909:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2122,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"947:3:8","nodeType":"VariableDeclaration","scope":2127,"src":"937:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2120,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2121,"nodeType":"ArrayTypeName","src":"937:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2125,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"970:6:8","nodeType":"VariableDeclaration","scope":2127,"src":"960:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2124,"nodeType":"ArrayTypeName","src":"960:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"835:147:8"},"src":"816:167:8"},{"anonymous":false,"documentation":{"id":2128,"nodeType":"StructuredDocumentation","src":"989:147:8","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2136,"name":"ApprovalForAll","nameLocation":"1147:14:8","nodeType":"EventDefinition","parameters":{"id":2135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1178:7:8","nodeType":"VariableDeclaration","scope":2136,"src":"1162:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2129,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2132,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1203:8:8","nodeType":"VariableDeclaration","scope":2136,"src":"1187:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2131,"name":"address","nodeType":"ElementaryTypeName","src":"1187:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2134,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1218:8:8","nodeType":"VariableDeclaration","scope":2136,"src":"1213:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2133,"name":"bool","nodeType":"ElementaryTypeName","src":"1213:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1161:66:8"},"src":"1141:87:8"},{"anonymous":false,"documentation":{"id":2137,"nodeType":"StructuredDocumentation","src":"1234:343:8","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":2143,"name":"URI","nameLocation":"1588:3:8","nodeType":"EventDefinition","parameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2139,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1599:5:8","nodeType":"VariableDeclaration","scope":2143,"src":"1592:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2138,"name":"string","nodeType":"ElementaryTypeName","src":"1592:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2141,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1622:2:8","nodeType":"VariableDeclaration","scope":2143,"src":"1606:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2140,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1591:34:8"},"src":"1582:44:8"},{"documentation":{"id":2144,"nodeType":"StructuredDocumentation","src":"1632:173:8","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":2153,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1819:9:8","nodeType":"FunctionDefinition","parameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2146,"mutability":"mutable","name":"account","nameLocation":"1837:7:8","nodeType":"VariableDeclaration","scope":2153,"src":"1829:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2145,"name":"address","nodeType":"ElementaryTypeName","src":"1829:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2148,"mutability":"mutable","name":"id","nameLocation":"1854:2:8","nodeType":"VariableDeclaration","scope":2153,"src":"1846:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2147,"name":"uint256","nodeType":"ElementaryTypeName","src":"1846:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1828:29:8"},"returnParameters":{"id":2152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2153,"src":"1881:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2150,"name":"uint256","nodeType":"ElementaryTypeName","src":"1881:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1880:9:8"},"scope":2215,"src":"1810:80:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2154,"nodeType":"StructuredDocumentation","src":"1896:188:8","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":2166,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2098:14:8","nodeType":"FunctionDefinition","parameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"accounts","nameLocation":"2132:8:8","nodeType":"VariableDeclaration","scope":2166,"src":"2113:27:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2155,"name":"address","nodeType":"ElementaryTypeName","src":"2113:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2156,"nodeType":"ArrayTypeName","src":"2113:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2160,"mutability":"mutable","name":"ids","nameLocation":"2161:3:8","nodeType":"VariableDeclaration","scope":2166,"src":"2142:22:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"2142:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2159,"nodeType":"ArrayTypeName","src":"2142:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2112:53:8"},"returnParameters":{"id":2165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2166,"src":"2213:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2162,"name":"uint256","nodeType":"ElementaryTypeName","src":"2213:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2163,"nodeType":"ArrayTypeName","src":"2213:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2212:18:8"},"scope":2215,"src":"2089:142:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2167,"nodeType":"StructuredDocumentation","src":"2237:248:8","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":2174,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2499:17:8","nodeType":"FunctionDefinition","parameters":{"id":2172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2169,"mutability":"mutable","name":"operator","nameLocation":"2525:8:8","nodeType":"VariableDeclaration","scope":2174,"src":"2517:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2168,"name":"address","nodeType":"ElementaryTypeName","src":"2517:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2171,"mutability":"mutable","name":"approved","nameLocation":"2540:8:8","nodeType":"VariableDeclaration","scope":2174,"src":"2535:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2170,"name":"bool","nodeType":"ElementaryTypeName","src":"2535:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2516:33:8"},"returnParameters":{"id":2173,"nodeType":"ParameterList","parameters":[],"src":"2558:0:8"},"scope":2215,"src":"2490:69:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2175,"nodeType":"StructuredDocumentation","src":"2565:135:8","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":2184,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2714:16:8","nodeType":"FunctionDefinition","parameters":{"id":2180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"mutability":"mutable","name":"account","nameLocation":"2739:7:8","nodeType":"VariableDeclaration","scope":2184,"src":"2731:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2176,"name":"address","nodeType":"ElementaryTypeName","src":"2731:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2179,"mutability":"mutable","name":"operator","nameLocation":"2756:8:8","nodeType":"VariableDeclaration","scope":2184,"src":"2748:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2178,"name":"address","nodeType":"ElementaryTypeName","src":"2748:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2730:35:8"},"returnParameters":{"id":2183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2184,"src":"2789:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2181,"name":"bool","nodeType":"ElementaryTypeName","src":"2789:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2788:6:8"},"scope":2215,"src":"2705:90:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2185,"nodeType":"StructuredDocumentation","src":"2801:556:8","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":2198,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3371:16:8","nodeType":"FunctionDefinition","parameters":{"id":2196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2187,"mutability":"mutable","name":"from","nameLocation":"3405:4:8","nodeType":"VariableDeclaration","scope":2198,"src":"3397:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2186,"name":"address","nodeType":"ElementaryTypeName","src":"3397:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2189,"mutability":"mutable","name":"to","nameLocation":"3427:2:8","nodeType":"VariableDeclaration","scope":2198,"src":"3419:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2188,"name":"address","nodeType":"ElementaryTypeName","src":"3419:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2191,"mutability":"mutable","name":"id","nameLocation":"3447:2:8","nodeType":"VariableDeclaration","scope":2198,"src":"3439:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"3439:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2193,"mutability":"mutable","name":"amount","nameLocation":"3467:6:8","nodeType":"VariableDeclaration","scope":2198,"src":"3459:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2192,"name":"uint256","nodeType":"ElementaryTypeName","src":"3459:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2195,"mutability":"mutable","name":"data","nameLocation":"3498:4:8","nodeType":"VariableDeclaration","scope":2198,"src":"3483:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2194,"name":"bytes","nodeType":"ElementaryTypeName","src":"3483:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3387:121:8"},"returnParameters":{"id":2197,"nodeType":"ParameterList","parameters":[],"src":"3517:0:8"},"scope":2215,"src":"3362:156:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2199,"nodeType":"StructuredDocumentation","src":"3524:390:8","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":2214,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3928:21:8","nodeType":"FunctionDefinition","parameters":{"id":2212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"from","nameLocation":"3967:4:8","nodeType":"VariableDeclaration","scope":2214,"src":"3959:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"3959:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2203,"mutability":"mutable","name":"to","nameLocation":"3989:2:8","nodeType":"VariableDeclaration","scope":2214,"src":"3981:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2206,"mutability":"mutable","name":"ids","nameLocation":"4020:3:8","nodeType":"VariableDeclaration","scope":2214,"src":"4001:22:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2204,"name":"uint256","nodeType":"ElementaryTypeName","src":"4001:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2205,"nodeType":"ArrayTypeName","src":"4001:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2209,"mutability":"mutable","name":"amounts","nameLocation":"4052:7:8","nodeType":"VariableDeclaration","scope":2214,"src":"4033:26:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2207,"name":"uint256","nodeType":"ElementaryTypeName","src":"4033:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2208,"nodeType":"ArrayTypeName","src":"4033:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"data","nameLocation":"4084:4:8","nodeType":"VariableDeclaration","scope":2214,"src":"4069:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2210,"name":"bytes","nodeType":"ElementaryTypeName","src":"4069:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3949:145:8"},"returnParameters":{"id":2213,"nodeType":"ParameterList","parameters":[],"src":"4103:0:8"},"scope":2215,"src":"3919:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2216,"src":"361:3745:8","usedErrors":[]}],"src":"110:3997:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ContextUpgradeable":[2692],"ERC1155SupplyUpgradeable":[2392],"ERC1155Upgradeable":[2052],"ERC165Upgradeable":[3022],"IERC1155MetadataURIUpgradeable":[2407],"IERC1155ReceiverUpgradeable":[2093],"IERC1155Upgradeable":[2215],"IERC165Upgradeable":[3034],"Initializable":[671]},"id":2393,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2217,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"126:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","file":"../ERC1155Upgradeable.sol","id":2218,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2393,"sourceUnit":2053,"src":"151:35:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":2219,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2393,"sourceUnit":672,"src":"187:48:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2221,"name":"Initializable","nameLocations":["628:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"628:13:9"},"id":2222,"nodeType":"InheritanceSpecifier","src":"628:13:9"},{"baseName":{"id":2223,"name":"ERC1155Upgradeable","nameLocations":["643:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":2052,"src":"643:18:9"},"id":2224,"nodeType":"InheritanceSpecifier","src":"643:18:9"}],"canonicalName":"ERC1155SupplyUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2220,"nodeType":"StructuredDocumentation","src":"237:344:9","text":" @dev Extension of ERC1155 that adds tracking of total supply per id.\n Useful for scenarios where Fungible and Non-fungible tokens have to be\n clearly identified. Note: While a totalSupply of 1 might mean the\n corresponding is an NFT, there is no guarantees that no other token with the\n same id are not going to be minted."},"fullyImplemented":true,"id":2392,"linearizedBaseContracts":[2392,2052,2407,2215,3022,3034,2692,671],"name":"ERC1155SupplyUpgradeable","nameLocation":"600:24:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":2229,"nodeType":"Block","src":"726:7:9","statements":[]},"id":2230,"implemented":true,"kind":"function","modifiers":[{"id":2227,"kind":"modifierInvocation","modifierName":{"id":2226,"name":"onlyInitializing","nameLocations":["709:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"709:16:9"},"nodeType":"ModifierInvocation","src":"709:16:9"}],"name":"__ERC1155Supply_init","nameLocation":"677:20:9","nodeType":"FunctionDefinition","parameters":{"id":2225,"nodeType":"ParameterList","parameters":[],"src":"697:2:9"},"returnParameters":{"id":2228,"nodeType":"ParameterList","parameters":[],"src":"726:0:9"},"scope":2392,"src":"668:65:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2235,"nodeType":"Block","src":"807:7:9","statements":[]},"id":2236,"implemented":true,"kind":"function","modifiers":[{"id":2233,"kind":"modifierInvocation","modifierName":{"id":2232,"name":"onlyInitializing","nameLocations":["790:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"790:16:9"},"nodeType":"ModifierInvocation","src":"790:16:9"}],"name":"__ERC1155Supply_init_unchained","nameLocation":"748:30:9","nodeType":"FunctionDefinition","parameters":{"id":2231,"nodeType":"ParameterList","parameters":[],"src":"778:2:9"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[],"src":"807:0:9"},"scope":2392,"src":"739:75:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":2240,"mutability":"mutable","name":"_totalSupply","nameLocation":"855:12:9","nodeType":"VariableDeclaration","scope":2392,"src":"819:48:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2239,"keyType":{"id":2237,"name":"uint256","nodeType":"ElementaryTypeName","src":"827:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"819:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2238,"name":"uint256","nodeType":"ElementaryTypeName","src":"838:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":2252,"nodeType":"Block","src":"1016:40:9","statements":[{"expression":{"baseExpression":{"id":2248,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"1033:12:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2250,"indexExpression":{"id":2249,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1046:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1033:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2247,"id":2251,"nodeType":"Return","src":"1026:23:9"}]},"documentation":{"id":2241,"nodeType":"StructuredDocumentation","src":"874:66:9","text":" @dev Total amount of tokens in with a given id."},"functionSelector":"bd85b039","id":2253,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"954:11:9","nodeType":"FunctionDefinition","parameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2243,"mutability":"mutable","name":"id","nameLocation":"974:2:9","nodeType":"VariableDeclaration","scope":2253,"src":"966:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"966:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"965:12:9"},"returnParameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2253,"src":"1007:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2245,"name":"uint256","nodeType":"ElementaryTypeName","src":"1007:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1006:9:9"},"scope":2392,"src":"945:111:9","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2268,"nodeType":"Block","src":"1212:68:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2263,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"1266:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2261,"name":"ERC1155SupplyUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"1229:24:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155SupplyUpgradeable_$2392_$","typeString":"type(contract ERC1155SupplyUpgradeable)"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1254:11:9","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":2253,"src":"1229:36:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1229:40:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1272:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1229:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2260,"id":2267,"nodeType":"Return","src":"1222:51:9"}]},"documentation":{"id":2254,"nodeType":"StructuredDocumentation","src":"1062:82:9","text":" @dev Indicates whether any token exist with a given id, or not."},"functionSelector":"4f558e79","id":2269,"implemented":true,"kind":"function","modifiers":[],"name":"exists","nameLocation":"1158:6:9","nodeType":"FunctionDefinition","parameters":{"id":2257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2256,"mutability":"mutable","name":"id","nameLocation":"1173:2:9","nodeType":"VariableDeclaration","scope":2269,"src":"1165:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1165:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1164:12:9"},"returnParameters":{"id":2260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2269,"src":"1206:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2258,"name":"bool","nodeType":"ElementaryTypeName","src":"1206:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1205:6:9"},"scope":2392,"src":"1149:131:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1871],"body":{"id":2385,"nodeType":"Block","src":"1571:683:9","statements":[{"expression":{"arguments":[{"id":2291,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"1608:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2292,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"1618:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2293,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"1624:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2294,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"1628:3:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2295,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"1633:7:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2296,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"1642:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2288,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1581:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155SupplyUpgradeable_$2392_$","typeString":"type(contract super ERC1155SupplyUpgradeable)"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1587:20:9","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1871,"src":"1581:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:66:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2298,"nodeType":"ExpressionStatement","src":"1581:66:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2299,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"1662:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1678:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1670:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"1670:7:9","typeDescriptions":{}}},"id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1670:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2329,"nodeType":"IfStatement","src":"1658:156:9","trueBody":{"id":2328,"nodeType":"Block","src":"1682:132:9","statements":[{"body":{"id":2326,"nodeType":"Block","src":"1737:67:9","statements":[{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2316,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"1755:12:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2320,"indexExpression":{"baseExpression":{"id":2317,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"1768:3:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2319,"indexExpression":{"id":2318,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"1772:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1768:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1755:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":2321,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"1779:7:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2323,"indexExpression":{"id":2322,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"1787:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1779:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1755:34:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2325,"nodeType":"ExpressionStatement","src":"1755:34:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2309,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"1716:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2310,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"1720:3:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1724:6:9","memberName":"length","nodeType":"MemberAccess","src":"1720:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1716:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2327,"initializationExpression":{"assignments":[2306],"declarations":[{"constant":false,"id":2306,"mutability":"mutable","name":"i","nameLocation":"1709:1:9","nodeType":"VariableDeclaration","scope":2327,"src":"1701:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2305,"name":"uint256","nodeType":"ElementaryTypeName","src":"1701:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2308,"initialValue":{"hexValue":"30","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1701:13:9"},"loopExpression":{"expression":{"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1732:3:9","subExpression":{"id":2313,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"1734:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2315,"nodeType":"ExpressionStatement","src":"1732:3:9"},"nodeType":"ForStatement","src":"1696:108:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2330,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"1828:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1842:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1834:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2331,"name":"address","nodeType":"ElementaryTypeName","src":"1834:7:9","typeDescriptions":{}}},"id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1834:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1828:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2384,"nodeType":"IfStatement","src":"1824:424:9","trueBody":{"id":2383,"nodeType":"Block","src":"1846:402:9","statements":[{"body":{"id":2381,"nodeType":"Block","src":"1901:337:9","statements":[{"assignments":[2348],"declarations":[{"constant":false,"id":2348,"mutability":"mutable","name":"id","nameLocation":"1927:2:9","nodeType":"VariableDeclaration","scope":2381,"src":"1919:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2347,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2352,"initialValue":{"baseExpression":{"id":2349,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"1932:3:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2351,"indexExpression":{"id":2350,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"1936:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1932:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1919:19:9"},{"assignments":[2354],"declarations":[{"constant":false,"id":2354,"mutability":"mutable","name":"amount","nameLocation":"1964:6:9","nodeType":"VariableDeclaration","scope":2381,"src":"1956:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1956:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2358,"initialValue":{"baseExpression":{"id":2355,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"1973:7:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2357,"indexExpression":{"id":2356,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"1981:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1973:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1956:27:9"},{"assignments":[2360],"declarations":[{"constant":false,"id":2360,"mutability":"mutable","name":"supply","nameLocation":"2009:6:9","nodeType":"VariableDeclaration","scope":2381,"src":"2001:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2359,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2364,"initialValue":{"baseExpression":{"id":2361,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"2018:12:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2363,"indexExpression":{"id":2362,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"2031:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2018:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2001:33:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2366,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"2060:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2367,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"2070:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2060:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e74206578636565647320746f74616c537570706c79","id":2369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:42:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4","typeString":"literal_string \"ERC1155: burn amount exceeds totalSupply\""},"value":"ERC1155: burn amount exceeds totalSupply"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4","typeString":"literal_string \"ERC1155: burn amount exceeds totalSupply\""}],"id":2365,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2052:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2371,"nodeType":"ExpressionStatement","src":"2052:69:9"},{"id":2380,"nodeType":"UncheckedBlock","src":"2139:85:9","statements":[{"expression":{"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2372,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"2171:12:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2374,"indexExpression":{"id":2373,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"2184:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2171:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2375,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"2190:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2376,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"2199:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2190:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2171:34:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2379,"nodeType":"ExpressionStatement","src":"2171:34:9"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2340,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"1880:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2341,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"1884:3:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1888:6:9","memberName":"length","nodeType":"MemberAccess","src":"1884:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1880:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2382,"initializationExpression":{"assignments":[2337],"declarations":[{"constant":false,"id":2337,"mutability":"mutable","name":"i","nameLocation":"1873:1:9","nodeType":"VariableDeclaration","scope":2382,"src":"1865:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2336,"name":"uint256","nodeType":"ElementaryTypeName","src":"1865:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2339,"initialValue":{"hexValue":"30","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1877:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1865:13:9"},"loopExpression":{"expression":{"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1896:3:9","subExpression":{"id":2344,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"1898:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2346,"nodeType":"ExpressionStatement","src":"1896:3:9"},"nodeType":"ForStatement","src":"1860:378:9"}]}}]},"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"1286:59:9","text":" @dev See {ERC1155-_beforeTokenTransfer}."},"id":2386,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"1359:20:9","nodeType":"FunctionDefinition","overrides":{"id":2286,"nodeType":"OverrideSpecifier","overrides":[],"src":"1562:8:9"},"parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"operator","nameLocation":"1397:8:9","nodeType":"VariableDeclaration","scope":2386,"src":"1389:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2271,"name":"address","nodeType":"ElementaryTypeName","src":"1389:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2274,"mutability":"mutable","name":"from","nameLocation":"1423:4:9","nodeType":"VariableDeclaration","scope":2386,"src":"1415:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2273,"name":"address","nodeType":"ElementaryTypeName","src":"1415:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2276,"mutability":"mutable","name":"to","nameLocation":"1445:2:9","nodeType":"VariableDeclaration","scope":2386,"src":"1437:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2275,"name":"address","nodeType":"ElementaryTypeName","src":"1437:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2279,"mutability":"mutable","name":"ids","nameLocation":"1474:3:9","nodeType":"VariableDeclaration","scope":2386,"src":"1457:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2278,"nodeType":"ArrayTypeName","src":"1457:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2282,"mutability":"mutable","name":"amounts","nameLocation":"1504:7:9","nodeType":"VariableDeclaration","scope":2386,"src":"1487:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"1487:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2281,"nodeType":"ArrayTypeName","src":"1487:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"data","nameLocation":"1534:4:9","nodeType":"VariableDeclaration","scope":2386,"src":"1521:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2283,"name":"bytes","nodeType":"ElementaryTypeName","src":"1521:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1379:165:9"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[],"src":"1571:0:9"},"scope":2392,"src":"1350:904:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2387,"nodeType":"StructuredDocumentation","src":"2260:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2391,"mutability":"mutable","name":"__gap","nameLocation":"2539:5:9","nodeType":"VariableDeclaration","scope":2392,"src":"2519:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":2388,"name":"uint256","nodeType":"ElementaryTypeName","src":"2519:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2390,"length":{"hexValue":"3439","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2527:2:9","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2519:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":2393,"src":"582:1965:9","usedErrors":[]}],"src":"126:2422:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","exportedSymbols":{"IERC1155MetadataURIUpgradeable":[2407],"IERC1155Upgradeable":[2215],"IERC165Upgradeable":[3034]},"id":2408,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2394,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"117:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","file":"../IERC1155Upgradeable.sol","id":2395,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2408,"sourceUnit":2216,"src":"142:36:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2397,"name":"IERC1155Upgradeable","nameLocations":["419:19:10"],"nodeType":"IdentifierPath","referencedDeclaration":2215,"src":"419:19:10"},"id":2398,"nodeType":"InheritanceSpecifier","src":"419:19:10"}],"canonicalName":"IERC1155MetadataURIUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2396,"nodeType":"StructuredDocumentation","src":"180:194:10","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":2407,"linearizedBaseContracts":[2407,2215,3034],"name":"IERC1155MetadataURIUpgradeable","nameLocation":"385:30:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2399,"nodeType":"StructuredDocumentation","src":"445:192:10","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":2406,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"651:3:10","nodeType":"FunctionDefinition","parameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"id","nameLocation":"663:2:10","nodeType":"VariableDeclaration","scope":2406,"src":"655:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:12:10"},"returnParameters":{"id":2405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2406,"src":"690:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2403,"name":"string","nodeType":"ElementaryTypeName","src":"690:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"689:15:10"},"scope":2407,"src":"642:63:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2408,"src":"375:332:10","usedErrors":[]}],"src":"117:591:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650]},"id":2651,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2409,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2410,"nodeType":"StructuredDocumentation","src":"126:67:11","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2650,"linearizedBaseContracts":[2650],"name":"AddressUpgradeable","nameLocation":"202:18:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2424,"nodeType":"Block","src":"1252:254:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2418,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"1476:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:11","memberName":"code","nodeType":"MemberAccess","src":"1476:12:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:11","memberName":"length","nodeType":"MemberAccess","src":"1476:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2417,"id":2423,"nodeType":"Return","src":"1469:30:11"}]},"documentation":{"id":2411,"nodeType":"StructuredDocumentation","src":"227:954:11","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2425,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:11","nodeType":"FunctionDefinition","parameters":{"id":2414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2413,"mutability":"mutable","name":"account","nameLocation":"1214:7:11","nodeType":"VariableDeclaration","scope":2425,"src":"1206:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2412,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:11"},"returnParameters":{"id":2417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2425,"src":"1246:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2415,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:11"},"scope":2650,"src":"1186:320:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2458,"nodeType":"Block","src":"2494:241:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2436,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2650","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2650","typeString":"library AddressUpgradeable"}],"id":2435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2434,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:11","typeDescriptions":{}}},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:11","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2439,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"2537:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2443,"nodeType":"ExpressionStatement","src":"2504:73:11"},{"assignments":[2445,null],"declarations":[{"constant":false,"id":2445,"mutability":"mutable","name":"success","nameLocation":"2594:7:11","nodeType":"VariableDeclaration","scope":2458,"src":"2589:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2444,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2452,"initialValue":{"arguments":[{"hexValue":"","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2446,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"2607:9:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:11","memberName":"call","nodeType":"MemberAccess","src":"2607:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2448,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"2629:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:11"},{"expression":{"arguments":[{"id":2454,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"2658:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2453,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2457,"nodeType":"ExpressionStatement","src":"2650:78:11"}]},"documentation":{"id":2426,"nodeType":"StructuredDocumentation","src":"1512:906:11","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2459,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:11","nodeType":"FunctionDefinition","parameters":{"id":2431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:11","nodeType":"VariableDeclaration","scope":2459,"src":"2442:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2427,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2430,"mutability":"mutable","name":"amount","nameLocation":"2477:6:11","nodeType":"VariableDeclaration","scope":2459,"src":"2469:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2429,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:11"},"returnParameters":{"id":2432,"nodeType":"ParameterList","parameters":[],"src":"2494:0:11"},"scope":2650,"src":"2423:312:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2475,"nodeType":"Block","src":"3566:84:11","statements":[{"expression":{"arguments":[{"id":2470,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"3596:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2471,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"3604:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3610:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2469,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[2476,2496],"referencedDeclaration":2496,"src":"3583:12:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2468,"id":2474,"nodeType":"Return","src":"3576:67:11"}]},"documentation":{"id":2460,"nodeType":"StructuredDocumentation","src":"2741:731:11","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2476,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:11","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"target","nameLocation":"3507:6:11","nodeType":"VariableDeclaration","scope":2476,"src":"3499:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2461,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"data","nameLocation":"3528:4:11","nodeType":"VariableDeclaration","scope":2476,"src":"3515:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2463,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:11"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2476,"src":"3552:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2466,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:11"},"scope":2650,"src":"3477:173:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2495,"nodeType":"Block","src":"4019:76:11","statements":[{"expression":{"arguments":[{"id":2489,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"4058:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2490,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"4066:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4072:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2492,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"4075:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2488,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2516,2566],"referencedDeclaration":2566,"src":"4036:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4036:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2487,"id":2494,"nodeType":"Return","src":"4029:59:11"}]},"documentation":{"id":2477,"nodeType":"StructuredDocumentation","src":"3656:211:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2496,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3881:12:11","nodeType":"FunctionDefinition","parameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2479,"mutability":"mutable","name":"target","nameLocation":"3911:6:11","nodeType":"VariableDeclaration","scope":2496,"src":"3903:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2478,"name":"address","nodeType":"ElementaryTypeName","src":"3903:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2481,"mutability":"mutable","name":"data","nameLocation":"3940:4:11","nodeType":"VariableDeclaration","scope":2496,"src":"3927:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2480,"name":"bytes","nodeType":"ElementaryTypeName","src":"3927:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"errorMessage","nameLocation":"3968:12:11","nodeType":"VariableDeclaration","scope":2496,"src":"3954:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2482,"name":"string","nodeType":"ElementaryTypeName","src":"3954:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3893:93:11"},"returnParameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2496,"src":"4005:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2485,"name":"bytes","nodeType":"ElementaryTypeName","src":"4005:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4004:14:11"},"scope":2650,"src":"3872:223:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2515,"nodeType":"Block","src":"4600:111:11","statements":[{"expression":{"arguments":[{"id":2509,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"4639:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2510,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"4647:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"4653:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4660:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2508,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2516,2566],"referencedDeclaration":2566,"src":"4617:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2507,"id":2514,"nodeType":"Return","src":"4610:94:11"}]},"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"4101:351:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2516,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4466:21:11","nodeType":"FunctionDefinition","parameters":{"id":2504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"target","nameLocation":"4505:6:11","nodeType":"VariableDeclaration","scope":2516,"src":"4497:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"4497:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"data","nameLocation":"4534:4:11","nodeType":"VariableDeclaration","scope":2516,"src":"4521:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2500,"name":"bytes","nodeType":"ElementaryTypeName","src":"4521:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2503,"mutability":"mutable","name":"value","nameLocation":"4556:5:11","nodeType":"VariableDeclaration","scope":2516,"src":"4548:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"4548:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4487:80:11"},"returnParameters":{"id":2507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2516,"src":"4586:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2505,"name":"bytes","nodeType":"ElementaryTypeName","src":"4586:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4585:14:11"},"scope":2650,"src":"4457:254:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2565,"nodeType":"Block","src":"5138:320:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2533,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5164:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2650","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2650","typeString":"library AddressUpgradeable"}],"id":2532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5156:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2531,"name":"address","nodeType":"ElementaryTypeName","src":"5156:7:11","typeDescriptions":{}}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5156:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5170:7:11","memberName":"balance","nodeType":"MemberAccess","src":"5156:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"5181:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5156:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5188:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2530,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5148:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5148:81:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2540,"nodeType":"ExpressionStatement","src":"5148:81:11"},{"expression":{"arguments":[{"arguments":[{"id":2543,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"5258:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2542,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"5247:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5247:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5267:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2541,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5239:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5239:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2547,"nodeType":"ExpressionStatement","src":"5239:60:11"},{"assignments":[2549,2551],"declarations":[{"constant":false,"id":2549,"mutability":"mutable","name":"success","nameLocation":"5316:7:11","nodeType":"VariableDeclaration","scope":2565,"src":"5311:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2548,"name":"bool","nodeType":"ElementaryTypeName","src":"5311:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"returndata","nameLocation":"5338:10:11","nodeType":"VariableDeclaration","scope":2565,"src":"5325:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2550,"name":"bytes","nodeType":"ElementaryTypeName","src":"5325:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2558,"initialValue":{"arguments":[{"id":2556,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2521,"src":"5378:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2552,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"5352:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5359:4:11","memberName":"call","nodeType":"MemberAccess","src":"5352:11:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2554,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"5371:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5352:25:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5352:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5310:73:11"},{"expression":{"arguments":[{"id":2560,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"5417:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2561,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"5426:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2562,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"5438:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2559,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"5400:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5400:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2529,"id":2564,"nodeType":"Return","src":"5393:58:11"}]},"documentation":{"id":2517,"nodeType":"StructuredDocumentation","src":"4717:237:11","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2566,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4968:21:11","nodeType":"FunctionDefinition","parameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2519,"mutability":"mutable","name":"target","nameLocation":"5007:6:11","nodeType":"VariableDeclaration","scope":2566,"src":"4999:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2518,"name":"address","nodeType":"ElementaryTypeName","src":"4999:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2521,"mutability":"mutable","name":"data","nameLocation":"5036:4:11","nodeType":"VariableDeclaration","scope":2566,"src":"5023:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2520,"name":"bytes","nodeType":"ElementaryTypeName","src":"5023:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2523,"mutability":"mutable","name":"value","nameLocation":"5058:5:11","nodeType":"VariableDeclaration","scope":2566,"src":"5050:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"5050:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"errorMessage","nameLocation":"5087:12:11","nodeType":"VariableDeclaration","scope":2566,"src":"5073:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2524,"name":"string","nodeType":"ElementaryTypeName","src":"5073:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4989:116:11"},"returnParameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2566,"src":"5124:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2527,"name":"bytes","nodeType":"ElementaryTypeName","src":"5124:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5123:14:11"},"scope":2650,"src":"4959:499:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2582,"nodeType":"Block","src":"5735:97:11","statements":[{"expression":{"arguments":[{"id":2577,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"5771:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2578,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"5779:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5785:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2576,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2583,2618],"referencedDeclaration":2618,"src":"5752:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5752:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2575,"id":2581,"nodeType":"Return","src":"5745:80:11"}]},"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"5464:166:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2583,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5644:18:11","nodeType":"FunctionDefinition","parameters":{"id":2572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"target","nameLocation":"5671:6:11","nodeType":"VariableDeclaration","scope":2583,"src":"5663:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2568,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2571,"mutability":"mutable","name":"data","nameLocation":"5692:4:11","nodeType":"VariableDeclaration","scope":2583,"src":"5679:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2570,"name":"bytes","nodeType":"ElementaryTypeName","src":"5679:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5662:35:11"},"returnParameters":{"id":2575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2583,"src":"5721:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2573,"name":"bytes","nodeType":"ElementaryTypeName","src":"5721:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5720:14:11"},"scope":2650,"src":"5635:197:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2617,"nodeType":"Block","src":"6174:228:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2597,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"6203:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2596,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"6192:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6192:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6212:38:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":2595,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6184:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6184:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2601,"nodeType":"ExpressionStatement","src":"6184:67:11"},{"assignments":[2603,2605],"declarations":[{"constant":false,"id":2603,"mutability":"mutable","name":"success","nameLocation":"6268:7:11","nodeType":"VariableDeclaration","scope":2617,"src":"6263:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2602,"name":"bool","nodeType":"ElementaryTypeName","src":"6263:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2605,"mutability":"mutable","name":"returndata","nameLocation":"6290:10:11","nodeType":"VariableDeclaration","scope":2617,"src":"6277:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2604,"name":"bytes","nodeType":"ElementaryTypeName","src":"6277:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2610,"initialValue":{"arguments":[{"id":2608,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"6322:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2606,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"6304:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6311:10:11","memberName":"staticcall","nodeType":"MemberAccess","src":"6304:17:11","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6304:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6262:65:11"},{"expression":{"arguments":[{"id":2612,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"6361:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2613,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"6370:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2614,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"6382:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2611,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"6344:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6344:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2594,"id":2616,"nodeType":"Return","src":"6337:58:11"}]},"documentation":{"id":2584,"nodeType":"StructuredDocumentation","src":"5838:173:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2618,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6025:18:11","nodeType":"FunctionDefinition","parameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"target","nameLocation":"6061:6:11","nodeType":"VariableDeclaration","scope":2618,"src":"6053:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2585,"name":"address","nodeType":"ElementaryTypeName","src":"6053:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2588,"mutability":"mutable","name":"data","nameLocation":"6090:4:11","nodeType":"VariableDeclaration","scope":2618,"src":"6077:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2587,"name":"bytes","nodeType":"ElementaryTypeName","src":"6077:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2590,"mutability":"mutable","name":"errorMessage","nameLocation":"6118:12:11","nodeType":"VariableDeclaration","scope":2618,"src":"6104:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2589,"name":"string","nodeType":"ElementaryTypeName","src":"6104:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6043:93:11"},"returnParameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2618,"src":"6160:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2592,"name":"bytes","nodeType":"ElementaryTypeName","src":"6160:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6159:14:11"},"scope":2650,"src":"6016:386:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2648,"nodeType":"Block","src":"6782:582:11","statements":[{"condition":{"id":2630,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2621,"src":"6796:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2646,"nodeType":"Block","src":"6853:505:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2634,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"6937:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6948:6:11","memberName":"length","nodeType":"MemberAccess","src":"6937:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6957:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6937:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2644,"nodeType":"Block","src":"7295:53:11","statements":[{"expression":{"arguments":[{"id":2641,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2625,"src":"7320:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2640,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"7313:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7313:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2643,"nodeType":"ExpressionStatement","src":"7313:20:11"}]},"id":2645,"nodeType":"IfStatement","src":"6933:415:11","trueBody":{"id":2639,"nodeType":"Block","src":"6960:329:11","statements":[{"AST":{"nodeType":"YulBlock","src":"7130:145:11","statements":[{"nodeType":"YulVariableDeclaration","src":"7152:40:11","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"7181:10:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7175:5:11"},"nodeType":"YulFunctionCall","src":"7175:17:11"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"7156:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7224:2:11","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"7228:10:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7220:3:11"},"nodeType":"YulFunctionCall","src":"7220:19:11"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"7241:15:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7213:6:11"},"nodeType":"YulFunctionCall","src":"7213:44:11"},"nodeType":"YulExpressionStatement","src":"7213:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2623,"isOffset":false,"isSlot":false,"src":"7181:10:11","valueSize":1},{"declaration":2623,"isOffset":false,"isSlot":false,"src":"7228:10:11","valueSize":1}],"id":2638,"nodeType":"InlineAssembly","src":"7121:154:11"}]}}]},"id":2647,"nodeType":"IfStatement","src":"6792:566:11","trueBody":{"id":2633,"nodeType":"Block","src":"6805:42:11","statements":[{"expression":{"id":2631,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"6826:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2629,"id":2632,"nodeType":"Return","src":"6819:17:11"}]}}]},"documentation":{"id":2619,"nodeType":"StructuredDocumentation","src":"6408:209:11","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"id":2649,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"6631:16:11","nodeType":"FunctionDefinition","parameters":{"id":2626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2621,"mutability":"mutable","name":"success","nameLocation":"6662:7:11","nodeType":"VariableDeclaration","scope":2649,"src":"6657:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2620,"name":"bool","nodeType":"ElementaryTypeName","src":"6657:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2623,"mutability":"mutable","name":"returndata","nameLocation":"6692:10:11","nodeType":"VariableDeclaration","scope":2649,"src":"6679:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2622,"name":"bytes","nodeType":"ElementaryTypeName","src":"6679:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2625,"mutability":"mutable","name":"errorMessage","nameLocation":"6726:12:11","nodeType":"VariableDeclaration","scope":2649,"src":"6712:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2624,"name":"string","nodeType":"ElementaryTypeName","src":"6712:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6647:97:11"},"returnParameters":{"id":2629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2649,"src":"6768:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2627,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:11"},"scope":2650,"src":"6622:742:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2651,"src":"194:7172:11","usedErrors":[]}],"src":"101:7266:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ContextUpgradeable":[2692],"Initializable":[671]},"id":2693,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2652,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2653,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2693,"sourceUnit":672,"src":"110:42:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2655,"name":"Initializable","nameLocations":["691:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"691:13:12"},"id":2656,"nodeType":"InheritanceSpecifier","src":"691:13:12"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2654,"nodeType":"StructuredDocumentation","src":"154:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2692,"linearizedBaseContracts":[2692,671],"name":"ContextUpgradeable","nameLocation":"669:18:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2661,"nodeType":"Block","src":"763:7:12","statements":[]},"id":2662,"implemented":true,"kind":"function","modifiers":[{"id":2659,"kind":"modifierInvocation","modifierName":{"id":2658,"name":"onlyInitializing","nameLocations":["746:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"746:16:12"},"nodeType":"ModifierInvocation","src":"746:16:12"}],"name":"__Context_init","nameLocation":"720:14:12","nodeType":"FunctionDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[],"src":"734:2:12"},"returnParameters":{"id":2660,"nodeType":"ParameterList","parameters":[],"src":"763:0:12"},"scope":2692,"src":"711:59:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2667,"nodeType":"Block","src":"838:7:12","statements":[]},"id":2668,"implemented":true,"kind":"function","modifiers":[{"id":2665,"kind":"modifierInvocation","modifierName":{"id":2664,"name":"onlyInitializing","nameLocations":["821:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"821:16:12"},"nodeType":"ModifierInvocation","src":"821:16:12"}],"name":"__Context_init_unchained","nameLocation":"785:24:12","nodeType":"FunctionDefinition","parameters":{"id":2663,"nodeType":"ParameterList","parameters":[],"src":"809:2:12"},"returnParameters":{"id":2666,"nodeType":"ParameterList","parameters":[],"src":"838:0:12"},"scope":2692,"src":"776:69:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2676,"nodeType":"Block","src":"912:34:12","statements":[{"expression":{"expression":{"id":2673,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:12","memberName":"sender","nodeType":"MemberAccess","src":"929:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2672,"id":2675,"nodeType":"Return","src":"922:17:12"}]},"id":2677,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:12","nodeType":"FunctionDefinition","parameters":{"id":2669,"nodeType":"ParameterList","parameters":[],"src":"869:2:12"},"returnParameters":{"id":2672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2677,"src":"903:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2670,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:12"},"scope":2692,"src":"850:96:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2685,"nodeType":"Block","src":"1019:32:12","statements":[{"expression":{"expression":{"id":2682,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:12","memberName":"data","nodeType":"MemberAccess","src":"1036:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2681,"id":2684,"nodeType":"Return","src":"1029:15:12"}]},"id":2686,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:12","nodeType":"FunctionDefinition","parameters":{"id":2678,"nodeType":"ParameterList","parameters":[],"src":"969:2:12"},"returnParameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2686,"src":"1003:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2679,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:12"},"scope":2692,"src":"952:99:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2687,"nodeType":"StructuredDocumentation","src":"1057:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2691,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:12","nodeType":"VariableDeclaration","scope":2692,"src":"1316:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2690,"length":{"hexValue":"3530","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2693,"src":"651:693:12","usedErrors":[]}],"src":"86:1259:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[2752]},"id":2753,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2694,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2695,"nodeType":"StructuredDocumentation","src":"130:1148:13","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":2752,"linearizedBaseContracts":[2752],"name":"StorageSlotUpgradeable","nameLocation":"1287:22:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":2698,"members":[{"constant":false,"id":2697,"mutability":"mutable","name":"value","nameLocation":"1353:5:13","nodeType":"VariableDeclaration","scope":2698,"src":"1345:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2696,"name":"address","nodeType":"ElementaryTypeName","src":"1345:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1323:11:13","nodeType":"StructDefinition","scope":2752,"src":"1316:49:13","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":2701,"members":[{"constant":false,"id":2700,"mutability":"mutable","name":"value","nameLocation":"1405:5:13","nodeType":"VariableDeclaration","scope":2701,"src":"1400:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2699,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1378:11:13","nodeType":"StructDefinition","scope":2752,"src":"1371:46:13","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":2704,"members":[{"constant":false,"id":2703,"mutability":"mutable","name":"value","nameLocation":"1460:5:13","nodeType":"VariableDeclaration","scope":2704,"src":"1452:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1452:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1430:11:13","nodeType":"StructDefinition","scope":2752,"src":"1423:49:13","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":2707,"members":[{"constant":false,"id":2706,"mutability":"mutable","name":"value","nameLocation":"1515:5:13","nodeType":"VariableDeclaration","scope":2707,"src":"1507:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1485:11:13","nodeType":"StructDefinition","scope":2752,"src":"1478:49:13","visibility":"public"},{"body":{"id":2717,"nodeType":"Block","src":"1709:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"1771:38:13","statements":[{"nodeType":"YulAssignment","src":"1785:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"1795:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1785:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2714,"isOffset":false,"isSlot":true,"src":"1785:6:13","suffix":"slot","valueSize":1},{"declaration":2710,"isOffset":false,"isSlot":false,"src":"1795:4:13","valueSize":1}],"id":2716,"nodeType":"InlineAssembly","src":"1762:47:13"}]},"documentation":{"id":2708,"nodeType":"StructuredDocumentation","src":"1533:87:13","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2718,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1634:14:13","nodeType":"FunctionDefinition","parameters":{"id":2711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2710,"mutability":"mutable","name":"slot","nameLocation":"1657:4:13","nodeType":"VariableDeclaration","scope":2718,"src":"1649:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1649:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1648:14:13"},"returnParameters":{"id":2715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2714,"mutability":"mutable","name":"r","nameLocation":"1706:1:13","nodeType":"VariableDeclaration","scope":2718,"src":"1686:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":2713,"nodeType":"UserDefinedTypeName","pathNode":{"id":2712,"name":"AddressSlot","nameLocations":["1686:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":2698,"src":"1686:11:13"},"referencedDeclaration":2698,"src":"1686:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2698_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1685:23:13"},"scope":2752,"src":"1625:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2728,"nodeType":"Block","src":"1997:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2059:38:13","statements":[{"nodeType":"YulAssignment","src":"2073:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"2083:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2073:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2725,"isOffset":false,"isSlot":true,"src":"2073:6:13","suffix":"slot","valueSize":1},{"declaration":2721,"isOffset":false,"isSlot":false,"src":"2083:4:13","valueSize":1}],"id":2727,"nodeType":"InlineAssembly","src":"2050:47:13"}]},"documentation":{"id":2719,"nodeType":"StructuredDocumentation","src":"1821:87:13","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2729,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1922:14:13","nodeType":"FunctionDefinition","parameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"slot","nameLocation":"1945:4:13","nodeType":"VariableDeclaration","scope":2729,"src":"1937:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1937:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1936:14:13"},"returnParameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2725,"mutability":"mutable","name":"r","nameLocation":"1994:1:13","nodeType":"VariableDeclaration","scope":2729,"src":"1974:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2701_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":2724,"nodeType":"UserDefinedTypeName","pathNode":{"id":2723,"name":"BooleanSlot","nameLocations":["1974:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":2701,"src":"1974:11:13"},"referencedDeclaration":2701,"src":"1974:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2701_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"1973:23:13"},"scope":2752,"src":"1913:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2739,"nodeType":"Block","src":"2285:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2347:38:13","statements":[{"nodeType":"YulAssignment","src":"2361:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"2371:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2361:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2736,"isOffset":false,"isSlot":true,"src":"2361:6:13","suffix":"slot","valueSize":1},{"declaration":2732,"isOffset":false,"isSlot":false,"src":"2371:4:13","valueSize":1}],"id":2738,"nodeType":"InlineAssembly","src":"2338:47:13"}]},"documentation":{"id":2730,"nodeType":"StructuredDocumentation","src":"2109:87:13","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2740,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2210:14:13","nodeType":"FunctionDefinition","parameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2732,"mutability":"mutable","name":"slot","nameLocation":"2233:4:13","nodeType":"VariableDeclaration","scope":2740,"src":"2225:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:14:13"},"returnParameters":{"id":2737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"r","nameLocation":"2282:1:13","nodeType":"VariableDeclaration","scope":2740,"src":"2262:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2704_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":2735,"nodeType":"UserDefinedTypeName","pathNode":{"id":2734,"name":"Bytes32Slot","nameLocations":["2262:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":2704,"src":"2262:11:13"},"referencedDeclaration":2704,"src":"2262:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2704_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2261:23:13"},"scope":2752,"src":"2201:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2750,"nodeType":"Block","src":"2573:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2635:38:13","statements":[{"nodeType":"YulAssignment","src":"2649:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"2659:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2649:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2747,"isOffset":false,"isSlot":true,"src":"2649:6:13","suffix":"slot","valueSize":1},{"declaration":2743,"isOffset":false,"isSlot":false,"src":"2659:4:13","valueSize":1}],"id":2749,"nodeType":"InlineAssembly","src":"2626:47:13"}]},"documentation":{"id":2741,"nodeType":"StructuredDocumentation","src":"2397:87:13","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2751,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2498:14:13","nodeType":"FunctionDefinition","parameters":{"id":2744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"mutability":"mutable","name":"slot","nameLocation":"2521:4:13","nodeType":"VariableDeclaration","scope":2751,"src":"2513:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2513:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2512:14:13"},"returnParameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2747,"mutability":"mutable","name":"r","nameLocation":"2570:1:13","nodeType":"VariableDeclaration","scope":2751,"src":"2550:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2707_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":2746,"nodeType":"UserDefinedTypeName","pathNode":{"id":2745,"name":"Uint256Slot","nameLocations":["2550:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":2707,"src":"2550:11:13"},"referencedDeclaration":2707,"src":"2550:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2707_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2549:23:13"},"scope":2752,"src":"2489:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2753,"src":"1279:1402:13","usedErrors":[]}],"src":"105:2577:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"StringsUpgradeable":[2978]},"id":2979,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2754,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2755,"nodeType":"StructuredDocumentation","src":"126:34:14","text":" @dev String operations."},"fullyImplemented":true,"id":2978,"linearizedBaseContracts":[2978],"name":"StringsUpgradeable","nameLocation":"169:18:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2758,"mutability":"constant","name":"_HEX_SYMBOLS","nameLocation":"219:12:14","nodeType":"VariableDeclaration","scope":2978,"src":"194:58:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2756,"name":"bytes16","nodeType":"ElementaryTypeName","src":"194:7:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"234:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2761,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"281:15:14","nodeType":"VariableDeclaration","scope":2978,"src":"258:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2759,"name":"uint8","nodeType":"ElementaryTypeName","src":"258:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"299:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2839,"nodeType":"Block","src":"474:632:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"676:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"685:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"676:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2775,"nodeType":"IfStatement","src":"672:51:14","trueBody":{"id":2774,"nodeType":"Block","src":"688:35:14","statements":[{"expression":{"hexValue":"30","id":2772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"709:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"functionReturnParameters":2768,"id":2773,"nodeType":"Return","src":"702:10:14"}]}},{"assignments":[2777],"declarations":[{"constant":false,"id":2777,"mutability":"mutable","name":"temp","nameLocation":"740:4:14","nodeType":"VariableDeclaration","scope":2839,"src":"732:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2776,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2779,"initialValue":{"id":2778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"747:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"732:20:14"},{"assignments":[2781],"declarations":[{"constant":false,"id":2781,"mutability":"mutable","name":"digits","nameLocation":"770:6:14","nodeType":"VariableDeclaration","scope":2839,"src":"762:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2782,"nodeType":"VariableDeclarationStatement","src":"762:14:14"},{"body":{"id":2793,"nodeType":"Block","src":"804:57:14","statements":[{"expression":{"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"818:8:14","subExpression":{"id":2786,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"818:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2788,"nodeType":"ExpressionStatement","src":"818:8:14"},{"expression":{"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2789,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"840:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"848:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"840:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2792,"nodeType":"ExpressionStatement","src":"840:10:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2783,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"793:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"801:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"793:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2794,"nodeType":"WhileStatement","src":"786:75:14"},{"assignments":[2796],"declarations":[{"constant":false,"id":2796,"mutability":"mutable","name":"buffer","nameLocation":"883:6:14","nodeType":"VariableDeclaration","scope":2839,"src":"870:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2795,"name":"bytes","nodeType":"ElementaryTypeName","src":"870:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2801,"initialValue":{"arguments":[{"id":2799,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"902:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"892:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2797,"name":"bytes","nodeType":"ElementaryTypeName","src":"896:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"892:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"870:39:14"},{"body":{"id":2832,"nodeType":"Block","src":"938:131:14","statements":[{"expression":{"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2805,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"952:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"962:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"952:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2808,"nodeType":"ExpressionStatement","src":"952:11:14"},{"expression":{"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2809,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"977:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2811,"indexExpression":{"id":2810,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"984:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"977:14:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1007:2:14","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"1020:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3130","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1028:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1020:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1012:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:14","typeDescriptions":{}}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1012:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1007:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1001:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2814,"name":"uint8","nodeType":"ElementaryTypeName","src":"1001:5:14","typeDescriptions":{}}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1001:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"994:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":2812,"name":"bytes1","nodeType":"ElementaryTypeName","src":"994:6:14","typeDescriptions":{}}},"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"994:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"977:56:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2827,"nodeType":"ExpressionStatement","src":"977:56:14"},{"expression":{"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"1047:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1056:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1047:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2831,"nodeType":"ExpressionStatement","src":"1047:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"926:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"935:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"926:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2833,"nodeType":"WhileStatement","src":"919:150:14"},{"expression":{"arguments":[{"id":2836,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"1092:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1085:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2834,"name":"string","nodeType":"ElementaryTypeName","src":"1085:6:14","typeDescriptions":{}}},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1085:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2768,"id":2838,"nodeType":"Return","src":"1078:21:14"}]},"documentation":{"id":2762,"nodeType":"StructuredDocumentation","src":"308:90:14","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2840,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"412:8:14","nodeType":"FunctionDefinition","parameters":{"id":2765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"value","nameLocation":"429:5:14","nodeType":"VariableDeclaration","scope":2840,"src":"421:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2763,"name":"uint256","nodeType":"ElementaryTypeName","src":"421:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"420:15:14"},"returnParameters":{"id":2768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2840,"src":"459:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2766,"name":"string","nodeType":"ElementaryTypeName","src":"459:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"458:15:14"},"scope":2978,"src":"403:703:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2880,"nodeType":"Block","src":"1285:255:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"1299:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1308:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1299:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2854,"nodeType":"IfStatement","src":"1295:54:14","trueBody":{"id":2853,"nodeType":"Block","src":"1311:38:14","statements":[{"expression":{"hexValue":"30783030","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1332:6:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4","typeString":"literal_string \"0x00\""},"value":"0x00"},"functionReturnParameters":2847,"id":2852,"nodeType":"Return","src":"1325:13:14"}]}},{"assignments":[2856],"declarations":[{"constant":false,"id":2856,"mutability":"mutable","name":"temp","nameLocation":"1366:4:14","nodeType":"VariableDeclaration","scope":2880,"src":"1358:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2858,"initialValue":{"id":2857,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"1373:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1358:20:14"},{"assignments":[2860],"declarations":[{"constant":false,"id":2860,"mutability":"mutable","name":"length","nameLocation":"1396:6:14","nodeType":"VariableDeclaration","scope":2880,"src":"1388:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"1388:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2862,"initialValue":{"hexValue":"30","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1405:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1388:18:14"},{"body":{"id":2873,"nodeType":"Block","src":"1434:57:14","statements":[{"expression":{"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1448:8:14","subExpression":{"id":2866,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"1448:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2868,"nodeType":"ExpressionStatement","src":"1448:8:14"},{"expression":{"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2869,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"1470:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1479:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1470:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2872,"nodeType":"ExpressionStatement","src":"1470:10:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2863,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"1423:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1431:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1423:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2874,"nodeType":"WhileStatement","src":"1416:75:14"},{"expression":{"arguments":[{"id":2876,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"1519:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2877,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"1526:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2875,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2881,2957,2977],"referencedDeclaration":2957,"src":"1507:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1507:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2847,"id":2879,"nodeType":"Return","src":"1500:33:14"}]},"documentation":{"id":2841,"nodeType":"StructuredDocumentation","src":"1112:94:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2881,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1220:11:14","nodeType":"FunctionDefinition","parameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"mutability":"mutable","name":"value","nameLocation":"1240:5:14","nodeType":"VariableDeclaration","scope":2881,"src":"1232:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"1232:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1231:15:14"},"returnParameters":{"id":2847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2881,"src":"1270:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2845,"name":"string","nodeType":"ElementaryTypeName","src":"1270:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1269:15:14"},"scope":2978,"src":"1211:329:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2956,"nodeType":"Block","src":"1753:351:14","statements":[{"assignments":[2892],"declarations":[{"constant":false,"id":2892,"mutability":"mutable","name":"buffer","nameLocation":"1776:6:14","nodeType":"VariableDeclaration","scope":2956,"src":"1763:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2891,"name":"bytes","nodeType":"ElementaryTypeName","src":"1763:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2901,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1795:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2896,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"1799:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1795:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1795:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1785:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2893,"name":"bytes","nodeType":"ElementaryTypeName","src":"1789:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1785:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1763:47:14"},{"expression":{"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2902,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"1820:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2904,"indexExpression":{"hexValue":"30","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1827:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1820:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1832:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1820:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2907,"nodeType":"ExpressionStatement","src":"1820:15:14"},{"expression":{"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2908,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"1845:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2910,"indexExpression":{"hexValue":"31","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1845:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1857:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1845:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2913,"nodeType":"ExpressionStatement","src":"1845:15:14"},{"body":{"id":2942,"nodeType":"Block","src":"1915:87:14","statements":[{"expression":{"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2928,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"1929:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2930,"indexExpression":{"id":2929,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"1936:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1929:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2931,"name":"_HEX_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"1941:12:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2935,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"1954:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1962:3:14","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1954:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1941:25:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1929:37:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2937,"nodeType":"ExpressionStatement","src":"1929:37:14"},{"expression":{"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"1980:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1990:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1980:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2941,"nodeType":"ExpressionStatement","src":"1980:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2922,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"1903:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1907:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1903:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2943,"initializationExpression":{"assignments":[2915],"declarations":[{"constant":false,"id":2915,"mutability":"mutable","name":"i","nameLocation":"1883:1:14","nodeType":"VariableDeclaration","scope":2943,"src":"1875:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2914,"name":"uint256","nodeType":"ElementaryTypeName","src":"1875:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2921,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2917,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"1891:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1887:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1900:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1887:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1875:26:14"},"loopExpression":{"expression":{"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1910:3:14","subExpression":{"id":2925,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"1912:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2927,"nodeType":"ExpressionStatement","src":"1910:3:14"},"nodeType":"ForStatement","src":"1870:132:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"2019:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2028:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2019:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2031:34:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2944,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2011:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2950,"nodeType":"ExpressionStatement","src":"2011:55:14"},{"expression":{"arguments":[{"id":2953,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"2090:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2083:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2951,"name":"string","nodeType":"ElementaryTypeName","src":"2083:6:14","typeDescriptions":{}}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2083:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2890,"id":2955,"nodeType":"Return","src":"2076:21:14"}]},"documentation":{"id":2882,"nodeType":"StructuredDocumentation","src":"1546:112:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2957,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1672:11:14","nodeType":"FunctionDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"value","nameLocation":"1692:5:14","nodeType":"VariableDeclaration","scope":2957,"src":"1684:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2886,"mutability":"mutable","name":"length","nameLocation":"1707:6:14","nodeType":"VariableDeclaration","scope":2957,"src":"1699:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1699:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:31:14"},"returnParameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2957,"src":"1738:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2888,"name":"string","nodeType":"ElementaryTypeName","src":"1738:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1737:15:14"},"scope":2978,"src":"1663:441:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2976,"nodeType":"Block","src":"2329:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2970,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"2374:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2366:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2968,"name":"uint160","nodeType":"ElementaryTypeName","src":"2366:7:14","typeDescriptions":{}}},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2366:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2358:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2966,"name":"uint256","nodeType":"ElementaryTypeName","src":"2358:7:14","typeDescriptions":{}}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2358:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2973,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2382:15:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2965,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2881,2957,2977],"referencedDeclaration":2957,"src":"2346:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2346:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2964,"id":2975,"nodeType":"Return","src":"2339:59:14"}]},"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"2110:141:14","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2977,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2265:11:14","nodeType":"FunctionDefinition","parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"addr","nameLocation":"2285:4:14","nodeType":"VariableDeclaration","scope":2977,"src":"2277:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2959,"name":"address","nodeType":"ElementaryTypeName","src":"2277:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2276:14:14"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2977,"src":"2314:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2962,"name":"string","nodeType":"ElementaryTypeName","src":"2314:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2313:15:14"},"scope":2978,"src":"2256:149:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2979,"src":"161:2246:14","usedErrors":[]}],"src":"101:2307:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ERC165Upgradeable":[3022],"IERC165Upgradeable":[3034],"Initializable":[671]},"id":3023,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2980,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":2981,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3023,"sourceUnit":3035,"src":"124:34:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2982,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3023,"sourceUnit":672,"src":"159:45:15","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2984,"name":"Initializable","nameLocations":["822:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"822:13:15"},"id":2985,"nodeType":"InheritanceSpecifier","src":"822:13:15"},{"baseName":{"id":2986,"name":"IERC165Upgradeable","nameLocations":["837:18:15"],"nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"837:18:15"},"id":2987,"nodeType":"InheritanceSpecifier","src":"837:18:15"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2983,"nodeType":"StructuredDocumentation","src":"206:576:15","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3022,"linearizedBaseContracts":[3022,3034,671],"name":"ERC165Upgradeable","nameLocation":"801:17:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":2992,"nodeType":"Block","src":"913:7:15","statements":[]},"id":2993,"implemented":true,"kind":"function","modifiers":[{"id":2990,"kind":"modifierInvocation","modifierName":{"id":2989,"name":"onlyInitializing","nameLocations":["896:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"896:16:15"},"nodeType":"ModifierInvocation","src":"896:16:15"}],"name":"__ERC165_init","nameLocation":"871:13:15","nodeType":"FunctionDefinition","parameters":{"id":2988,"nodeType":"ParameterList","parameters":[],"src":"884:2:15"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[],"src":"913:0:15"},"scope":3022,"src":"862:58:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2998,"nodeType":"Block","src":"987:7:15","statements":[]},"id":2999,"implemented":true,"kind":"function","modifiers":[{"id":2996,"kind":"modifierInvocation","modifierName":{"id":2995,"name":"onlyInitializing","nameLocations":["970:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"970:16:15"},"nodeType":"ModifierInvocation","src":"970:16:15"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:15","nodeType":"FunctionDefinition","parameters":{"id":2994,"nodeType":"ParameterList","parameters":[],"src":"958:2:15"},"returnParameters":{"id":2997,"nodeType":"ParameterList","parameters":[],"src":"987:0:15"},"scope":3022,"src":"926:68:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3033],"body":{"id":3015,"nodeType":"Block","src":"1151:75:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3008,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3002,"src":"1168:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3010,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"1188:18:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3034_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3034_$","typeString":"type(contract IERC165Upgradeable)"}],"id":3009,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$3034","typeString":"type(contract IERC165Upgradeable)"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:15","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3007,"id":3014,"nodeType":"Return","src":"1161:58:15"}]},"documentation":{"id":3000,"nodeType":"StructuredDocumentation","src":"999:56:15","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3016,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:15","nodeType":"FunctionDefinition","overrides":{"id":3004,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:15"},"parameters":{"id":3003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3002,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:15","nodeType":"VariableDeclaration","scope":3016,"src":"1087:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3001,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:15"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3016,"src":"1145:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3005,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:15"},"scope":3022,"src":"1060:166:15","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":3017,"nodeType":"StructuredDocumentation","src":"1232:254:15","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3021,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:15","nodeType":"VariableDeclaration","scope":3022,"src":"1491:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3018,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3020,"length":{"hexValue":"3530","id":3019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:15","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3023,"src":"783:736:15","usedErrors":[]}],"src":"99:1421:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3034]},"id":3035,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3024,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3025,"nodeType":"StructuredDocumentation","src":"125:279:16","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3034,"linearizedBaseContracts":[3034],"name":"IERC165Upgradeable","nameLocation":"415:18:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3026,"nodeType":"StructuredDocumentation","src":"440:340:16","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3033,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:16","nodeType":"FunctionDefinition","parameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:16","nodeType":"VariableDeclaration","scope":3033,"src":"812:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3027,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:16"},"returnParameters":{"id":3032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3033,"src":"855:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3030,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:16"},"scope":3034,"src":"785:76:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3035,"src":"405:458:16","usedErrors":[]}],"src":"100:764:16"},"id":16},"contracts/HYDNSeal.sol":{"ast":{"absolutePath":"contracts/HYDNSeal.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ContextUpgradeable":[2692],"ERC1155SupplyUpgradeable":[2392],"ERC1155Upgradeable":[2052],"ERC165Upgradeable":[3022],"ERC1967UpgradeUpgradeable":[510],"HYDNERC1155SupplyUpgradeable":[3486],"HYDNERC1155Upgradeable":[4720],"HYDNSeal":[3299],"HYDNSealStorage":[3308],"IBeaconUpgradeable":[520],"IERC1155MetadataURIUpgradeable":[2407],"IERC1155ReceiverUpgradeable":[2093],"IERC1155Upgradeable":[2215],"IERC165Upgradeable":[3034],"IERC1822ProxiableUpgradeable":[141],"Initializable":[671],"OwnableUpgradeable":[131],"StorageSlotUpgradeable":[2752],"StringsUpgradeable":[2978],"UUPSUpgradeable":[807]},"id":3300,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3036,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:17"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":3037,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":672,"src":"56:75:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","id":3038,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":2693,"src":"132:74:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","id":3039,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":2979,"src":"207:74:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":3040,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":808,"src":"282:77:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":3041,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":132,"src":"360:75:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/openzepplin/ERC1155Upgradeable.sol","file":"./openzepplin/ERC1155Upgradeable.sol","id":3042,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":4721,"src":"436:46:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol","file":"./openzepplin/ERC1155SupplyUpgradeable.sol","id":3043,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":3487,"src":"483:52:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/HYDNSealStorage.sol","file":"./HYDNSealStorage.sol","id":3044,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":3309,"src":"536:31:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3045,"name":"Initializable","nameLocations":["596:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"596:13:17"},"id":3046,"nodeType":"InheritanceSpecifier","src":"596:13:17"},{"baseName":{"id":3047,"name":"ContextUpgradeable","nameLocations":["613:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"613:18:17"},"id":3048,"nodeType":"InheritanceSpecifier","src":"613:18:17"},{"baseName":{"id":3049,"name":"UUPSUpgradeable","nameLocations":["635:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":807,"src":"635:15:17"},"id":3050,"nodeType":"InheritanceSpecifier","src":"635:15:17"},{"baseName":{"id":3051,"name":"OwnableUpgradeable","nameLocations":["654:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"654:18:17"},"id":3052,"nodeType":"InheritanceSpecifier","src":"654:18:17"},{"baseName":{"id":3053,"name":"HYDNERC1155Upgradeable","nameLocations":["676:22:17"],"nodeType":"IdentifierPath","referencedDeclaration":4720,"src":"676:22:17"},"id":3054,"nodeType":"InheritanceSpecifier","src":"676:22:17"},{"baseName":{"id":3055,"name":"HYDNERC1155SupplyUpgradeable","nameLocations":["702:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":3486,"src":"702:28:17"},"id":3056,"nodeType":"InheritanceSpecifier","src":"702:28:17"},{"baseName":{"id":3057,"name":"HYDNSealStorage","nameLocations":["734:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":3308,"src":"734:15:17"},"id":3058,"nodeType":"InheritanceSpecifier","src":"734:15:17"}],"canonicalName":"HYDNSeal","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3299,"linearizedBaseContracts":[3299,3308,3486,4720,2407,2215,3022,3034,131,807,2692,510,141,671],"name":"HYDNSeal","nameLocation":"582:8:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3065,"nodeType":"Block","src":"819:33:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3062,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"825:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"825:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3064,"nodeType":"ExpressionStatement","src":"825:22:17"}]},"documentation":{"id":3059,"nodeType":"StructuredDocumentation","src":"754:48:17","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":3066,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3060,"nodeType":"ParameterList","parameters":[],"src":"816:2:17"},"returnParameters":{"id":3061,"nodeType":"ParameterList","parameters":[],"src":"819:0:17"},"scope":3299,"src":"805:47:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3104,"nodeType":"Block","src":"921:311:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3073,"name":"__Context_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"927:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"927:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3075,"nodeType":"ExpressionStatement","src":"927:16:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3076,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"949:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"949:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3078,"nodeType":"ExpressionStatement","src":"949:24:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3079,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"979:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"979:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3081,"nodeType":"ExpressionStatement","src":"979:16:17"},{"expression":{"arguments":[{"id":3083,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"1016:8:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3082,"name":"__ERC1155_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1001:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1001:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3085,"nodeType":"ExpressionStatement","src":"1001:24:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3086,"name":"__ERC1155Supply_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"1031:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1031:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3088,"nodeType":"ExpressionStatement","src":"1031:22:17"},{"expression":{"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3089,"name":"currentAuditId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"1059:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3090,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1076:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1082:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"1076:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31305f3030305f303030","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:10:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000_by_1","typeString":"int_const 10000000"},"value":"10_000_000"},"src":"1076:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1059:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3095,"nodeType":"ExpressionStatement","src":"1059:43:17"},{"expression":{"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3096,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"1108:4:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"4859444e205365616c","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1115:11:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb29f7bd83ccf3d4683995f417f142296798dab515a720716b4c816cab60d930","typeString":"literal_string \"HYDN Seal\""},"value":"HYDN Seal"},"src":"1108:18:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3099,"nodeType":"ExpressionStatement","src":"1108:18:17"},{"expression":{"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3100,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3305,"src":"1206:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"e29b91","id":3101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"unicodeString","lValueRequested":false,"nodeType":"Literal","src":"1215:12:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_45f7172e174c02ade33def1b29d6ae43208bc5a3d6742b83713e0570269e77c8","typeString":"literal_string hex\"e29b91\""},"value":"â›‘"},"src":"1206:21:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3103,"nodeType":"ExpressionStatement","src":"1206:21:17"}]},"functionSelector":"f62d1888","id":3105,"implemented":true,"kind":"function","modifiers":[{"id":3071,"kind":"modifierInvocation","modifierName":{"id":3070,"name":"initializer","nameLocations":["909:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"909:11:17"},"nodeType":"ModifierInvocation","src":"909:11:17"}],"name":"initialize","nameLocation":"865:10:17","nodeType":"FunctionDefinition","parameters":{"id":3069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3068,"mutability":"mutable","name":"_baseURI","nameLocation":"890:8:17","nodeType":"VariableDeclaration","scope":3105,"src":"876:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3067,"name":"string","nodeType":"ElementaryTypeName","src":"876:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"875:24:17"},"returnParameters":{"id":3072,"nodeType":"ParameterList","parameters":[],"src":"921:0:17"},"scope":3299,"src":"856:376:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3117,"nodeType":"Block","src":"1308:28:17","statements":[{"expression":{"arguments":[{"id":3114,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"1322:8:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3113,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"1314:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1314:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3116,"nodeType":"ExpressionStatement","src":"1314:17:17"}]},"functionSelector":"a99b396e","id":3118,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"hexValue":"32","id":3110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1305:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"id":3111,"kind":"modifierInvocation","modifierName":{"id":3109,"name":"reinitializer","nameLocations":["1291:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"1291:13:17"},"nodeType":"ModifierInvocation","src":"1291:16:17"}],"name":"reinitialize","nameLocation":"1245:12:17","nodeType":"FunctionDefinition","parameters":{"id":3108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3107,"mutability":"mutable","name":"_baseURI","nameLocation":"1272:8:17","nodeType":"VariableDeclaration","scope":3118,"src":"1258:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3106,"name":"string","nodeType":"ElementaryTypeName","src":"1258:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1257:24:17"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[],"src":"1308:0:17"},"scope":3299,"src":"1236:100:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[801],"body":{"id":3128,"nodeType":"Block","src":"1422:49:17","statements":[{"expression":{"id":3126,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"1428:17:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3127,"nodeType":"ExpressionStatement","src":"1428:17:17"}]},"id":3129,"implemented":true,"kind":"function","modifiers":[{"id":3124,"kind":"modifierInvocation","modifierName":{"id":3123,"name":"onlyOwner","nameLocations":["1412:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1412:9:17"},"nodeType":"ModifierInvocation","src":"1412:9:17"}],"name":"_authorizeUpgrade","nameLocation":"1349:17:17","nodeType":"FunctionDefinition","overrides":{"id":3122,"nodeType":"OverrideSpecifier","overrides":[],"src":"1403:8:17"},"parameters":{"id":3121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3120,"mutability":"mutable","name":"newImplementation","nameLocation":"1375:17:17","nodeType":"VariableDeclaration","scope":3129,"src":"1367:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3119,"name":"address","nodeType":"ElementaryTypeName","src":"1367:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1366:27:17"},"returnParameters":{"id":3125,"nodeType":"ParameterList","parameters":[],"src":"1422:0:17"},"scope":3299,"src":"1340:131:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3480,4539],"body":{"id":3160,"nodeType":"Block","src":"1724:77:17","statements":[{"expression":{"arguments":[{"id":3152,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"1757:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3153,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"1767:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3154,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"1773:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3155,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"1777:3:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3156,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"1782:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3157,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"1791:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3149,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1730:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HYDNSeal_$3299_$","typeString":"type(contract super HYDNSeal)"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1736:20:17","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":3480,"src":"1730:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1730:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3159,"nodeType":"ExpressionStatement","src":"1730:66:17"}]},"id":3161,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"1484:20:17","nodeType":"FunctionDefinition","overrides":{"id":3147,"nodeType":"OverrideSpecifier","overrides":[{"id":3145,"name":"HYDNERC1155SupplyUpgradeable","nameLocations":["1670:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":3486,"src":"1670:28:17"},{"id":3146,"name":"HYDNERC1155Upgradeable","nameLocations":["1700:22:17"],"nodeType":"IdentifierPath","referencedDeclaration":4720,"src":"1700:22:17"}],"src":"1661:62:17"},"parameters":{"id":3144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3131,"mutability":"mutable","name":"operator","nameLocation":"1518:8:17","nodeType":"VariableDeclaration","scope":3161,"src":"1510:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3130,"name":"address","nodeType":"ElementaryTypeName","src":"1510:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3133,"mutability":"mutable","name":"from","nameLocation":"1540:4:17","nodeType":"VariableDeclaration","scope":3161,"src":"1532:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3132,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3135,"mutability":"mutable","name":"to","nameLocation":"1558:2:17","nodeType":"VariableDeclaration","scope":3161,"src":"1550:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3134,"name":"address","nodeType":"ElementaryTypeName","src":"1550:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"ids","nameLocation":"1583:3:17","nodeType":"VariableDeclaration","scope":3161,"src":"1566:20:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3136,"name":"uint256","nodeType":"ElementaryTypeName","src":"1566:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3137,"nodeType":"ArrayTypeName","src":"1566:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3141,"mutability":"mutable","name":"amounts","nameLocation":"1609:7:17","nodeType":"VariableDeclaration","scope":3161,"src":"1592:24:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3139,"name":"uint256","nodeType":"ElementaryTypeName","src":"1592:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3140,"nodeType":"ArrayTypeName","src":"1592:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3143,"mutability":"mutable","name":"data","nameLocation":"1635:4:17","nodeType":"VariableDeclaration","scope":3161,"src":"1622:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3142,"name":"bytes","nodeType":"ElementaryTypeName","src":"1622:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1504:139:17"},"returnParameters":{"id":3148,"nodeType":"ParameterList","parameters":[],"src":"1724:0:17"},"scope":3299,"src":"1475:326:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[3757],"body":{"id":3179,"nodeType":"Block","src":"1921:51:17","statements":[{"expression":{"arguments":[{"hexValue":"4859444e5365616c3a207472616e73666572206e6f7420616c6c6f776564","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1934:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ffcd27d0545ae5d83e35f36d8b146e4c7d852c0e8c6bd9849c6f1c6d69b8640e","typeString":"literal_string \"HYDNSeal: transfer not allowed\""},"value":"HYDNSeal: transfer not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ffcd27d0545ae5d83e35f36d8b146e4c7d852c0e8c6bd9849c6f1c6d69b8640e","typeString":"literal_string \"HYDNSeal: transfer not allowed\""}],"id":3175,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1927:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1927:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3178,"nodeType":"ExpressionStatement","src":"1927:40:17"}]},"functionSelector":"f242432a","id":3180,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1814:16:17","nodeType":"FunctionDefinition","overrides":{"id":3173,"nodeType":"OverrideSpecifier","overrides":[],"src":"1912:8:17"},"parameters":{"id":3172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"1836:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3162,"name":"address","nodeType":"ElementaryTypeName","src":"1836:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"1849:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3164,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"1862:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3166,"name":"uint256","nodeType":"ElementaryTypeName","src":"1862:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"1875:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1875:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3180,"src":"1888:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3170,"name":"bytes","nodeType":"ElementaryTypeName","src":"1888:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1830:74:17"},"returnParameters":{"id":3174,"nodeType":"ParameterList","parameters":[],"src":"1921:0:17"},"scope":3299,"src":"1805:167:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3797],"body":{"id":3200,"nodeType":"Block","src":"2115:57:17","statements":[{"expression":{"arguments":[{"hexValue":"4859444e5365616c3a207472616e73666572206261746368206e6f7420616c6c6f776564","id":3197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2128:38:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_81c3f0ac137a93bc1fd51a97ddb9bc0526804f6e202e9dbd362da1d7654bb15b","typeString":"literal_string \"HYDNSeal: transfer batch not allowed\""},"value":"HYDNSeal: transfer batch not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_81c3f0ac137a93bc1fd51a97ddb9bc0526804f6e202e9dbd362da1d7654bb15b","typeString":"literal_string \"HYDNSeal: transfer batch not allowed\""}],"id":3196,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2121:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3199,"nodeType":"ExpressionStatement","src":"2121:46:17"}]},"functionSelector":"2eb2c2d6","id":3201,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"1985:21:17","nodeType":"FunctionDefinition","overrides":{"id":3194,"nodeType":"OverrideSpecifier","overrides":[],"src":"2106:8:17"},"parameters":{"id":3193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"2012:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3181,"name":"address","nodeType":"ElementaryTypeName","src":"2012:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"2025:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3183,"name":"address","nodeType":"ElementaryTypeName","src":"2025:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"2038:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2038:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3186,"nodeType":"ArrayTypeName","src":"2038:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"2060:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"2060:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3189,"nodeType":"ArrayTypeName","src":"2060:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"2082:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3191,"name":"bytes","nodeType":"ElementaryTypeName","src":"2082:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2006:92:17"},"returnParameters":{"id":3195,"nodeType":"ParameterList","parameters":[],"src":"2115:0:17"},"scope":3299,"src":"1976:196:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3592],"body":{"id":3231,"nodeType":"Block","src":"2252:165:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":3211,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2273:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3210,"name":"exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"2266:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2266:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4859444e5365616c3a20746f6b656e206e6f74206578697374696e67","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2284:30:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_3f84c69b1aba6fc99dba484e7c882a2ea70a6ea4d71ee67f03ae77d3d8f6d1e8","typeString":"literal_string \"HYDNSeal: token not existing\""},"value":"HYDNSeal: token not existing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3f84c69b1aba6fc99dba484e7c882a2ea70a6ea4d71ee67f03ae77d3d8f6d1e8","typeString":"literal_string \"HYDNSeal: token not existing\""}],"id":3209,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2258:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3215,"nodeType":"ExpressionStatement","src":"2258:57:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3222,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2362:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3220,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2352:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HYDNSeal_$3299_$","typeString":"type(contract super HYDNSeal)"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:3:17","memberName":"uri","nodeType":"MemberAccess","referencedDeclaration":3592,"src":"2352:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2352:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"id":3226,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2401:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3224,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"2373:18:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2978_$","typeString":"type(library StringsUpgradeable)"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2392:8:17","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2840,"src":"2373:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2373:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3218,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2335:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2339:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"2335:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:76:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2328:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3216,"name":"string","nodeType":"ElementaryTypeName","src":"2328:6:17","typeDescriptions":{}}},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2328:84:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3208,"id":3230,"nodeType":"Return","src":"2321:91:17"}]},"functionSelector":"0e89341c","id":3232,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"2185:3:17","nodeType":"FunctionDefinition","overrides":{"id":3205,"nodeType":"OverrideSpecifier","overrides":[],"src":"2219:8:17"},"parameters":{"id":3204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3203,"mutability":"mutable","name":"_tokenId","nameLocation":"2197:8:17","nodeType":"VariableDeclaration","scope":3232,"src":"2189:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3202,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2188:18:17"},"returnParameters":{"id":3208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3207,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3232,"src":"2237:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3206,"name":"string","nodeType":"ElementaryTypeName","src":"2237:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2236:15:17"},"scope":3299,"src":"2176:241:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3244,"nodeType":"Block","src":"2474:61:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3237,"name":"currentAuditId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"2487:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3238,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2504:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2510:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"2504:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31305f3030305f303030","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2520:10:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000_by_1","typeString":"int_const 10000000"},"value":"10_000_000"},"src":"2504:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2487:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3236,"id":3243,"nodeType":"Return","src":"2480:50:17"}]},"functionSelector":"18160ddd","id":3245,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2430:11:17","nodeType":"FunctionDefinition","parameters":{"id":3233,"nodeType":"ParameterList","parameters":[],"src":"2441:2:17"},"returnParameters":{"id":3236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3245,"src":"2465:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3234,"name":"uint256","nodeType":"ElementaryTypeName","src":"2465:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2464:9:17"},"scope":3299,"src":"2421:114:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3297,"nodeType":"Block","src":"2630:280:17","statements":[{"expression":{"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3255,"name":"currentAuditId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"2636:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2654:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2636:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3258,"nodeType":"ExpressionStatement","src":"2636:19:17"},{"assignments":[3260],"declarations":[{"constant":false,"id":3260,"mutability":"mutable","name":"id","nameLocation":"2669:2:17","nodeType":"VariableDeclaration","scope":3297,"src":"2661:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3259,"name":"uint256","nodeType":"ElementaryTypeName","src":"2661:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3262,"initialValue":{"id":3261,"name":"currentAuditId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"2674:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2661:27:17"},{"body":{"id":3293,"nodeType":"Block","src":"2742:147:17","statements":[{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":3277,"name":"_contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"2788:10:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3279,"indexExpression":{"id":3278,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"2799:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2788:13:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3275,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"2758:18:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2650_$","typeString":"type(library AddressUpgradeable)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2777:10:17","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"2758:29:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2758:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4859444e5365616c3a207265636569766572206973206e6f74206120636f6e7472616374","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2804:38:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_5c7954140cefba85008d6ba5fe42bda7421a9d6afee2f24ef8454b4191859c7c","typeString":"literal_string \"HYDNSeal: receiver is not a contract\""},"value":"HYDNSeal: receiver is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5c7954140cefba85008d6ba5fe42bda7421a9d6afee2f24ef8454b4191859c7c","typeString":"literal_string \"HYDNSeal: receiver is not a contract\""}],"id":3274,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2750:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:93:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3283,"nodeType":"ExpressionStatement","src":"2750:93:17"},{"expression":{"arguments":[{"baseExpression":{"id":3285,"name":"_contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"2857:10:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3287,"indexExpression":{"id":3286,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"2868:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2857:13:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3288,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"2872:2:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2876:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"","id":3290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2879:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3284,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4149,"src":"2851:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2851:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3292,"nodeType":"ExpressionStatement","src":"2851:31:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3267,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"2714:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3268,"name":"_contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"2718:10:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2729:6:17","memberName":"length","nodeType":"MemberAccess","src":"2718:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3294,"initializationExpression":{"assignments":[3264],"declarations":[{"constant":false,"id":3264,"mutability":"mutable","name":"i","nameLocation":"2707:1:17","nodeType":"VariableDeclaration","scope":3294,"src":"2699:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3263,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3266,"initialValue":{"hexValue":"30","id":3265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2711:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2699:13:17"},"loopExpression":{"expression":{"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2737:3:17","subExpression":{"id":3271,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"2737:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3273,"nodeType":"ExpressionStatement","src":"2737:3:17"},"nodeType":"ForStatement","src":"2694:195:17"},{"expression":{"hexValue":"74727565","id":3295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2901:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3254,"id":3296,"nodeType":"Return","src":"2894:11:17"}]},"functionSelector":"f722c17d","id":3298,"implemented":true,"kind":"function","modifiers":[{"id":3251,"kind":"modifierInvocation","modifierName":{"id":3250,"name":"onlyOwner","nameLocations":["2597:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2597:9:17"},"nodeType":"ModifierInvocation","src":"2597:9:17"}],"name":"mintSeal","nameLocation":"2548:8:17","nodeType":"FunctionDefinition","parameters":{"id":3249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3248,"mutability":"mutable","name":"_contracts","nameLocation":"2576:10:17","nodeType":"VariableDeclaration","scope":3298,"src":"2557:29:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3246,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3247,"nodeType":"ArrayTypeName","src":"2557:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2556:31:17"},"returnParameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"success","nameLocation":"2621:7:17","nodeType":"VariableDeclaration","scope":3298,"src":"2616:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3252,"name":"bool","nodeType":"ElementaryTypeName","src":"2616:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2615:14:17"},"scope":3299,"src":"2539:371:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3300,"src":"573:2339:17","usedErrors":[]}],"src":"32:2881:17"},"id":17},"contracts/HYDNSealStorage.sol":{"ast":{"absolutePath":"contracts/HYDNSealStorage.sol","exportedSymbols":{"HYDNSealStorage":[3308]},"id":3309,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3301,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:18"},{"abstract":true,"baseContracts":[],"canonicalName":"HYDNSealStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3308,"linearizedBaseContracts":[3308],"name":"HYDNSealStorage","nameLocation":"79:15:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"06fdde03","id":3303,"mutability":"mutable","name":"name","nameLocation":"113:4:18","nodeType":"VariableDeclaration","scope":3308,"src":"99:18:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3302,"name":"string","nodeType":"ElementaryTypeName","src":"99:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"95d89b41","id":3305,"mutability":"mutable","name":"symbol","nameLocation":"135:6:18","nodeType":"VariableDeclaration","scope":3308,"src":"121:20:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3304,"name":"string","nodeType":"ElementaryTypeName","src":"121:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"9458e718","id":3307,"mutability":"mutable","name":"currentAuditId","nameLocation":"160:14:18","nodeType":"VariableDeclaration","scope":3308,"src":"145:29:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3306,"name":"uint256","nodeType":"ElementaryTypeName","src":"145:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"}],"scope":3309,"src":"61:116:18","usedErrors":[]}],"src":"32:146:18"},"id":18},"contracts/openzepplin/ERC1155SupplyUpgradeable.sol":{"ast":{"absolutePath":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ContextUpgradeable":[2692],"ERC1155SupplyUpgradeable":[2392],"ERC1155Upgradeable":[2052],"ERC165Upgradeable":[3022],"HYDNERC1155SupplyUpgradeable":[3486],"HYDNERC1155Upgradeable":[4720],"IERC1155MetadataURIUpgradeable":[2407],"IERC1155ReceiverUpgradeable":[2093],"IERC1155Upgradeable":[2215],"IERC165Upgradeable":[3034],"Initializable":[671]},"id":3487,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3310,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"227:23:19"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","id":3311,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3487,"sourceUnit":2393,"src":"252:99:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/openzepplin/ERC1155Upgradeable.sol","file":"./ERC1155Upgradeable.sol","id":3312,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3487,"sourceUnit":4721,"src":"352:34:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":3313,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3487,"sourceUnit":672,"src":"387:75:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3315,"name":"Initializable","nameLocations":["859:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"859:13:19"},"id":3316,"nodeType":"InheritanceSpecifier","src":"859:13:19"},{"baseName":{"id":3317,"name":"HYDNERC1155Upgradeable","nameLocations":["874:22:19"],"nodeType":"IdentifierPath","referencedDeclaration":4720,"src":"874:22:19"},"id":3318,"nodeType":"InheritanceSpecifier","src":"874:22:19"}],"canonicalName":"HYDNERC1155SupplyUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3314,"nodeType":"StructuredDocumentation","src":"464:344:19","text":" @dev Extension of ERC1155 that adds tracking of total supply per id.\n Useful for scenarios where Fungible and Non-fungible tokens have to be\n clearly identified. Note: While a totalSupply of 1 might mean the\n corresponding is an NFT, there is no guarantees that no other token with the\n same id are not going to be minted."},"fullyImplemented":true,"id":3486,"linearizedBaseContracts":[3486,4720,2407,2215,3022,3034,2692,671],"name":"HYDNERC1155SupplyUpgradeable","nameLocation":"827:28:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3323,"nodeType":"Block","src":"959:2:19","statements":[]},"id":3324,"implemented":true,"kind":"function","modifiers":[{"id":3321,"kind":"modifierInvocation","modifierName":{"id":3320,"name":"onlyInitializing","nameLocations":["942:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"942:16:19"},"nodeType":"ModifierInvocation","src":"942:16:19"}],"name":"__ERC1155Supply_init","nameLocation":"910:20:19","nodeType":"FunctionDefinition","parameters":{"id":3319,"nodeType":"ParameterList","parameters":[],"src":"930:2:19"},"returnParameters":{"id":3322,"nodeType":"ParameterList","parameters":[],"src":"959:0:19"},"scope":3486,"src":"901:60:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3329,"nodeType":"Block","src":"1033:2:19","statements":[]},"id":3330,"implemented":true,"kind":"function","modifiers":[{"id":3327,"kind":"modifierInvocation","modifierName":{"id":3326,"name":"onlyInitializing","nameLocations":["1016:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1016:16:19"},"nodeType":"ModifierInvocation","src":"1016:16:19"}],"name":"__ERC1155Supply_init_unchained","nameLocation":"974:30:19","nodeType":"FunctionDefinition","parameters":{"id":3325,"nodeType":"ParameterList","parameters":[],"src":"1004:2:19"},"returnParameters":{"id":3328,"nodeType":"ParameterList","parameters":[],"src":"1033:0:19"},"scope":3486,"src":"965:70:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":3334,"mutability":"mutable","name":"_totalSupply","nameLocation":"1075:12:19","nodeType":"VariableDeclaration","scope":3486,"src":"1039:48:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":3333,"keyType":{"id":3331,"name":"uint256","nodeType":"ElementaryTypeName","src":"1047:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1039:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":3332,"name":"uint256","nodeType":"ElementaryTypeName","src":"1058:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":3346,"nodeType":"Block","src":"1228:34:19","statements":[{"expression":{"baseExpression":{"id":3342,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"1241:12:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3344,"indexExpression":{"id":3343,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"1254:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1241:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3341,"id":3345,"nodeType":"Return","src":"1234:23:19"}]},"documentation":{"id":3335,"nodeType":"StructuredDocumentation","src":"1092:62:19","text":" @dev Total amount of tokens in with a given id."},"functionSelector":"bd85b039","id":3347,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1166:11:19","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3337,"mutability":"mutable","name":"id","nameLocation":"1186:2:19","nodeType":"VariableDeclaration","scope":3347,"src":"1178:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"1178:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1177:12:19"},"returnParameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3347,"src":"1219:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:19"},"scope":3486,"src":"1157:105:19","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3362,"nodeType":"Block","src":"1410:66:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3357,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"1464:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3355,"name":"HYDNERC1155SupplyUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"1423:28:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_HYDNERC1155SupplyUpgradeable_$3486_$","typeString":"type(contract HYDNERC1155SupplyUpgradeable)"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1452:11:19","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":3347,"src":"1423:40:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1423:44:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1470:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1423:48:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3354,"id":3361,"nodeType":"Return","src":"1416:55:19"}]},"documentation":{"id":3348,"nodeType":"StructuredDocumentation","src":"1266:78:19","text":" @dev Indicates whether any token exist with a given id, or not."},"functionSelector":"4f558e79","id":3363,"implemented":true,"kind":"function","modifiers":[],"name":"exists","nameLocation":"1356:6:19","nodeType":"FunctionDefinition","parameters":{"id":3351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3350,"mutability":"mutable","name":"id","nameLocation":"1371:2:19","nodeType":"VariableDeclaration","scope":3363,"src":"1363:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3349,"name":"uint256","nodeType":"ElementaryTypeName","src":"1363:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1362:12:19"},"returnParameters":{"id":3354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3363,"src":"1404:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3352,"name":"bool","nodeType":"ElementaryTypeName","src":"1404:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1403:6:19"},"scope":3486,"src":"1347:129:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4539],"body":{"id":3479,"nodeType":"Block","src":"1733:571:19","statements":[{"expression":{"arguments":[{"id":3385,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"1766:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3386,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"1776:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3387,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"1782:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3388,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"1786:3:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3389,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"1791:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3390,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"1800:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3382,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1739:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HYDNERC1155SupplyUpgradeable_$3486_$","typeString":"type(contract super HYDNERC1155SupplyUpgradeable)"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1745:20:19","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":4539,"src":"1739:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3392,"nodeType":"ExpressionStatement","src":"1739:66:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3393,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"1816:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1832:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1824:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3394,"name":"address","nodeType":"ElementaryTypeName","src":"1824:7:19","typeDescriptions":{}}},"id":3397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1824:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1816:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3423,"nodeType":"IfStatement","src":"1812:132:19","trueBody":{"id":3422,"nodeType":"Block","src":"1836:108:19","statements":[{"body":{"id":3420,"nodeType":"Block","src":"1885:53:19","statements":[{"expression":{"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3410,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"1895:12:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3414,"indexExpression":{"baseExpression":{"id":3411,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"1908:3:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3413,"indexExpression":{"id":3412,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"1912:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1908:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1895:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":3415,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"1919:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3417,"indexExpression":{"id":3416,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"1927:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1919:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1895:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3419,"nodeType":"ExpressionStatement","src":"1895:34:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3403,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"1864:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3404,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"1868:3:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1872:6:19","memberName":"length","nodeType":"MemberAccess","src":"1868:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1864:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3421,"initializationExpression":{"assignments":[3400],"declarations":[{"constant":false,"id":3400,"mutability":"mutable","name":"i","nameLocation":"1857:1:19","nodeType":"VariableDeclaration","scope":3421,"src":"1849:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3399,"name":"uint256","nodeType":"ElementaryTypeName","src":"1849:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3402,"initialValue":{"hexValue":"30","id":3401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1861:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1849:13:19"},"loopExpression":{"expression":{"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1880:3:19","subExpression":{"id":3407,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"1882:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3409,"nodeType":"ExpressionStatement","src":"1880:3:19"},"nodeType":"ForStatement","src":"1844:94:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3424,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"1954:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1968:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1960:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3425,"name":"address","nodeType":"ElementaryTypeName","src":"1960:7:19","typeDescriptions":{}}},"id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1960:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1954:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3478,"nodeType":"IfStatement","src":"1950:350:19","trueBody":{"id":3477,"nodeType":"Block","src":"1972:328:19","statements":[{"body":{"id":3475,"nodeType":"Block","src":"2021:273:19","statements":[{"assignments":[3442],"declarations":[{"constant":false,"id":3442,"mutability":"mutable","name":"id","nameLocation":"2039:2:19","nodeType":"VariableDeclaration","scope":3475,"src":"2031:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3441,"name":"uint256","nodeType":"ElementaryTypeName","src":"2031:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3446,"initialValue":{"baseExpression":{"id":3443,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"2044:3:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3445,"indexExpression":{"id":3444,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"2048:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2044:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2031:19:19"},{"assignments":[3448],"declarations":[{"constant":false,"id":3448,"mutability":"mutable","name":"amount","nameLocation":"2068:6:19","nodeType":"VariableDeclaration","scope":3475,"src":"2060:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3447,"name":"uint256","nodeType":"ElementaryTypeName","src":"2060:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3452,"initialValue":{"baseExpression":{"id":3449,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2077:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3451,"indexExpression":{"id":3450,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"2085:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2077:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2060:27:19"},{"assignments":[3454],"declarations":[{"constant":false,"id":3454,"mutability":"mutable","name":"supply","nameLocation":"2105:6:19","nodeType":"VariableDeclaration","scope":3475,"src":"2097:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3453,"name":"uint256","nodeType":"ElementaryTypeName","src":"2097:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3458,"initialValue":{"baseExpression":{"id":3455,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"2114:12:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3457,"indexExpression":{"id":3456,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"2127:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2114:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2097:33:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3460,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"2148:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3461,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"2158:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e74206578636565647320746f74616c537570706c79","id":3463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2166:42:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4","typeString":"literal_string \"ERC1155: burn amount exceeds totalSupply\""},"value":"ERC1155: burn amount exceeds totalSupply"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4","typeString":"literal_string \"ERC1155: burn amount exceeds totalSupply\""}],"id":3459,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2140:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2140:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3465,"nodeType":"ExpressionStatement","src":"2140:69:19"},{"id":3474,"nodeType":"UncheckedBlock","src":"2219:67:19","statements":[{"expression":{"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3466,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"2241:12:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3468,"indexExpression":{"id":3467,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"2254:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2241:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3469,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"2260:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3470,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"2269:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2260:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2241:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3473,"nodeType":"ExpressionStatement","src":"2241:34:19"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3434,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"2000:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3435,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"2004:3:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2008:6:19","memberName":"length","nodeType":"MemberAccess","src":"2004:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2000:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3476,"initializationExpression":{"assignments":[3431],"declarations":[{"constant":false,"id":3431,"mutability":"mutable","name":"i","nameLocation":"1993:1:19","nodeType":"VariableDeclaration","scope":3476,"src":"1985:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3430,"name":"uint256","nodeType":"ElementaryTypeName","src":"1985:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3433,"initialValue":{"hexValue":"30","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1997:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1985:13:19"},"loopExpression":{"expression":{"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2016:3:19","subExpression":{"id":3438,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"2018:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3440,"nodeType":"ExpressionStatement","src":"2016:3:19"},"nodeType":"ForStatement","src":"1980:314:19"}]}}]},"documentation":{"id":3364,"nodeType":"StructuredDocumentation","src":"1480:55:19","text":" @dev See {ERC1155-_beforeTokenTransfer}."},"id":3480,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"1547:20:19","nodeType":"FunctionDefinition","overrides":{"id":3380,"nodeType":"OverrideSpecifier","overrides":[],"src":"1724:8:19"},"parameters":{"id":3379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"operator","nameLocation":"1581:8:19","nodeType":"VariableDeclaration","scope":3480,"src":"1573:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3365,"name":"address","nodeType":"ElementaryTypeName","src":"1573:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3368,"mutability":"mutable","name":"from","nameLocation":"1603:4:19","nodeType":"VariableDeclaration","scope":3480,"src":"1595:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3367,"name":"address","nodeType":"ElementaryTypeName","src":"1595:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3370,"mutability":"mutable","name":"to","nameLocation":"1621:2:19","nodeType":"VariableDeclaration","scope":3480,"src":"1613:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3369,"name":"address","nodeType":"ElementaryTypeName","src":"1613:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3373,"mutability":"mutable","name":"ids","nameLocation":"1646:3:19","nodeType":"VariableDeclaration","scope":3480,"src":"1629:20:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3371,"name":"uint256","nodeType":"ElementaryTypeName","src":"1629:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3372,"nodeType":"ArrayTypeName","src":"1629:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3376,"mutability":"mutable","name":"amounts","nameLocation":"1672:7:19","nodeType":"VariableDeclaration","scope":3480,"src":"1655:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"1655:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3375,"nodeType":"ArrayTypeName","src":"1655:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3378,"mutability":"mutable","name":"data","nameLocation":"1698:4:19","nodeType":"VariableDeclaration","scope":3480,"src":"1685:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3377,"name":"bytes","nodeType":"ElementaryTypeName","src":"1685:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1567:139:19"},"returnParameters":{"id":3381,"nodeType":"ParameterList","parameters":[],"src":"1733:0:19"},"scope":3486,"src":"1538:766:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3481,"nodeType":"StructuredDocumentation","src":"2308:246:19","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3485,"mutability":"mutable","name":"__gap","nameLocation":"2577:5:19","nodeType":"VariableDeclaration","scope":3486,"src":"2557:25:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":3482,"name":"uint256","nodeType":"ElementaryTypeName","src":"2557:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3484,"length":{"hexValue":"3439","id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2565:2:19","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2557:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":3487,"src":"809:1776:19","usedErrors":[]}],"src":"227:2359:19"},"id":19},"contracts/openzepplin/ERC1155Upgradeable.sol":{"ast":{"absolutePath":"contracts/openzepplin/ERC1155Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2650],"ContextUpgradeable":[2692],"ERC1155Upgradeable":[2052],"ERC165Upgradeable":[3022],"HYDNERC1155Upgradeable":[4720],"IERC1155MetadataURIUpgradeable":[2407],"IERC1155ReceiverUpgradeable":[2093],"IERC1155Upgradeable":[2215],"IERC165Upgradeable":[3034],"Initializable":[671]},"id":4721,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3488,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"315:23:20"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","id":3489,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":2053,"src":"339:82:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","id":3490,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":2216,"src":"422:83:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","id":3491,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":2094,"src":"506:91:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","id":3492,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":2408,"src":"598:105:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","id":3493,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":2651,"src":"704:74:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","id":3494,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":2693,"src":"779:74:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","id":3495,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":3023,"src":"854:87:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":3496,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4721,"sourceUnit":672,"src":"942:75:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3498,"name":"Initializable","nameLocations":["1271:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":671,"src":"1271:13:20"},"id":3499,"nodeType":"InheritanceSpecifier","src":"1271:13:20"},{"baseName":{"id":3500,"name":"ContextUpgradeable","nameLocations":["1288:18:20"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"1288:18:20"},"id":3501,"nodeType":"InheritanceSpecifier","src":"1288:18:20"},{"baseName":{"id":3502,"name":"ERC165Upgradeable","nameLocations":["1310:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"1310:17:20"},"id":3503,"nodeType":"InheritanceSpecifier","src":"1310:17:20"},{"baseName":{"id":3504,"name":"IERC1155Upgradeable","nameLocations":["1331:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":2215,"src":"1331:19:20"},"id":3505,"nodeType":"InheritanceSpecifier","src":"1331:19:20"},{"baseName":{"id":3506,"name":"IERC1155MetadataURIUpgradeable","nameLocations":["1354:30:20"],"nodeType":"IdentifierPath","referencedDeclaration":2407,"src":"1354:30:20"},"id":3507,"nodeType":"InheritanceSpecifier","src":"1354:30:20"}],"canonicalName":"HYDNERC1155Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3497,"nodeType":"StructuredDocumentation","src":"1019:214:20","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155\n _Available since v3.1._"},"fullyImplemented":true,"id":4720,"linearizedBaseContracts":[4720,2407,2215,3022,3034,2692,671],"name":"HYDNERC1155Upgradeable","nameLocation":"1243:22:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3510,"libraryName":{"id":3508,"name":"AddressUpgradeable","nameLocations":["1395:18:20"],"nodeType":"IdentifierPath","referencedDeclaration":2650,"src":"1395:18:20"},"nodeType":"UsingForDirective","src":"1389:37:20","typeName":{"id":3509,"name":"address","nodeType":"ElementaryTypeName","src":"1418:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":3516,"mutability":"mutable","name":"_balances","nameLocation":"1533:9:20","nodeType":"VariableDeclaration","scope":4720,"src":"1477:65:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":3515,"keyType":{"id":3511,"name":"uint256","nodeType":"ElementaryTypeName","src":"1485:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1477:47:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueType":{"id":3514,"keyType":{"id":3512,"name":"address","nodeType":"ElementaryTypeName","src":"1504:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1496:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3513,"name":"uint256","nodeType":"ElementaryTypeName","src":"1515:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":3522,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1648:18:20","nodeType":"VariableDeclaration","scope":4720,"src":"1595:71:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":3521,"keyType":{"id":3517,"name":"address","nodeType":"ElementaryTypeName","src":"1603:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1595:44:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":3520,"keyType":{"id":3518,"name":"address","nodeType":"ElementaryTypeName","src":"1622:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1614:24:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3519,"name":"bool","nodeType":"ElementaryTypeName","src":"1633:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":3524,"mutability":"mutable","name":"_uri","nameLocation":"1798:4:20","nodeType":"VariableDeclaration","scope":4720,"src":"1783:19:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3523,"name":"string","nodeType":"ElementaryTypeName","src":"1783:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":3536,"nodeType":"Block","src":"1914:41:20","statements":[{"expression":{"arguments":[{"id":3533,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"1945:4:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3532,"name":"__ERC1155_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"1920:24:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1920:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3535,"nodeType":"ExpressionStatement","src":"1920:30:20"}]},"documentation":{"id":3525,"nodeType":"StructuredDocumentation","src":"1807:34:20","text":" @dev See {_setURI}."},"id":3537,"implemented":true,"kind":"function","modifiers":[{"id":3530,"kind":"modifierInvocation","modifierName":{"id":3529,"name":"onlyInitializing","nameLocations":["1897:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1897:16:20"},"nodeType":"ModifierInvocation","src":"1897:16:20"}],"name":"__ERC1155_init","nameLocation":"1853:14:20","nodeType":"FunctionDefinition","parameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3527,"mutability":"mutable","name":"uri_","nameLocation":"1882:4:20","nodeType":"VariableDeclaration","scope":3537,"src":"1868:18:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3526,"name":"string","nodeType":"ElementaryTypeName","src":"1868:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1867:20:20"},"returnParameters":{"id":3531,"nodeType":"ParameterList","parameters":[],"src":"1914:0:20"},"scope":4720,"src":"1844:111:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3548,"nodeType":"Block","src":"2039:24:20","statements":[{"expression":{"arguments":[{"id":3545,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"2053:4:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3544,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"2045:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2045:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3547,"nodeType":"ExpressionStatement","src":"2045:13:20"}]},"id":3549,"implemented":true,"kind":"function","modifiers":[{"id":3542,"kind":"modifierInvocation","modifierName":{"id":3541,"name":"onlyInitializing","nameLocations":["2022:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":634,"src":"2022:16:20"},"nodeType":"ModifierInvocation","src":"2022:16:20"}],"name":"__ERC1155_init_unchained","nameLocation":"1968:24:20","nodeType":"FunctionDefinition","parameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"uri_","nameLocation":"2007:4:20","nodeType":"VariableDeclaration","scope":3549,"src":"1993:18:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3538,"name":"string","nodeType":"ElementaryTypeName","src":"1993:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1992:20:20"},"returnParameters":{"id":3543,"nodeType":"ParameterList","parameters":[],"src":"2039:0:20"},"scope":4720,"src":"1959:104:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3016,3033],"body":{"id":3579,"nodeType":"Block","src":"2274:195:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3560,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"2293:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3562,"name":"IERC1155Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"2313:19:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2215_$","typeString":"type(contract IERC1155Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2215_$","typeString":"type(contract IERC1155Upgradeable)"}],"id":3561,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2308:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Upgradeable_$2215","typeString":"type(contract IERC1155Upgradeable)"}},"id":3564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2334:11:20","memberName":"interfaceId","nodeType":"MemberAccess","src":"2308:37:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2293:52:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3566,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"2355:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3568,"name":"IERC1155MetadataURIUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"2375:30:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2407_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2407_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}],"id":3567,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2370:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2370:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURIUpgradeable_$2407","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}},"id":3570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2407:11:20","memberName":"interfaceId","nodeType":"MemberAccess","src":"2370:48:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2355:63:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2293:125:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3575,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"2452:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3573,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2428:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HYDNERC1155Upgradeable_$4720_$","typeString":"type(contract super HYDNERC1155Upgradeable)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2434:17:20","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3016,"src":"2428:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2428:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2293:171:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3559,"id":3578,"nodeType":"Return","src":"2280:184:20"}]},"documentation":{"id":3550,"nodeType":"StructuredDocumentation","src":"2067:52:20","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3580,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2131:17:20","nodeType":"FunctionDefinition","overrides":{"id":3556,"nodeType":"OverrideSpecifier","overrides":[{"id":3554,"name":"ERC165Upgradeable","nameLocations":["2214:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"2214:17:20"},{"id":3555,"name":"IERC165Upgradeable","nameLocations":["2233:18:20"],"nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"2233:18:20"}],"src":"2205:47:20"},"parameters":{"id":3553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3552,"mutability":"mutable","name":"interfaceId","nameLocation":"2156:11:20","nodeType":"VariableDeclaration","scope":3580,"src":"2149:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3551,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2149:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2148:20:20"},"returnParameters":{"id":3559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3580,"src":"2266:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3557,"name":"bool","nodeType":"ElementaryTypeName","src":"2266:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2265:6:20"},"scope":4720,"src":"2122:347:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2406],"body":{"id":3591,"nodeType":"Block","src":"2921:22:20","statements":[{"expression":{"id":3589,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"2934:4:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3588,"id":3590,"nodeType":"Return","src":"2927:11:20"}]},"documentation":{"id":3581,"nodeType":"StructuredDocumentation","src":"2473:370:20","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":3592,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"2855:3:20","nodeType":"FunctionDefinition","overrides":{"id":3585,"nodeType":"OverrideSpecifier","overrides":[],"src":"2888:8:20"},"parameters":{"id":3584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3592,"src":"2859:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3582,"name":"uint256","nodeType":"ElementaryTypeName","src":"2859:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2858:9:20"},"returnParameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3592,"src":"2906:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3586,"name":"string","nodeType":"ElementaryTypeName","src":"2906:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2905:15:20"},"scope":4720,"src":"2846:97:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2153],"body":{"id":3619,"nodeType":"Block","src":"3164:122:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3604,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"3178:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3197:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3189:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3605,"name":"address","nodeType":"ElementaryTypeName","src":"3189:7:20","typeDescriptions":{}}},"id":3608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3189:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3178:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3201:44:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""},"value":"ERC1155: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""}],"id":3603,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3170:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3170:76:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3612,"nodeType":"ExpressionStatement","src":"3170:76:20"},{"expression":{"baseExpression":{"baseExpression":{"id":3613,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"3259:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3615,"indexExpression":{"id":3614,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"3269:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3259:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3617,"indexExpression":{"id":3616,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"3273:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3259:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3602,"id":3618,"nodeType":"Return","src":"3252:29:20"}]},"documentation":{"id":3593,"nodeType":"StructuredDocumentation","src":"2947:119:20","text":" @dev See {IERC1155-balanceOf}.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":3620,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3078:9:20","nodeType":"FunctionDefinition","overrides":{"id":3599,"nodeType":"OverrideSpecifier","overrides":[],"src":"3137:8:20"},"parameters":{"id":3598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3595,"mutability":"mutable","name":"account","nameLocation":"3096:7:20","nodeType":"VariableDeclaration","scope":3620,"src":"3088:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3594,"name":"address","nodeType":"ElementaryTypeName","src":"3088:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3597,"mutability":"mutable","name":"id","nameLocation":"3113:2:20","nodeType":"VariableDeclaration","scope":3620,"src":"3105:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"3105:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3087:29:20"},"returnParameters":{"id":3602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3620,"src":"3155:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3600,"name":"uint256","nodeType":"ElementaryTypeName","src":"3155:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3154:9:20"},"scope":4720,"src":"3069:217:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2166],"body":{"id":3683,"nodeType":"Block","src":"3578:307:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3635,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"3592:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3601:6:20","memberName":"length","nodeType":"MemberAccess","src":"3592:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3637,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"3611:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3615:6:20","memberName":"length","nodeType":"MemberAccess","src":"3611:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3592:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368","id":3640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3623:43:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""},"value":"ERC1155: accounts and ids length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""}],"id":3634,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3584:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3584:83:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3642,"nodeType":"ExpressionStatement","src":"3584:83:20"},{"assignments":[3647],"declarations":[{"constant":false,"id":3647,"mutability":"mutable","name":"batchBalances","nameLocation":"3691:13:20","nodeType":"VariableDeclaration","scope":3683,"src":"3674:30:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3645,"name":"uint256","nodeType":"ElementaryTypeName","src":"3674:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3646,"nodeType":"ArrayTypeName","src":"3674:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3654,"initialValue":{"arguments":[{"expression":{"id":3651,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"3721:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3730:6:20","memberName":"length","nodeType":"MemberAccess","src":"3721:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3707:13:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":3648,"name":"uint256","nodeType":"ElementaryTypeName","src":"3711:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3649,"nodeType":"ArrayTypeName","src":"3711:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3707:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3674:63:20"},{"body":{"id":3679,"nodeType":"Block","src":"3790:64:20","statements":[{"expression":{"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3666,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"3798:13:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3668,"indexExpression":{"id":3667,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"3812:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3798:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":3670,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"3827:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3672,"indexExpression":{"id":3671,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"3836:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3827:11:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3673,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"3840:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3675,"indexExpression":{"id":3674,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"3844:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3840:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3669,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"3817:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3817:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3798:49:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3678,"nodeType":"ExpressionStatement","src":"3798:49:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3659,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"3764:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3660,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"3768:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3777:6:20","memberName":"length","nodeType":"MemberAccess","src":"3768:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3764:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3680,"initializationExpression":{"assignments":[3656],"declarations":[{"constant":false,"id":3656,"mutability":"mutable","name":"i","nameLocation":"3757:1:20","nodeType":"VariableDeclaration","scope":3680,"src":"3749:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3655,"name":"uint256","nodeType":"ElementaryTypeName","src":"3749:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3658,"initialValue":{"hexValue":"30","id":3657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3761:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3749:13:20"},"loopExpression":{"expression":{"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3785:3:20","subExpression":{"id":3663,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"3787:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3665,"nodeType":"ExpressionStatement","src":"3785:3:20"},"nodeType":"ForStatement","src":"3744:110:20"},{"expression":{"id":3681,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"3867:13:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3633,"id":3682,"nodeType":"Return","src":"3860:20:20"}]},"documentation":{"id":3621,"nodeType":"StructuredDocumentation","src":"3290:134:20","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":3684,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"3436:14:20","nodeType":"FunctionDefinition","overrides":{"id":3629,"nodeType":"OverrideSpecifier","overrides":[],"src":"3536:8:20"},"parameters":{"id":3628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3624,"mutability":"mutable","name":"accounts","nameLocation":"3468:8:20","nodeType":"VariableDeclaration","scope":3684,"src":"3451:25:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3622,"name":"address","nodeType":"ElementaryTypeName","src":"3451:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3623,"nodeType":"ArrayTypeName","src":"3451:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3627,"mutability":"mutable","name":"ids","nameLocation":"3495:3:20","nodeType":"VariableDeclaration","scope":3684,"src":"3478:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3625,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3626,"nodeType":"ArrayTypeName","src":"3478:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3450:49:20"},"returnParameters":{"id":3633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3684,"src":"3558:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3630,"name":"uint256","nodeType":"ElementaryTypeName","src":"3558:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3631,"nodeType":"ArrayTypeName","src":"3558:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3557:18:20"},"scope":4720,"src":"3427:458:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2174],"body":{"id":3700,"nodeType":"Block","src":"4029:63:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3694,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4054:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4054:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3696,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"4068:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3697,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"4078:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3693,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"4035:18:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4035:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3699,"nodeType":"ExpressionStatement","src":"4035:52:20"}]},"documentation":{"id":3685,"nodeType":"StructuredDocumentation","src":"3889:53:20","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":3701,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3954:17:20","nodeType":"FunctionDefinition","overrides":{"id":3691,"nodeType":"OverrideSpecifier","overrides":[],"src":"4020:8:20"},"parameters":{"id":3690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3687,"mutability":"mutable","name":"operator","nameLocation":"3980:8:20","nodeType":"VariableDeclaration","scope":3701,"src":"3972:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3686,"name":"address","nodeType":"ElementaryTypeName","src":"3972:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3689,"mutability":"mutable","name":"approved","nameLocation":"3995:8:20","nodeType":"VariableDeclaration","scope":3701,"src":"3990:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3688,"name":"bool","nodeType":"ElementaryTypeName","src":"3990:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3971:33:20"},"returnParameters":{"id":3692,"nodeType":"ParameterList","parameters":[],"src":"4029:0:20"},"scope":4720,"src":"3945:147:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2184],"body":{"id":3718,"nodeType":"Block","src":"4256:55:20","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3712,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"4269:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3714,"indexExpression":{"id":3713,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"4288:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4269:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3716,"indexExpression":{"id":3715,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4297:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4269:37:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3711,"id":3717,"nodeType":"Return","src":"4262:44:20"}]},"documentation":{"id":3702,"nodeType":"StructuredDocumentation","src":"4096:52:20","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":3719,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4160:16:20","nodeType":"FunctionDefinition","overrides":{"id":3708,"nodeType":"OverrideSpecifier","overrides":[],"src":"4232:8:20"},"parameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"mutability":"mutable","name":"account","nameLocation":"4185:7:20","nodeType":"VariableDeclaration","scope":3719,"src":"4177:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3703,"name":"address","nodeType":"ElementaryTypeName","src":"4177:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3706,"mutability":"mutable","name":"operator","nameLocation":"4202:8:20","nodeType":"VariableDeclaration","scope":3719,"src":"4194:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3705,"name":"address","nodeType":"ElementaryTypeName","src":"4194:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4176:35:20"},"returnParameters":{"id":3711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3719,"src":"4250:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3709,"name":"bool","nodeType":"ElementaryTypeName","src":"4250:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4249:6:20"},"scope":4720,"src":"4151:160:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2198],"body":{"id":3756,"nodeType":"Block","src":"4517:200:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3735,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4538:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3736,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4546:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4546:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4538:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3740,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4579:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3741,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4585:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4585:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3739,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"4562:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4538:60:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":3745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4606:49:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""},"value":"ERC1155: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""}],"id":3734,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4523:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4523:138:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3747,"nodeType":"ExpressionStatement","src":"4523:138:20"},{"expression":{"arguments":[{"id":3749,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"4685:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3750,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"4691:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3751,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"4695:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3752,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"4699:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3753,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3730,"src":"4707:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3748,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"4667:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4667:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3755,"nodeType":"ExpressionStatement","src":"4667:45:20"}]},"documentation":{"id":3720,"nodeType":"StructuredDocumentation","src":"4315:52:20","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":3757,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4379:16:20","nodeType":"FunctionDefinition","overrides":{"id":3732,"nodeType":"OverrideSpecifier","overrides":[],"src":"4508:8:20"},"parameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"mutability":"mutable","name":"from","nameLocation":"4409:4:20","nodeType":"VariableDeclaration","scope":3757,"src":"4401:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3721,"name":"address","nodeType":"ElementaryTypeName","src":"4401:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3724,"mutability":"mutable","name":"to","nameLocation":"4427:2:20","nodeType":"VariableDeclaration","scope":3757,"src":"4419:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3723,"name":"address","nodeType":"ElementaryTypeName","src":"4419:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3726,"mutability":"mutable","name":"id","nameLocation":"4443:2:20","nodeType":"VariableDeclaration","scope":3757,"src":"4435:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3725,"name":"uint256","nodeType":"ElementaryTypeName","src":"4435:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3728,"mutability":"mutable","name":"amount","nameLocation":"4459:6:20","nodeType":"VariableDeclaration","scope":3757,"src":"4451:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3727,"name":"uint256","nodeType":"ElementaryTypeName","src":"4451:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3730,"mutability":"mutable","name":"data","nameLocation":"4484:4:20","nodeType":"VariableDeclaration","scope":3757,"src":"4471:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3729,"name":"bytes","nodeType":"ElementaryTypeName","src":"4471:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4395:97:20"},"returnParameters":{"id":3733,"nodeType":"ParameterList","parameters":[],"src":"4517:0:20"},"scope":4720,"src":"4370:347:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2214],"body":{"id":3796,"nodeType":"Block","src":"4953:207:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3775,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"4974:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3776,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"4982:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4982:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4974:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3780,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"5015:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3781,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"5021:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5021:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3779,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"4998:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4998:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4974:60:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5042:49:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""},"value":"ERC1155: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370","typeString":"literal_string \"ERC1155: caller is not token owner nor approved\""}],"id":3774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4959:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4959:138:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3787,"nodeType":"ExpressionStatement","src":"4959:138:20"},{"expression":{"arguments":[{"id":3789,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"5126:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3790,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"5132:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3791,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"5136:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3792,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"5141:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3793,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"5150:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3788,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"5103:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5103:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3795,"nodeType":"ExpressionStatement","src":"5103:52:20"}]},"documentation":{"id":3758,"nodeType":"StructuredDocumentation","src":"4721:57:20","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":3797,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4790:21:20","nodeType":"FunctionDefinition","overrides":{"id":3772,"nodeType":"OverrideSpecifier","overrides":[],"src":"4944:8:20"},"parameters":{"id":3771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3760,"mutability":"mutable","name":"from","nameLocation":"4825:4:20","nodeType":"VariableDeclaration","scope":3797,"src":"4817:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3759,"name":"address","nodeType":"ElementaryTypeName","src":"4817:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3762,"mutability":"mutable","name":"to","nameLocation":"4843:2:20","nodeType":"VariableDeclaration","scope":3797,"src":"4835:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3761,"name":"address","nodeType":"ElementaryTypeName","src":"4835:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3765,"mutability":"mutable","name":"ids","nameLocation":"4868:3:20","nodeType":"VariableDeclaration","scope":3797,"src":"4851:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3763,"name":"uint256","nodeType":"ElementaryTypeName","src":"4851:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3764,"nodeType":"ArrayTypeName","src":"4851:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3768,"mutability":"mutable","name":"amounts","nameLocation":"4894:7:20","nodeType":"VariableDeclaration","scope":3797,"src":"4877:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3766,"name":"uint256","nodeType":"ElementaryTypeName","src":"4877:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3767,"nodeType":"ArrayTypeName","src":"4877:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3770,"mutability":"mutable","name":"data","nameLocation":"4920:4:20","nodeType":"VariableDeclaration","scope":3797,"src":"4907:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3769,"name":"bytes","nodeType":"ElementaryTypeName","src":"4907:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4811:117:20"},"returnParameters":{"id":3773,"nodeType":"ParameterList","parameters":[],"src":"4953:0:20"},"scope":4720,"src":"4781:379:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3913,"nodeType":"Block","src":"5725:724:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3812,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"5739:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5753:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5745:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3813,"name":"address","nodeType":"ElementaryTypeName","src":"5745:7:20","typeDescriptions":{}}},"id":3816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5745:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5739:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5757:39:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":3811,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5731:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5731:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3820,"nodeType":"ExpressionStatement","src":"5731:66:20"},{"assignments":[3822],"declarations":[{"constant":false,"id":3822,"mutability":"mutable","name":"operator","nameLocation":"5812:8:20","nodeType":"VariableDeclaration","scope":3913,"src":"5804:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3821,"name":"address","nodeType":"ElementaryTypeName","src":"5804:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3825,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3823,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"5823:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5823:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5804:31:20"},{"assignments":[3830],"declarations":[{"constant":false,"id":3830,"mutability":"mutable","name":"ids","nameLocation":"5858:3:20","nodeType":"VariableDeclaration","scope":3913,"src":"5841:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3828,"name":"uint256","nodeType":"ElementaryTypeName","src":"5841:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3829,"nodeType":"ArrayTypeName","src":"5841:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3834,"initialValue":{"arguments":[{"id":3832,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"5882:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3831,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"5864:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5864:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5841:44:20"},{"assignments":[3839],"declarations":[{"constant":false,"id":3839,"mutability":"mutable","name":"amounts","nameLocation":"5908:7:20","nodeType":"VariableDeclaration","scope":3913,"src":"5891:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3837,"name":"uint256","nodeType":"ElementaryTypeName","src":"5891:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3838,"nodeType":"ArrayTypeName","src":"5891:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3843,"initialValue":{"arguments":[{"id":3841,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"5936:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3840,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"5918:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5918:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5891:52:20"},{"expression":{"arguments":[{"id":3845,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"5971:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3846,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"5981:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3847,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"5987:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3848,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"5991:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3849,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"5996:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3850,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3808,"src":"6005:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3844,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"5950:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5950:60:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"ExpressionStatement","src":"5950:60:20"},{"assignments":[3854],"declarations":[{"constant":false,"id":3854,"mutability":"mutable","name":"fromBalance","nameLocation":"6025:11:20","nodeType":"VariableDeclaration","scope":3913,"src":"6017:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3853,"name":"uint256","nodeType":"ElementaryTypeName","src":"6017:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3860,"initialValue":{"baseExpression":{"baseExpression":{"id":3855,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"6039:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3857,"indexExpression":{"id":3856,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"6049:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6039:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3859,"indexExpression":{"id":3858,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6053:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6039:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6017:41:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3862,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"6072:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3863,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"6087:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6072:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6095:44:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":3861,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6064:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6064:76:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3867,"nodeType":"ExpressionStatement","src":"6064:76:20"},{"id":3878,"nodeType":"UncheckedBlock","src":"6146:67:20","statements":[{"expression":{"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3868,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"6164:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3871,"indexExpression":{"id":3869,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"6174:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6164:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3872,"indexExpression":{"id":3870,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6178:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6164:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3873,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"6186:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3874,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"6200:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6186:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6164:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3877,"nodeType":"ExpressionStatement","src":"6164:42:20"}]},{"expression":{"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3879,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"6218:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3882,"indexExpression":{"id":3880,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"6228:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6218:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3883,"indexExpression":{"id":3881,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"6232:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6218:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3884,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"6239:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6218:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3886,"nodeType":"ExpressionStatement","src":"6218:27:20"},{"eventCall":{"arguments":[{"id":3888,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"6272:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3889,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6282:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3890,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"6288:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3891,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"6292:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3892,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"6296:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3887,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"6257:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6257:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3894,"nodeType":"EmitStatement","src":"6252:51:20"},{"expression":{"arguments":[{"id":3896,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"6330:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3897,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6340:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3898,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"6346:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3899,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"6350:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3900,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"6355:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3901,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3808,"src":"6364:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3895,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"6310:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6310:59:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3903,"nodeType":"ExpressionStatement","src":"6310:59:20"},{"expression":{"arguments":[{"id":3905,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"6407:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3906,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6417:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3907,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"6423:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3908,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"6427:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3909,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"6431:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3910,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3808,"src":"6439:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3904,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"6376:30:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6376:68:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3912,"nodeType":"ExpressionStatement","src":"6376:68:20"}]},"documentation":{"id":3798,"nodeType":"StructuredDocumentation","src":"5164:417:20","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":3914,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"5593:17:20","nodeType":"FunctionDefinition","parameters":{"id":3809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3800,"mutability":"mutable","name":"from","nameLocation":"5624:4:20","nodeType":"VariableDeclaration","scope":3914,"src":"5616:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3799,"name":"address","nodeType":"ElementaryTypeName","src":"5616:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3802,"mutability":"mutable","name":"to","nameLocation":"5642:2:20","nodeType":"VariableDeclaration","scope":3914,"src":"5634:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3801,"name":"address","nodeType":"ElementaryTypeName","src":"5634:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3804,"mutability":"mutable","name":"id","nameLocation":"5658:2:20","nodeType":"VariableDeclaration","scope":3914,"src":"5650:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3803,"name":"uint256","nodeType":"ElementaryTypeName","src":"5650:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3806,"mutability":"mutable","name":"amount","nameLocation":"5674:6:20","nodeType":"VariableDeclaration","scope":3914,"src":"5666:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3805,"name":"uint256","nodeType":"ElementaryTypeName","src":"5666:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3808,"mutability":"mutable","name":"data","nameLocation":"5699:4:20","nodeType":"VariableDeclaration","scope":3914,"src":"5686:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3807,"name":"bytes","nodeType":"ElementaryTypeName","src":"5686:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:97:20"},"returnParameters":{"id":3810,"nodeType":"ParameterList","parameters":[],"src":"5725:0:20"},"scope":4720,"src":"5584:865:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4048,"nodeType":"Block","src":"6939:839:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3931,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"6953:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6957:6:20","memberName":"length","nodeType":"MemberAccess","src":"6953:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3933,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3925,"src":"6967:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6975:6:20","memberName":"length","nodeType":"MemberAccess","src":"6967:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6953:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":3936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6983:42:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":3930,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6945:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6945:81:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3938,"nodeType":"ExpressionStatement","src":"6945:81:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3940,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"7040:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7054:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7046:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3941,"name":"address","nodeType":"ElementaryTypeName","src":"7046:7:20","typeDescriptions":{}}},"id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7040:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7058:39:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":3939,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7032:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7032:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3948,"nodeType":"ExpressionStatement","src":"7032:66:20"},{"assignments":[3950],"declarations":[{"constant":false,"id":3950,"mutability":"mutable","name":"operator","nameLocation":"7113:8:20","nodeType":"VariableDeclaration","scope":4048,"src":"7105:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3949,"name":"address","nodeType":"ElementaryTypeName","src":"7105:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3953,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3951,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"7124:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7124:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7105:31:20"},{"expression":{"arguments":[{"id":3955,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"7164:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3956,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"7174:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3957,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"7180:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3958,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"7184:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3959,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3925,"src":"7189:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3960,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"7198:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3954,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"7143:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7143:60:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3962,"nodeType":"ExpressionStatement","src":"7143:60:20"},{"body":{"id":4020,"nodeType":"Block","src":"7251:316:20","statements":[{"assignments":[3975],"declarations":[{"constant":false,"id":3975,"mutability":"mutable","name":"id","nameLocation":"7267:2:20","nodeType":"VariableDeclaration","scope":4020,"src":"7259:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3974,"name":"uint256","nodeType":"ElementaryTypeName","src":"7259:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3979,"initialValue":{"baseExpression":{"id":3976,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"7272:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3978,"indexExpression":{"id":3977,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"7276:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7272:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7259:19:20"},{"assignments":[3981],"declarations":[{"constant":false,"id":3981,"mutability":"mutable","name":"amount","nameLocation":"7294:6:20","nodeType":"VariableDeclaration","scope":4020,"src":"7286:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3980,"name":"uint256","nodeType":"ElementaryTypeName","src":"7286:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3985,"initialValue":{"baseExpression":{"id":3982,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3925,"src":"7303:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3984,"indexExpression":{"id":3983,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"7311:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7303:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7286:27:20"},{"assignments":[3987],"declarations":[{"constant":false,"id":3987,"mutability":"mutable","name":"fromBalance","nameLocation":"7330:11:20","nodeType":"VariableDeclaration","scope":4020,"src":"7322:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3986,"name":"uint256","nodeType":"ElementaryTypeName","src":"7322:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3993,"initialValue":{"baseExpression":{"baseExpression":{"id":3988,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"7344:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3990,"indexExpression":{"id":3989,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"7354:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7344:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3992,"indexExpression":{"id":3991,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"7358:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7344:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7322:41:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3995,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"7379:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3996,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"7394:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7379:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7402:44:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":3994,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7371:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7371:76:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4000,"nodeType":"ExpressionStatement","src":"7371:76:20"},{"id":4011,"nodeType":"UncheckedBlock","src":"7455:71:20","statements":[{"expression":{"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4001,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"7475:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4004,"indexExpression":{"id":4002,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"7485:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7475:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4005,"indexExpression":{"id":4003,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"7489:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7475:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4006,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"7497:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4007,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"7511:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7497:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7475:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4010,"nodeType":"ExpressionStatement","src":"7475:42:20"}]},{"expression":{"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4012,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"7533:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4015,"indexExpression":{"id":4013,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"7543:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7533:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4016,"indexExpression":{"id":4014,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"7547:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7533:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4017,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"7554:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7533:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4019,"nodeType":"ExpressionStatement","src":"7533:27:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3967,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"7230:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3968,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"7234:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7238:6:20","memberName":"length","nodeType":"MemberAccess","src":"7234:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7230:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4021,"initializationExpression":{"assignments":[3964],"declarations":[{"constant":false,"id":3964,"mutability":"mutable","name":"i","nameLocation":"7223:1:20","nodeType":"VariableDeclaration","scope":4021,"src":"7215:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3963,"name":"uint256","nodeType":"ElementaryTypeName","src":"7215:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3966,"initialValue":{"hexValue":"30","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7227:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7215:13:20"},"loopExpression":{"expression":{"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7246:3:20","subExpression":{"id":3971,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"7248:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3973,"nodeType":"ExpressionStatement","src":"7246:3:20"},"nodeType":"ForStatement","src":"7210:357:20"},{"eventCall":{"arguments":[{"id":4023,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"7592:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4024,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"7602:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4025,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"7608:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4026,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"7612:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4027,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3925,"src":"7617:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":4022,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"7578:13:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7578:47:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4029,"nodeType":"EmitStatement","src":"7573:52:20"},{"expression":{"arguments":[{"id":4031,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"7652:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4032,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"7662:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4033,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"7668:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4034,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"7672:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4035,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3925,"src":"7677:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4036,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"7686:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4030,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"7632:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7632:59:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4038,"nodeType":"ExpressionStatement","src":"7632:59:20"},{"expression":{"arguments":[{"id":4040,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"7734:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4041,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"7744:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4042,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"7750:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4043,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"7754:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4044,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3925,"src":"7759:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4045,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"7768:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4039,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"7698:35:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7698:75:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4047,"nodeType":"ExpressionStatement","src":"7698:75:20"}]},"documentation":{"id":3915,"nodeType":"StructuredDocumentation","src":"6453:317:20","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":4049,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"6782:22:20","nodeType":"FunctionDefinition","parameters":{"id":3928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3917,"mutability":"mutable","name":"from","nameLocation":"6818:4:20","nodeType":"VariableDeclaration","scope":4049,"src":"6810:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3916,"name":"address","nodeType":"ElementaryTypeName","src":"6810:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3919,"mutability":"mutable","name":"to","nameLocation":"6836:2:20","nodeType":"VariableDeclaration","scope":4049,"src":"6828:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3918,"name":"address","nodeType":"ElementaryTypeName","src":"6828:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3922,"mutability":"mutable","name":"ids","nameLocation":"6861:3:20","nodeType":"VariableDeclaration","scope":4049,"src":"6844:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3920,"name":"uint256","nodeType":"ElementaryTypeName","src":"6844:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3921,"nodeType":"ArrayTypeName","src":"6844:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3925,"mutability":"mutable","name":"amounts","nameLocation":"6887:7:20","nodeType":"VariableDeclaration","scope":4049,"src":"6870:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3923,"name":"uint256","nodeType":"ElementaryTypeName","src":"6870:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3924,"nodeType":"ArrayTypeName","src":"6870:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3927,"mutability":"mutable","name":"data","nameLocation":"6913:4:20","nodeType":"VariableDeclaration","scope":4049,"src":"6900:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3926,"name":"bytes","nodeType":"ElementaryTypeName","src":"6900:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6804:117:20"},"returnParameters":{"id":3929,"nodeType":"ParameterList","parameters":[],"src":"6939:0:20"},"scope":4720,"src":"6773:1005:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4059,"nodeType":"Block","src":"8617:24:20","statements":[{"expression":{"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4055,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"8623:4:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4056,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"8630:6:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"8623:13:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4058,"nodeType":"ExpressionStatement","src":"8623:13:20"}]},"documentation":{"id":4050,"nodeType":"StructuredDocumentation","src":"7782:776:20","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the amounts in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":4060,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"8570:7:20","nodeType":"FunctionDefinition","parameters":{"id":4053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4052,"mutability":"mutable","name":"newuri","nameLocation":"8592:6:20","nodeType":"VariableDeclaration","scope":4060,"src":"8578:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4051,"name":"string","nodeType":"ElementaryTypeName","src":"8578:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8577:22:20"},"returnParameters":{"id":4054,"nodeType":"ParameterList","parameters":[],"src":"8617:0:20"},"scope":4720,"src":"8561:80:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4148,"nodeType":"Block","src":"9101:461:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4073,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"9115:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9129:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9121:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4074,"name":"address","nodeType":"ElementaryTypeName","src":"9121:7:20","typeDescriptions":{}}},"id":4077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9121:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9115:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":4079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9133:35:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":4072,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9107:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9107:62:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4081,"nodeType":"ExpressionStatement","src":"9107:62:20"},{"assignments":[4083],"declarations":[{"constant":false,"id":4083,"mutability":"mutable","name":"operator","nameLocation":"9184:8:20","nodeType":"VariableDeclaration","scope":4148,"src":"9176:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4082,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4086,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4084,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"9195:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9195:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9176:31:20"},{"assignments":[4091],"declarations":[{"constant":false,"id":4091,"mutability":"mutable","name":"ids","nameLocation":"9230:3:20","nodeType":"VariableDeclaration","scope":4148,"src":"9213:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4089,"name":"uint256","nodeType":"ElementaryTypeName","src":"9213:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4090,"nodeType":"ArrayTypeName","src":"9213:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4095,"initialValue":{"arguments":[{"id":4093,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"9254:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4092,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"9236:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9236:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9213:44:20"},{"assignments":[4100],"declarations":[{"constant":false,"id":4100,"mutability":"mutable","name":"amounts","nameLocation":"9280:7:20","nodeType":"VariableDeclaration","scope":4148,"src":"9263:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4098,"name":"uint256","nodeType":"ElementaryTypeName","src":"9263:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4099,"nodeType":"ArrayTypeName","src":"9263:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4104,"initialValue":{"arguments":[{"id":4102,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"9308:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4101,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"9290:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9290:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9263:52:20"},{"expression":{"arguments":[{"id":4106,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"9343:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9361:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9353:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4107,"name":"address","nodeType":"ElementaryTypeName","src":"9353:7:20","typeDescriptions":{}}},"id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9353:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4111,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"9365:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4112,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"9369:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4113,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"9374:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4114,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"9383:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4105,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"9322:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9322:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4116,"nodeType":"ExpressionStatement","src":"9322:66:20"},{"expression":{"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4117,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"9395:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4120,"indexExpression":{"id":4118,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"9405:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9395:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4121,"indexExpression":{"id":4119,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"9409:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9395:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4122,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"9416:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4124,"nodeType":"ExpressionStatement","src":"9395:27:20"},{"eventCall":{"arguments":[{"id":4126,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"9448:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9458:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4127,"name":"address","nodeType":"ElementaryTypeName","src":"9458:7:20","typeDescriptions":{}}},"id":4130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9458:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4131,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"9470:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4132,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"9474:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4133,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"9478:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4125,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"9433:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4135,"nodeType":"EmitStatement","src":"9428:57:20"},{"expression":{"arguments":[{"id":4137,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"9512:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9522:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4138,"name":"address","nodeType":"ElementaryTypeName","src":"9522:7:20","typeDescriptions":{}}},"id":4141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9522:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4142,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"9534:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4143,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"9538:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4144,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"9543:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4145,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"9552:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4136,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"9492:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9492:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4147,"nodeType":"ExpressionStatement","src":"9492:65:20"}]},"documentation":{"id":4061,"nodeType":"StructuredDocumentation","src":"8645:342:20","text":" @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":4149,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8999:5:20","nodeType":"FunctionDefinition","parameters":{"id":4070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4063,"mutability":"mutable","name":"to","nameLocation":"9018:2:20","nodeType":"VariableDeclaration","scope":4149,"src":"9010:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4062,"name":"address","nodeType":"ElementaryTypeName","src":"9010:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4065,"mutability":"mutable","name":"id","nameLocation":"9034:2:20","nodeType":"VariableDeclaration","scope":4149,"src":"9026:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4064,"name":"uint256","nodeType":"ElementaryTypeName","src":"9026:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4067,"mutability":"mutable","name":"amount","nameLocation":"9050:6:20","nodeType":"VariableDeclaration","scope":4149,"src":"9042:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4066,"name":"uint256","nodeType":"ElementaryTypeName","src":"9042:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4069,"mutability":"mutable","name":"data","nameLocation":"9075:4:20","nodeType":"VariableDeclaration","scope":4149,"src":"9062:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4068,"name":"bytes","nodeType":"ElementaryTypeName","src":"9062:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9004:79:20"},"returnParameters":{"id":4071,"nodeType":"ParameterList","parameters":[],"src":"9101:0:20"},"scope":4720,"src":"8990:572:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4259,"nodeType":"Block","src":"10064:593:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4164,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10078:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10092:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10084:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4165,"name":"address","nodeType":"ElementaryTypeName","src":"10084:7:20","typeDescriptions":{}}},"id":4168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10084:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10078:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":4170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10096:35:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":4163,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10070:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10070:62:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4172,"nodeType":"ExpressionStatement","src":"10070:62:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4174,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10146:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10150:6:20","memberName":"length","nodeType":"MemberAccess","src":"10146:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4176,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"10160:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10168:6:20","memberName":"length","nodeType":"MemberAccess","src":"10160:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10146:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":4179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10176:42:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":4173,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10138:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:81:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4181,"nodeType":"ExpressionStatement","src":"10138:81:20"},{"assignments":[4183],"declarations":[{"constant":false,"id":4183,"mutability":"mutable","name":"operator","nameLocation":"10234:8:20","nodeType":"VariableDeclaration","scope":4259,"src":"10226:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4182,"name":"address","nodeType":"ElementaryTypeName","src":"10226:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4186,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4184,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"10245:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10245:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10226:31:20"},{"expression":{"arguments":[{"id":4188,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"10285:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10303:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10295:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4189,"name":"address","nodeType":"ElementaryTypeName","src":"10295:7:20","typeDescriptions":{}}},"id":4192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10295:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4193,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10307:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4194,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10311:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4195,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"10316:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4196,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"10325:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4187,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"10264:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10264:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4198,"nodeType":"ExpressionStatement","src":"10264:66:20"},{"body":{"id":4222,"nodeType":"Block","src":"10378:50:20","statements":[{"expression":{"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4210,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"10386:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4215,"indexExpression":{"baseExpression":{"id":4211,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10396:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4213,"indexExpression":{"id":4212,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"10400:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10396:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10386:17:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4216,"indexExpression":{"id":4214,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10404:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10386:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":4217,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"10411:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4219,"indexExpression":{"id":4218,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"10419:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10411:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10386:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4221,"nodeType":"ExpressionStatement","src":"10386:35:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4203,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"10357:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4204,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10361:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10365:6:20","memberName":"length","nodeType":"MemberAccess","src":"10361:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10357:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4223,"initializationExpression":{"assignments":[4200],"declarations":[{"constant":false,"id":4200,"mutability":"mutable","name":"i","nameLocation":"10350:1:20","nodeType":"VariableDeclaration","scope":4223,"src":"10342:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4199,"name":"uint256","nodeType":"ElementaryTypeName","src":"10342:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4202,"initialValue":{"hexValue":"30","id":4201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10354:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10342:13:20"},"loopExpression":{"expression":{"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10373:3:20","subExpression":{"id":4207,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"10373:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4209,"nodeType":"ExpressionStatement","src":"10373:3:20"},"nodeType":"ForStatement","src":"10337:91:20"},{"eventCall":{"arguments":[{"id":4225,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"10453:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10463:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4226,"name":"address","nodeType":"ElementaryTypeName","src":"10463:7:20","typeDescriptions":{}}},"id":4229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10463:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4230,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10475:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4231,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10479:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4232,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"10484:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":4224,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"10439:13:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10439:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4234,"nodeType":"EmitStatement","src":"10434:58:20"},{"expression":{"arguments":[{"id":4236,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"10519:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10537:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10529:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4237,"name":"address","nodeType":"ElementaryTypeName","src":"10529:7:20","typeDescriptions":{}}},"id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10529:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4241,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10541:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4242,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10545:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4243,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"10550:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4244,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"10559:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4235,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"10499:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10499:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4246,"nodeType":"ExpressionStatement","src":"10499:65:20"},{"expression":{"arguments":[{"id":4248,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"10607:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10617:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4249,"name":"address","nodeType":"ElementaryTypeName","src":"10617:7:20","typeDescriptions":{}}},"id":4252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10617:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4253,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10629:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4254,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10633:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4255,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"10638:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4256,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"10647:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4247,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"10571:35:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10571:81:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4258,"nodeType":"ExpressionStatement","src":"10571:81:20"}]},"documentation":{"id":4150,"nodeType":"StructuredDocumentation","src":"9566:359:20","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":4260,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"9937:10:20","nodeType":"FunctionDefinition","parameters":{"id":4161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4152,"mutability":"mutable","name":"to","nameLocation":"9961:2:20","nodeType":"VariableDeclaration","scope":4260,"src":"9953:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4151,"name":"address","nodeType":"ElementaryTypeName","src":"9953:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4155,"mutability":"mutable","name":"ids","nameLocation":"9986:3:20","nodeType":"VariableDeclaration","scope":4260,"src":"9969:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4153,"name":"uint256","nodeType":"ElementaryTypeName","src":"9969:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4154,"nodeType":"ArrayTypeName","src":"9969:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4158,"mutability":"mutable","name":"amounts","nameLocation":"10012:7:20","nodeType":"VariableDeclaration","scope":4260,"src":"9995:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"9995:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4157,"nodeType":"ArrayTypeName","src":"9995:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4160,"mutability":"mutable","name":"data","nameLocation":"10038:4:20","nodeType":"VariableDeclaration","scope":4260,"src":"10025:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4159,"name":"bytes","nodeType":"ElementaryTypeName","src":"10025:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9947:99:20"},"returnParameters":{"id":4162,"nodeType":"ParameterList","parameters":[],"src":"10064:0:20"},"scope":4720,"src":"9928:729:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4364,"nodeType":"Block","src":"11011:630:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4271,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"11025:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11041:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11033:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4272,"name":"address","nodeType":"ElementaryTypeName","src":"11033:7:20","typeDescriptions":{}}},"id":4275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11033:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11025:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":4277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11045:37:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":4270,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11017:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11017:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4279,"nodeType":"ExpressionStatement","src":"11017:66:20"},{"assignments":[4281],"declarations":[{"constant":false,"id":4281,"mutability":"mutable","name":"operator","nameLocation":"11098:8:20","nodeType":"VariableDeclaration","scope":4364,"src":"11090:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4280,"name":"address","nodeType":"ElementaryTypeName","src":"11090:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4284,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4282,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"11109:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11109:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11090:31:20"},{"assignments":[4289],"declarations":[{"constant":false,"id":4289,"mutability":"mutable","name":"ids","nameLocation":"11144:3:20","nodeType":"VariableDeclaration","scope":4364,"src":"11127:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4287,"name":"uint256","nodeType":"ElementaryTypeName","src":"11127:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4288,"nodeType":"ArrayTypeName","src":"11127:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4293,"initialValue":{"arguments":[{"id":4291,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"11168:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4290,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"11150:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11150:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11127:44:20"},{"assignments":[4298],"declarations":[{"constant":false,"id":4298,"mutability":"mutable","name":"amounts","nameLocation":"11194:7:20","nodeType":"VariableDeclaration","scope":4364,"src":"11177:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4296,"name":"uint256","nodeType":"ElementaryTypeName","src":"11177:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4297,"nodeType":"ArrayTypeName","src":"11177:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4302,"initialValue":{"arguments":[{"id":4300,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"11222:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4299,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"11204:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11204:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11177:52:20"},{"expression":{"arguments":[{"id":4304,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"11257:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4305,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"11267:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11281:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11273:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4306,"name":"address","nodeType":"ElementaryTypeName","src":"11273:7:20","typeDescriptions":{}}},"id":4309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11273:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4310,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"11285:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4311,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"11290:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":4312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11299:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4303,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"11236:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11236:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4314,"nodeType":"ExpressionStatement","src":"11236:66:20"},{"assignments":[4316],"declarations":[{"constant":false,"id":4316,"mutability":"mutable","name":"fromBalance","nameLocation":"11317:11:20","nodeType":"VariableDeclaration","scope":4364,"src":"11309:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4315,"name":"uint256","nodeType":"ElementaryTypeName","src":"11309:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4322,"initialValue":{"baseExpression":{"baseExpression":{"id":4317,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"11331:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4319,"indexExpression":{"id":4318,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"11341:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11331:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4321,"indexExpression":{"id":4320,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"11345:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11331:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11309:41:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4324,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"11364:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4325,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"11379:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11364:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11387:38:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":4323,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11356:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11356:70:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4329,"nodeType":"ExpressionStatement","src":"11356:70:20"},{"id":4340,"nodeType":"UncheckedBlock","src":"11432:67:20","statements":[{"expression":{"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4330,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"11450:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4333,"indexExpression":{"id":4331,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"11460:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11450:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4334,"indexExpression":{"id":4332,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"11464:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11450:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4335,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"11472:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4336,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"11486:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11472:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11450:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4339,"nodeType":"ExpressionStatement","src":"11450:42:20"}]},{"eventCall":{"arguments":[{"id":4342,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"11525:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4343,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"11535:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11549:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11541:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4344,"name":"address","nodeType":"ElementaryTypeName","src":"11541:7:20","typeDescriptions":{}}},"id":4347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11541:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4348,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"11553:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4349,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"11557:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4341,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"11510:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11510:54:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4351,"nodeType":"EmitStatement","src":"11505:59:20"},{"expression":{"arguments":[{"id":4353,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"11591:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4354,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"11601:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11615:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11607:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4355,"name":"address","nodeType":"ElementaryTypeName","src":"11607:7:20","typeDescriptions":{}}},"id":4358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11607:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4359,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"11619:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4360,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"11624:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":4361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11633:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4352,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"11571:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11571:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4363,"nodeType":"ExpressionStatement","src":"11571:65:20"}]},"documentation":{"id":4261,"nodeType":"StructuredDocumentation","src":"10661:257:20","text":" @dev Destroys `amount` tokens of token type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens of token type `id`."},"id":4365,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10930:5:20","nodeType":"FunctionDefinition","parameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4263,"mutability":"mutable","name":"from","nameLocation":"10949:4:20","nodeType":"VariableDeclaration","scope":4365,"src":"10941:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4262,"name":"address","nodeType":"ElementaryTypeName","src":"10941:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4265,"mutability":"mutable","name":"id","nameLocation":"10967:2:20","nodeType":"VariableDeclaration","scope":4365,"src":"10959:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4264,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4267,"mutability":"mutable","name":"amount","nameLocation":"10983:6:20","nodeType":"VariableDeclaration","scope":4365,"src":"10975:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4266,"name":"uint256","nodeType":"ElementaryTypeName","src":"10975:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10935:58:20"},"returnParameters":{"id":4269,"nodeType":"ParameterList","parameters":[],"src":"11011:0:20"},"scope":4720,"src":"10921:720:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4487,"nodeType":"Block","src":"11975:736:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4378,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"11989:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12005:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11997:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4379,"name":"address","nodeType":"ElementaryTypeName","src":"11997:7:20","typeDescriptions":{}}},"id":4382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11997:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11989:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":4384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12009:37:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":4377,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11981:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11981:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4386,"nodeType":"ExpressionStatement","src":"11981:66:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4388,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"12061:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12065:6:20","memberName":"length","nodeType":"MemberAccess","src":"12061:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4390,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"12075:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12083:6:20","memberName":"length","nodeType":"MemberAccess","src":"12075:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12061:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12091:42:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":4387,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12053:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12053:81:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4395,"nodeType":"ExpressionStatement","src":"12053:81:20"},{"assignments":[4397],"declarations":[{"constant":false,"id":4397,"mutability":"mutable","name":"operator","nameLocation":"12149:8:20","nodeType":"VariableDeclaration","scope":4487,"src":"12141:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4396,"name":"address","nodeType":"ElementaryTypeName","src":"12141:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4400,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4398,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"12160:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12160:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12141:31:20"},{"expression":{"arguments":[{"id":4402,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"12200:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4403,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"12210:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12224:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12216:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4404,"name":"address","nodeType":"ElementaryTypeName","src":"12216:7:20","typeDescriptions":{}}},"id":4407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12216:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4408,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"12228:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4409,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"12233:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":4410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12242:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4401,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"12179:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12179:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4412,"nodeType":"ExpressionStatement","src":"12179:66:20"},{"body":{"id":4462,"nodeType":"Block","src":"12293:275:20","statements":[{"assignments":[4425],"declarations":[{"constant":false,"id":4425,"mutability":"mutable","name":"id","nameLocation":"12309:2:20","nodeType":"VariableDeclaration","scope":4462,"src":"12301:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4424,"name":"uint256","nodeType":"ElementaryTypeName","src":"12301:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4429,"initialValue":{"baseExpression":{"id":4426,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"12314:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4428,"indexExpression":{"id":4427,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"12318:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12314:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12301:19:20"},{"assignments":[4431],"declarations":[{"constant":false,"id":4431,"mutability":"mutable","name":"amount","nameLocation":"12336:6:20","nodeType":"VariableDeclaration","scope":4462,"src":"12328:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4430,"name":"uint256","nodeType":"ElementaryTypeName","src":"12328:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4435,"initialValue":{"baseExpression":{"id":4432,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"12345:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4434,"indexExpression":{"id":4433,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"12353:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12345:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12328:27:20"},{"assignments":[4437],"declarations":[{"constant":false,"id":4437,"mutability":"mutable","name":"fromBalance","nameLocation":"12372:11:20","nodeType":"VariableDeclaration","scope":4462,"src":"12364:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4436,"name":"uint256","nodeType":"ElementaryTypeName","src":"12364:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4443,"initialValue":{"baseExpression":{"baseExpression":{"id":4438,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"12386:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4440,"indexExpression":{"id":4439,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"12396:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12386:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4442,"indexExpression":{"id":4441,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"12400:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12386:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12364:41:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4445,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4437,"src":"12421:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4446,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"12436:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12421:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":4448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12444:38:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":4444,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12413:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12413:70:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4450,"nodeType":"ExpressionStatement","src":"12413:70:20"},{"id":4461,"nodeType":"UncheckedBlock","src":"12491:71:20","statements":[{"expression":{"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4451,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"12511:9:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4454,"indexExpression":{"id":4452,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"12521:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12511:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4455,"indexExpression":{"id":4453,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"12525:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12511:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4456,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4437,"src":"12533:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4457,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"12547:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12533:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12511:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4460,"nodeType":"ExpressionStatement","src":"12511:42:20"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4417,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"12272:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4418,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"12276:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12280:6:20","memberName":"length","nodeType":"MemberAccess","src":"12276:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12272:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4463,"initializationExpression":{"assignments":[4414],"declarations":[{"constant":false,"id":4414,"mutability":"mutable","name":"i","nameLocation":"12265:1:20","nodeType":"VariableDeclaration","scope":4463,"src":"12257:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4413,"name":"uint256","nodeType":"ElementaryTypeName","src":"12257:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4416,"initialValue":{"hexValue":"30","id":4415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12269:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12257:13:20"},"loopExpression":{"expression":{"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12288:3:20","subExpression":{"id":4421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"12288:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4423,"nodeType":"ExpressionStatement","src":"12288:3:20"},"nodeType":"ForStatement","src":"12252:316:20"},{"eventCall":{"arguments":[{"id":4465,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"12593:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4466,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"12603:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12617:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12609:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4467,"name":"address","nodeType":"ElementaryTypeName","src":"12609:7:20","typeDescriptions":{}}},"id":4470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12609:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4471,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"12621:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4472,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"12626:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":4464,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"12579:13:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":4473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12579:55:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4474,"nodeType":"EmitStatement","src":"12574:60:20"},{"expression":{"arguments":[{"id":4476,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"12661:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4477,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"12671:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12685:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12677:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4478,"name":"address","nodeType":"ElementaryTypeName","src":"12677:7:20","typeDescriptions":{}}},"id":4481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12677:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4482,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"12689:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4483,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"12694:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":4484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12703:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4475,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"12641:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12641:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4486,"nodeType":"ExpressionStatement","src":"12641:65:20"}]},"documentation":{"id":4366,"nodeType":"StructuredDocumentation","src":"11645:212:20","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length."},"id":4488,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"11869:10:20","nodeType":"FunctionDefinition","parameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4368,"mutability":"mutable","name":"from","nameLocation":"11893:4:20","nodeType":"VariableDeclaration","scope":4488,"src":"11885:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4367,"name":"address","nodeType":"ElementaryTypeName","src":"11885:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4371,"mutability":"mutable","name":"ids","nameLocation":"11920:3:20","nodeType":"VariableDeclaration","scope":4488,"src":"11903:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4369,"name":"uint256","nodeType":"ElementaryTypeName","src":"11903:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4370,"nodeType":"ArrayTypeName","src":"11903:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4374,"mutability":"mutable","name":"amounts","nameLocation":"11946:7:20","nodeType":"VariableDeclaration","scope":4488,"src":"11929:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4372,"name":"uint256","nodeType":"ElementaryTypeName","src":"11929:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4373,"nodeType":"ArrayTypeName","src":"11929:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11879:78:20"},"returnParameters":{"id":4376,"nodeType":"ParameterList","parameters":[],"src":"11975:0:20"},"scope":4720,"src":"11860:851:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4519,"nodeType":"Block","src":"12944:186:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4499,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4491,"src":"12958:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4500,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"12967:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12958:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":4502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12977:43:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":4498,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12950:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12950:71:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4504,"nodeType":"ExpressionStatement","src":"12950:71:20"},{"expression":{"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4505,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"13027:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":4508,"indexExpression":{"id":4506,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4491,"src":"13046:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13027:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4509,"indexExpression":{"id":4507,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"13053:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13027:35:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4510,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"13065:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13027:46:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4512,"nodeType":"ExpressionStatement","src":"13027:46:20"},{"eventCall":{"arguments":[{"id":4514,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4491,"src":"13099:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4515,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"13106:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4516,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"13116:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4513,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"13084:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13084:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4518,"nodeType":"EmitStatement","src":"13079:46:20"}]},"documentation":{"id":4489,"nodeType":"StructuredDocumentation","src":"12715:117:20","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":4520,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12844:18:20","nodeType":"FunctionDefinition","parameters":{"id":4496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4491,"mutability":"mutable","name":"owner","nameLocation":"12876:5:20","nodeType":"VariableDeclaration","scope":4520,"src":"12868:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4490,"name":"address","nodeType":"ElementaryTypeName","src":"12868:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4493,"mutability":"mutable","name":"operator","nameLocation":"12895:8:20","nodeType":"VariableDeclaration","scope":4520,"src":"12887:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4492,"name":"address","nodeType":"ElementaryTypeName","src":"12887:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4495,"mutability":"mutable","name":"approved","nameLocation":"12914:8:20","nodeType":"VariableDeclaration","scope":4520,"src":"12909:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4494,"name":"bool","nodeType":"ElementaryTypeName","src":"12909:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12862:64:20"},"returnParameters":{"id":4497,"nodeType":"ParameterList","parameters":[],"src":"12944:0:20"},"scope":4720,"src":"12835:295:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4538,"nodeType":"Block","src":"14210:2:20","statements":[]},"documentation":{"id":4521,"nodeType":"StructuredDocumentation","src":"13134:887:20","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `ids` and `amounts` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":4539,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14033:20:20","nodeType":"FunctionDefinition","parameters":{"id":4536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4523,"mutability":"mutable","name":"operator","nameLocation":"14067:8:20","nodeType":"VariableDeclaration","scope":4539,"src":"14059:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4522,"name":"address","nodeType":"ElementaryTypeName","src":"14059:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4525,"mutability":"mutable","name":"from","nameLocation":"14089:4:20","nodeType":"VariableDeclaration","scope":4539,"src":"14081:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4524,"name":"address","nodeType":"ElementaryTypeName","src":"14081:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4527,"mutability":"mutable","name":"to","nameLocation":"14107:2:20","nodeType":"VariableDeclaration","scope":4539,"src":"14099:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4526,"name":"address","nodeType":"ElementaryTypeName","src":"14099:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4530,"mutability":"mutable","name":"ids","nameLocation":"14132:3:20","nodeType":"VariableDeclaration","scope":4539,"src":"14115:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4528,"name":"uint256","nodeType":"ElementaryTypeName","src":"14115:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4529,"nodeType":"ArrayTypeName","src":"14115:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4533,"mutability":"mutable","name":"amounts","nameLocation":"14158:7:20","nodeType":"VariableDeclaration","scope":4539,"src":"14141:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4531,"name":"uint256","nodeType":"ElementaryTypeName","src":"14141:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4532,"nodeType":"ArrayTypeName","src":"14141:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4535,"mutability":"mutable","name":"data","nameLocation":"14184:4:20","nodeType":"VariableDeclaration","scope":4539,"src":"14171:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4534,"name":"bytes","nodeType":"ElementaryTypeName","src":"14171:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14053:139:20"},"returnParameters":{"id":4537,"nodeType":"ParameterList","parameters":[],"src":"14210:0:20"},"scope":4720,"src":"14024:188:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4557,"nodeType":"Block","src":"15288:2:20","statements":[]},"documentation":{"id":4540,"nodeType":"StructuredDocumentation","src":"14216:884:20","text":" @dev Hook that is called after any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `id` and `amount` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":4558,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15112:19:20","nodeType":"FunctionDefinition","parameters":{"id":4555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4542,"mutability":"mutable","name":"operator","nameLocation":"15145:8:20","nodeType":"VariableDeclaration","scope":4558,"src":"15137:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4541,"name":"address","nodeType":"ElementaryTypeName","src":"15137:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4544,"mutability":"mutable","name":"from","nameLocation":"15167:4:20","nodeType":"VariableDeclaration","scope":4558,"src":"15159:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4543,"name":"address","nodeType":"ElementaryTypeName","src":"15159:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4546,"mutability":"mutable","name":"to","nameLocation":"15185:2:20","nodeType":"VariableDeclaration","scope":4558,"src":"15177:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4545,"name":"address","nodeType":"ElementaryTypeName","src":"15177:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4549,"mutability":"mutable","name":"ids","nameLocation":"15210:3:20","nodeType":"VariableDeclaration","scope":4558,"src":"15193:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4547,"name":"uint256","nodeType":"ElementaryTypeName","src":"15193:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4548,"nodeType":"ArrayTypeName","src":"15193:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4552,"mutability":"mutable","name":"amounts","nameLocation":"15236:7:20","nodeType":"VariableDeclaration","scope":4558,"src":"15219:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4550,"name":"uint256","nodeType":"ElementaryTypeName","src":"15219:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4551,"nodeType":"ArrayTypeName","src":"15219:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4554,"mutability":"mutable","name":"data","nameLocation":"15262:4:20","nodeType":"VariableDeclaration","scope":4558,"src":"15249:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4553,"name":"bytes","nodeType":"ElementaryTypeName","src":"15249:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15131:139:20"},"returnParameters":{"id":4556,"nodeType":"ParameterList","parameters":[],"src":"15288:0:20"},"scope":4720,"src":"15103:187:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4620,"nodeType":"Block","src":"15461:494:20","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4573,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"15471:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15474:10:20","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"15471:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15471:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4619,"nodeType":"IfStatement","src":"15467:484:20","trueBody":{"id":4618,"nodeType":"Block","src":"15488:463:20","statements":[{"clauses":[{"block":{"id":4600,"nodeType":"Block","src":"15626:163:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4589,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"15640:8:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4590,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"15652:27:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":4591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15680:17:20","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2074,"src":"15652:45:20","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":4592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15698:8:20","memberName":"selector","nodeType":"MemberAccess","src":"15652:54:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"15640:66:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4599,"nodeType":"IfStatement","src":"15636:145:20","trueBody":{"id":4598,"nodeType":"Block","src":"15708:73:20","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":4595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15727:42:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":4594,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15720:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15720:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4597,"nodeType":"ExpressionStatement","src":"15720:50:20"}]}}]},"errorName":"","id":4601,"nodeType":"TryCatchClause","parameters":{"id":4588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4587,"mutability":"mutable","name":"response","nameLocation":"15609:8:20","nodeType":"VariableDeclaration","scope":4601,"src":"15602:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4586,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15602:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15592:33:20"},"src":"15584:205:20"},{"block":{"id":4609,"nodeType":"Block","src":"15824:33:20","statements":[{"expression":{"arguments":[{"id":4606,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"15841:6:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4605,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15834:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15834:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4608,"nodeType":"ExpressionStatement","src":"15834:14:20"}]},"errorName":"Error","id":4610,"nodeType":"TryCatchClause","parameters":{"id":4604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4603,"mutability":"mutable","name":"reason","nameLocation":"15816:6:20","nodeType":"VariableDeclaration","scope":4610,"src":"15802:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4602,"name":"string","nodeType":"ElementaryTypeName","src":"15802:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"15801:22:20"},"src":"15790:67:20"},{"block":{"id":4615,"nodeType":"Block","src":"15864:81:20","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572","id":4612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15881:54:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""}],"id":4611,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15874:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15874:62:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4614,"nodeType":"ExpressionStatement","src":"15874:62:20"}]},"errorName":"","id":4616,"nodeType":"TryCatchClause","src":"15858:87:20"}],"externalCall":{"arguments":[{"id":4580,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"15550:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4581,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"15560:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4582,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4566,"src":"15566:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4583,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4568,"src":"15570:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4584,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4570,"src":"15578:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4577,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"15528:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4576,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"15500:27:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15500:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$2093","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":4579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15532:17:20","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2074,"src":"15500:49:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15500:83:20","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":4617,"nodeType":"TryStatement","src":"15496:449:20"}]}}]},"id":4621,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15303:30:20","nodeType":"FunctionDefinition","parameters":{"id":4571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4560,"mutability":"mutable","name":"operator","nameLocation":"15347:8:20","nodeType":"VariableDeclaration","scope":4621,"src":"15339:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4559,"name":"address","nodeType":"ElementaryTypeName","src":"15339:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4562,"mutability":"mutable","name":"from","nameLocation":"15369:4:20","nodeType":"VariableDeclaration","scope":4621,"src":"15361:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4561,"name":"address","nodeType":"ElementaryTypeName","src":"15361:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4564,"mutability":"mutable","name":"to","nameLocation":"15387:2:20","nodeType":"VariableDeclaration","scope":4621,"src":"15379:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4563,"name":"address","nodeType":"ElementaryTypeName","src":"15379:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4566,"mutability":"mutable","name":"id","nameLocation":"15403:2:20","nodeType":"VariableDeclaration","scope":4621,"src":"15395:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4565,"name":"uint256","nodeType":"ElementaryTypeName","src":"15395:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4568,"mutability":"mutable","name":"amount","nameLocation":"15419:6:20","nodeType":"VariableDeclaration","scope":4621,"src":"15411:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4567,"name":"uint256","nodeType":"ElementaryTypeName","src":"15411:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4570,"mutability":"mutable","name":"data","nameLocation":"15444:4:20","nodeType":"VariableDeclaration","scope":4621,"src":"15431:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4569,"name":"bytes","nodeType":"ElementaryTypeName","src":"15431:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15333:119:20"},"returnParameters":{"id":4572,"nodeType":"ParameterList","parameters":[],"src":"15461:0:20"},"scope":4720,"src":"15294:661:20","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4685,"nodeType":"Block","src":"16151:506:20","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4638,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4627,"src":"16161:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16164:10:20","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2425,"src":"16161:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16161:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4684,"nodeType":"IfStatement","src":"16157:496:20","trueBody":{"id":4683,"nodeType":"Block","src":"16178:475:20","statements":[{"clauses":[{"block":{"id":4665,"nodeType":"Block","src":"16323:168:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4654,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"16337:8:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4655,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"16349:27:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":4656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16377:22:20","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"16349:50:20","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16400:8:20","memberName":"selector","nodeType":"MemberAccess","src":"16349:59:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16337:71:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4664,"nodeType":"IfStatement","src":"16333:150:20","trueBody":{"id":4663,"nodeType":"Block","src":"16410:73:20","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":4660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16429:42:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":4659,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16422:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16422:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4662,"nodeType":"ExpressionStatement","src":"16422:50:20"}]}}]},"errorName":"","id":4666,"nodeType":"TryCatchClause","parameters":{"id":4653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4652,"mutability":"mutable","name":"response","nameLocation":"16306:8:20","nodeType":"VariableDeclaration","scope":4666,"src":"16299:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4651,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16299:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16289:33:20"},"src":"16281:210:20"},{"block":{"id":4674,"nodeType":"Block","src":"16526:33:20","statements":[{"expression":{"arguments":[{"id":4671,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"16543:6:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4670,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16536:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16536:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4673,"nodeType":"ExpressionStatement","src":"16536:14:20"}]},"errorName":"Error","id":4675,"nodeType":"TryCatchClause","parameters":{"id":4669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4668,"mutability":"mutable","name":"reason","nameLocation":"16518:6:20","nodeType":"VariableDeclaration","scope":4675,"src":"16504:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4667,"name":"string","nodeType":"ElementaryTypeName","src":"16504:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16503:22:20"},"src":"16492:67:20"},{"block":{"id":4680,"nodeType":"Block","src":"16566:81:20","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572","id":4677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16583:54:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed","typeString":"literal_string \"ERC1155: transfer to non ERC1155Receiver implementer\""}],"id":4676,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16576:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16576:62:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4679,"nodeType":"ExpressionStatement","src":"16576:62:20"}]},"errorName":"","id":4681,"nodeType":"TryCatchClause","src":"16560:87:20"}],"externalCall":{"arguments":[{"id":4645,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"16245:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4646,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"16255:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4647,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"16261:3:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4648,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"16266:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4649,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"16275:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4642,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4627,"src":"16218:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4641,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"16190:27:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$2093_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16190:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$2093","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16222:22:20","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"16190:54:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":4650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16190:90:20","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":4682,"nodeType":"TryStatement","src":"16186:461:20"}]}}]},"id":4686,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"15968:35:20","nodeType":"FunctionDefinition","parameters":{"id":4636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4623,"mutability":"mutable","name":"operator","nameLocation":"16017:8:20","nodeType":"VariableDeclaration","scope":4686,"src":"16009:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4622,"name":"address","nodeType":"ElementaryTypeName","src":"16009:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4625,"mutability":"mutable","name":"from","nameLocation":"16039:4:20","nodeType":"VariableDeclaration","scope":4686,"src":"16031:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4624,"name":"address","nodeType":"ElementaryTypeName","src":"16031:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4627,"mutability":"mutable","name":"to","nameLocation":"16057:2:20","nodeType":"VariableDeclaration","scope":4686,"src":"16049:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4626,"name":"address","nodeType":"ElementaryTypeName","src":"16049:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4630,"mutability":"mutable","name":"ids","nameLocation":"16082:3:20","nodeType":"VariableDeclaration","scope":4686,"src":"16065:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4628,"name":"uint256","nodeType":"ElementaryTypeName","src":"16065:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4629,"nodeType":"ArrayTypeName","src":"16065:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4633,"mutability":"mutable","name":"amounts","nameLocation":"16108:7:20","nodeType":"VariableDeclaration","scope":4686,"src":"16091:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4631,"name":"uint256","nodeType":"ElementaryTypeName","src":"16091:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4632,"nodeType":"ArrayTypeName","src":"16091:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4635,"mutability":"mutable","name":"data","nameLocation":"16134:4:20","nodeType":"VariableDeclaration","scope":4686,"src":"16121:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4634,"name":"bytes","nodeType":"ElementaryTypeName","src":"16121:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16003:139:20"},"returnParameters":{"id":4637,"nodeType":"ParameterList","parameters":[],"src":"16151:0:20"},"scope":4720,"src":"15959:698:20","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4713,"nodeType":"Block","src":"16745:95:20","statements":[{"assignments":[4698],"declarations":[{"constant":false,"id":4698,"mutability":"mutable","name":"array","nameLocation":"16768:5:20","nodeType":"VariableDeclaration","scope":4713,"src":"16751:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4696,"name":"uint256","nodeType":"ElementaryTypeName","src":"16751:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4697,"nodeType":"ArrayTypeName","src":"16751:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4704,"initialValue":{"arguments":[{"hexValue":"31","id":4702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16790:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"16776:13:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4699,"name":"uint256","nodeType":"ElementaryTypeName","src":"16780:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4700,"nodeType":"ArrayTypeName","src":"16780:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16776:16:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"16751:41:20"},{"expression":{"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4705,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"16798:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4707,"indexExpression":{"hexValue":"30","id":4706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16804:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16798:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4708,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"16809:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16798:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4710,"nodeType":"ExpressionStatement","src":"16798:18:20"},{"expression":{"id":4711,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"16830:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4693,"id":4712,"nodeType":"Return","src":"16823:12:20"}]},"id":4714,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArray","nameLocation":"16670:17:20","nodeType":"FunctionDefinition","parameters":{"id":4689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4688,"mutability":"mutable","name":"element","nameLocation":"16696:7:20","nodeType":"VariableDeclaration","scope":4714,"src":"16688:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4687,"name":"uint256","nodeType":"ElementaryTypeName","src":"16688:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16687:17:20"},"returnParameters":{"id":4693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4714,"src":"16727:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4690,"name":"uint256","nodeType":"ElementaryTypeName","src":"16727:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4691,"nodeType":"ArrayTypeName","src":"16727:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16726:18:20"},"scope":4720,"src":"16661:179:20","stateMutability":"pure","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":4715,"nodeType":"StructuredDocumentation","src":"16844:246:20","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":4719,"mutability":"mutable","name":"__gap","nameLocation":"17113:5:20","nodeType":"VariableDeclaration","scope":4720,"src":"17093:25:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage","typeString":"uint256[47]"},"typeName":{"baseType":{"id":4716,"name":"uint256","nodeType":"ElementaryTypeName","src":"17093:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4718,"length":{"hexValue":"3437","id":4717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17101:2:20","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"nodeType":"ArrayTypeName","src":"17093:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage_ptr","typeString":"uint256[47]"}},"visibility":"private"}],"scope":4721,"src":"1234:15887:20","usedErrors":[]}],"src":"315:16807:20"},"id":20}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2691,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"delegatecall","details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":509,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":509,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":806,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ERC1155Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611b65806100206000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461018657600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004611265565b610199565b6040519081526020015b60405180910390f35b6100c56100c03660046112c1565b61027b565b60405190151581526020016100a9565b6100e86100e33660046112e5565b61035e565b6040516100a99190611322565b610108610103366004611538565b6103f2565b005b61011d6101183660046115f2565b6104bb565b6040516100a99190611706565b610108610138366004611719565b610613565b6100c561014b366004611758565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260666020908152604080832093909416825291909152205460ff1690565b61010861019436600461178d565b610622565b600073ffffffffffffffffffffffffffffffffffffffff8316610243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061030e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061027557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610275565b60606067805461036d906117ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610399906117ea565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff851633148061041b575061041b853361014b565b6104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b485858585856106e4565b5050505050565b6060815183511461054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161023a565b6000835167ffffffffffffffff81111561056a5761056a611373565b604051908082528060200260200182016040528015610593578160200160208202803683370190505b50905060005b845181101561060b576105de8582815181106105b7576105b761183d565b60200260200101518583815181106105d1576105d161183d565b6020026020010151610199565b8282815181106105f0576105f061183d565b60209081029190910101526106048161189b565b9050610599565b509392505050565b61061e338383610a21565b5050565b73ffffffffffffffffffffffffffffffffffffffff851633148061064b575061064b853361014b565b6106d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b48585858585610b74565b8151835114610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff8416610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b3360005b845181101561098c5760008582815181106108395761083961183d565b6020026020010151905060008583815181106108575761085761183d565b602090810291909101810151600084815260658352604080822073ffffffffffffffffffffffffffffffffffffffff8e168352909352919091205490915081811015610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600083815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e8116855292528083208585039055908b168252812080548492906109719084906118d3565b92505081905550505050806109859061189b565b905061081c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610a039291906118e6565b60405180910390a4610a19818787878787610db6565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526066602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8416610c17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b336000610c2385611049565b90506000610c3085611049565b9050600086815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8c16845290915290205485811015610cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600087815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8d8116855292528083208985039055908a16825281208054889290610d3e9084906118d3565b9091555050604080518881526020810188905273ffffffffffffffffffffffffffffffffffffffff808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610dab848a8a8a8a8a611094565b505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c8190610e2d908990899088908890889060040161195e565b6020604051808303816000875af1925050508015610e86575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610e83918101906119db565b60015b610f6f57610e926119f8565b806308c379a003610ee55750610ea6611a14565b80610eb15750610ee7565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023a9190611322565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161023a565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b50505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106110835761108361183d565b602090810291909101015292915050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e619061110b9089908990889088908890600401611acd565b6020604051808303816000875af1925050508015611164575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611161918101906119db565b60015b61117057610e926119f8565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027557600080fd5b6000806040838503121561127857600080fd5b6112828484611241565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146112be57600080fd5b50565b6000602082840312156112d357600080fd5b81356112de81611290565b9392505050565b6000602082840312156112f757600080fd5b5035919050565b60005b83811015611319578181015183820152602001611301565b50506000910152565b60208152600082518060208401526113418160408501602087016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156113e6576113e6611373565b6040525050565b600067ffffffffffffffff82111561140757611407611373565b5060051b60200190565b600082601f83011215801561142557600080fd5b823567ffffffffffffffff81111561143f5761143f611373565b8060051b60405161145360208301826113a2565b91825260208186018101929081018784111561146e57600080fd5b6020870192505b83831015611497578415611487578485fd5b8235815260209283019201611475565b509695505050505050565b600082601f8301121580156114b657600080fd5b50813567ffffffffffffffff8111156114d1576114d1611373565b60405161150660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601826113a2565b81815284602083860101111561151b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312801561155157600080fd5b5061155c8787611241565b945061156b8760208801611241565b9350604086013567ffffffffffffffff81111561158757600080fd5b61159388828901611411565b935050606086013567ffffffffffffffff8111156115b057600080fd5b6115bc88828901611411565b925050608086013567ffffffffffffffff8111156115d957600080fd5b6115e5888289016114a2565b9150509295509295909350565b600080604083850312801561160657600080fd5b50823567ffffffffffffffff81111561161e57600080fd5b8301601f8101851361162f57600080fd5b803561163a816113ed565b60405161164782826113a2565b80915082815260208101915060208360051b85010192508783111561166b57600080fd5b6020840193505b82841015611695576116848885611241565b825260209384019390910190611672565b9450505050602083013567ffffffffffffffff8111156116b457600080fd5b6116c085828601611411565b9150509250929050565b600081518084526020840193506020830160005b828110156116fc5781518652602095860195909101906001016116de565b5093949350505050565b6020815260006112de60208301846116ca565b600080604083850312801561172d57600080fd5b506117388484611241565b91506020830135801515811461174d57600080fd5b809150509250929050565b6000806040838503121561176b57600080fd5b6117758484611241565b91506117848460208501611241565b90509250929050565b600080600080600060a08688031280156117a657600080fd5b506117b18787611241565b94506117c08760208801611241565b93506040860135925060608601359150608086013567ffffffffffffffff8111156115d957600080fd5b600181811c908216806117fe57607f821691505b602082108103611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118cc576118cc61186c565b5060010190565b808201808211156102755761027561186c565b6040815260006118f960408301856116ca565b828103602084015261190b81856116ca565b95945050505050565b6000815180845261192c8160208601602086016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006119a960a08301866116ca565b82810360608401526119bb81866116ca565b905082810360808401526119cf8185611914565b98975050505050505050565b6000602082840312156119ed57600080fd5b81516112de81611290565b600060033d1115611a115760046000803e5060005160e01c5b90565b600060443d1015611a225790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d602482011167ffffffffffffffff82111715611a6a57505090565b808201805167ffffffffffffffff811115611a86575050505090565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d8501016020828401011115611abe575050505090565b61060b602082850101856113a2565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015283604082015282606082015260a060808201526000611b2460a0830184611914565b97965050505050505056fea2646970667358221220b1e6d4c39584beeca042d6d6d3145a9098d64ac1722b495d534c2ab1a66534b464736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B65 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x199 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C1 JUMP JUMPDEST PUSH2 0x27B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x1538 JUMP JUMPDEST PUSH2 0x3F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x15F2 JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1706 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1719 JUMP JUMPDEST PUSH2 0x613 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x1758 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x622 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x243 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x30E JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x275 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x275 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x36D SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3E6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3BB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3E6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3C9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x41B JUMPI POP PUSH2 0x41B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x6E4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH2 0x56A PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x593 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH2 0x5DE DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B7 JUMPI PUSH2 0x5B7 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D1 JUMPI PUSH2 0x5D1 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x199 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5F0 JUMPI PUSH2 0x5F0 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x604 DUP2 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x599 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x61E CALLER DUP4 DUP4 PUSH2 0xA21 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x64B JUMPI POP PUSH2 0x64B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xB74 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x818 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x98C JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x839 JUMPI PUSH2 0x839 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x857 JUMPI PUSH2 0x857 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x971 SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x985 SWAP1 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x81C JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA03 SWAP3 SWAP2 SWAP1 PUSH2 0x18E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA19 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xDB6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xADC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0xC23 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC30 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xCF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xD3E SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDAB DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1094 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0xE2D SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x195E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE86 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE83 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF6F JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0xEE5 JUMPI POP PUSH2 0xEA6 PUSH2 0x1A14 JUMP JUMPDEST DUP1 PUSH2 0xEB1 JUMPI POP PUSH2 0xEE7 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2045524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1083 JUMPI PUSH2 0x1083 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x110B SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1164 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1161 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1170 JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1282 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x12BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1319 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1301 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1341 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x13E6 JUMPI PUSH2 0x13E6 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1407 JUMPI PUSH2 0x1407 PUSH2 0x1373 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x1425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x143F JUMPI PUSH2 0x143F PUSH2 0x1373 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH2 0x1453 PUSH1 0x20 DUP4 ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD DUP8 DUP5 GT ISZERO PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x1497 JUMPI DUP5 ISZERO PUSH2 0x1487 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1475 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x14B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x14D1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1506 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x151B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x1551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x155C DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x156B DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1593 DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15BC DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E5 DUP9 DUP3 DUP10 ADD PUSH2 0x14A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x1606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x161E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x162F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x163A DUP2 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1647 DUP3 DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP1 SWAP2 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 POP PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 POP DUP8 DUP4 GT ISZERO PUSH2 0x166B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x1695 JUMPI PUSH2 0x1684 DUP9 DUP6 PUSH2 0x1241 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1672 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C0 DUP6 DUP3 DUP7 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16FC JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x16DE JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12DE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16CA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x172D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1738 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x174D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1775 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH2 0x1784 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x17A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B1 DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x17C0 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x17FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1837 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x18CC JUMPI PUSH2 0x18CC PUSH2 0x186C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x275 JUMPI PUSH2 0x275 PUSH2 0x186C JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18F9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190B DUP2 DUP6 PUSH2 0x16CA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x192C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x19A9 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x19BB DUP2 DUP7 PUSH2 0x16CA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x19CF DUP2 DUP6 PUSH2 0x1914 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x1A11 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x1A22 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD RETURNDATASIZE PUSH1 0x24 DUP3 ADD GT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1A6A JUMPI POP POP SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A86 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE DUP6 ADD ADD PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x1ABE JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x60B PUSH1 0x20 DUP3 DUP6 ADD ADD DUP6 PUSH2 0x13A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1B24 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE6 0xD4 0xC3 SWAP6 DUP5 0xBE 0xEC LOG0 TIMESTAMP 0xD6 0xD6 0xD3 EQ GAS SWAP1 SWAP9 0xD6 0x4A 0xC1 PUSH19 0x2B495D534C2AB1A66534B464736F6C63430008 LT STOP CALLER ","sourceMap":"682:17322:6:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1890":{"entryPoint":null,"id":1890,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_2046":{"entryPoint":4169,"id":2046,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1871":{"entryPoint":null,"id":1871,"parameterSlots":6,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_2018":{"entryPoint":3510,"id":2018,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1953":{"entryPoint":4244,"id":1953,"parameterSlots":6,"returnSlots":0},"@_msgSender_2677":{"entryPoint":null,"id":2677,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_1369":{"entryPoint":1764,"id":1369,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1234":{"entryPoint":2932,"id":1234,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1852":{"entryPoint":2593,"id":1852,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_1004":{"entryPoint":1211,"id":1004,"parameterSlots":2,"returnSlots":1},"@balanceOf_940":{"entryPoint":409,"id":940,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_1039":{"entryPoint":null,"id":1039,"parameterSlots":2,"returnSlots":1},"@isContract_2425":{"entryPoint":null,"id":2425,"parameterSlots":1,"returnSlots":1},"@safeBatchTransferFrom_1117":{"entryPoint":1010,"id":1117,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_1077":{"entryPoint":1570,"id":1077,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_1021":{"entryPoint":1555,"id":1021,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3016":{"entryPoint":null,"id":3016,"parameterSlots":1,"returnSlots":1},"@supportsInterface_900":{"entryPoint":635,"id":900,"parameterSlots":1,"returnSlots":1},"@uri_912":{"entryPoint":862,"id":912,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":4673,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":5137,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":5282,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5976,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":5432,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":6029,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":5913,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4709,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":5618,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":6619,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4837,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":5834,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":6420,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6494,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6861,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5894,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":6374,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4898,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":5101,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6355,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4862,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6122,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":5026,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":6299,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6252,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6205,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4979,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":6648,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":6676,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":4752,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17323:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"68:176:21","statements":[{"nodeType":"YulAssignment","src":"78:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"100:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"87:12:21"},"nodeType":"YulFunctionCall","src":"87:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"78:5:21"}]},{"nodeType":"YulVariableDeclaration","src":"116:20:21","value":{"name":"value","nodeType":"YulIdentifier","src":"131:5:21"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"120:7:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"222:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"231:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"234:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"224:6:21"},"nodeType":"YulFunctionCall","src":"224:12:21"},"nodeType":"YulExpressionStatement","src":"224:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"158:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"169:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"176:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"165:3:21"},"nodeType":"YulFunctionCall","src":"165:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"155:2:21"},"nodeType":"YulFunctionCall","src":"155:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"148:6:21"},"nodeType":"YulFunctionCall","src":"148:73:21"},"nodeType":"YulIf","src":"145:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"50:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"58:5:21","type":""}],"src":"14:230:21"},{"body":{"nodeType":"YulBlock","src":"336:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"382:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"391:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"394:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"384:6:21"},"nodeType":"YulFunctionCall","src":"384:12:21"},"nodeType":"YulExpressionStatement","src":"384:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"357:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"366:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"353:3:21"},"nodeType":"YulFunctionCall","src":"353:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"378:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"349:3:21"},"nodeType":"YulFunctionCall","src":"349:32:21"},"nodeType":"YulIf","src":"346:52:21"},{"nodeType":"YulAssignment","src":"407:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"436:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"447:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"417:18:21"},"nodeType":"YulFunctionCall","src":"417:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:21"}]},{"nodeType":"YulAssignment","src":"464:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"491:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"502:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"487:3:21"},"nodeType":"YulFunctionCall","src":"487:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"474:12:21"},"nodeType":"YulFunctionCall","src":"474:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"464:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"294:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"305:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"317:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"325:6:21","type":""}],"src":"249:263:21"},{"body":{"nodeType":"YulBlock","src":"618:76:21","statements":[{"nodeType":"YulAssignment","src":"628:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"640:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"651:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"636:3:21"},"nodeType":"YulFunctionCall","src":"636:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"628:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"670:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"681:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"663:6:21"},"nodeType":"YulFunctionCall","src":"663:25:21"},"nodeType":"YulExpressionStatement","src":"663:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"587:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"598:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"609:4:21","type":""}],"src":"517:177:21"},{"body":{"nodeType":"YulBlock","src":"743:133:21","statements":[{"body":{"nodeType":"YulBlock","src":"854:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"863:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"866:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"856:6:21"},"nodeType":"YulFunctionCall","src":"856:12:21"},"nodeType":"YulExpressionStatement","src":"856:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"766:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"777:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"784:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"773:3:21"},"nodeType":"YulFunctionCall","src":"773:78:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"763:2:21"},"nodeType":"YulFunctionCall","src":"763:89:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"756:6:21"},"nodeType":"YulFunctionCall","src":"756:97:21"},"nodeType":"YulIf","src":"753:117:21"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"732:5:21","type":""}],"src":"699:177:21"},{"body":{"nodeType":"YulBlock","src":"950:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"996:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1005:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1008:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"998:6:21"},"nodeType":"YulFunctionCall","src":"998:12:21"},"nodeType":"YulExpressionStatement","src":"998:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"971:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"980:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"967:3:21"},"nodeType":"YulFunctionCall","src":"967:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"992:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"963:3:21"},"nodeType":"YulFunctionCall","src":"963:32:21"},"nodeType":"YulIf","src":"960:52:21"},{"nodeType":"YulVariableDeclaration","src":"1021:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1047:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1034:12:21"},"nodeType":"YulFunctionCall","src":"1034:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1025:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1090:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"1066:23:21"},"nodeType":"YulFunctionCall","src":"1066:30:21"},"nodeType":"YulExpressionStatement","src":"1066:30:21"},{"nodeType":"YulAssignment","src":"1105:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1115:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1105:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"916:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"927:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"939:6:21","type":""}],"src":"881:245:21"},{"body":{"nodeType":"YulBlock","src":"1226:92:21","statements":[{"nodeType":"YulAssignment","src":"1236:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1248:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1259:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1244:3:21"},"nodeType":"YulFunctionCall","src":"1244:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1236:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1278:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1303:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1296:6:21"},"nodeType":"YulFunctionCall","src":"1296:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1289:6:21"},"nodeType":"YulFunctionCall","src":"1289:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1271:6:21"},"nodeType":"YulFunctionCall","src":"1271:41:21"},"nodeType":"YulExpressionStatement","src":"1271:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1195:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1206:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1217:4:21","type":""}],"src":"1131:187:21"},{"body":{"nodeType":"YulBlock","src":"1393:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"1439:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1448:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1451:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1441:6:21"},"nodeType":"YulFunctionCall","src":"1441:12:21"},"nodeType":"YulExpressionStatement","src":"1441:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1414:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1423:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1410:3:21"},"nodeType":"YulFunctionCall","src":"1410:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1435:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1406:3:21"},"nodeType":"YulFunctionCall","src":"1406:32:21"},"nodeType":"YulIf","src":"1403:52:21"},{"nodeType":"YulAssignment","src":"1464:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1487:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1474:12:21"},"nodeType":"YulFunctionCall","src":"1474:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1464:6:21"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1359:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1370:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1382:6:21","type":""}],"src":"1323:180:21"},{"body":{"nodeType":"YulBlock","src":"1574:184:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1584:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1593:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1588:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1653:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1678:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"1683:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1674:3:21"},"nodeType":"YulFunctionCall","src":"1674:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1697:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"1702:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1693:3:21"},"nodeType":"YulFunctionCall","src":"1693:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1687:5:21"},"nodeType":"YulFunctionCall","src":"1687:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1667:6:21"},"nodeType":"YulFunctionCall","src":"1667:39:21"},"nodeType":"YulExpressionStatement","src":"1667:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1614:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"1617:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1611:2:21"},"nodeType":"YulFunctionCall","src":"1611:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1625:19:21","statements":[{"nodeType":"YulAssignment","src":"1627:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1636:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"1639:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1632:3:21"},"nodeType":"YulFunctionCall","src":"1632:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1627:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"1607:3:21","statements":[]},"src":"1603:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1736:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1732:3:21"},"nodeType":"YulFunctionCall","src":"1732:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"1750:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1725:6:21"},"nodeType":"YulFunctionCall","src":"1725:27:21"},"nodeType":"YulExpressionStatement","src":"1725:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1552:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1557:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"1562:6:21","type":""}],"src":"1508:250:21"},{"body":{"nodeType":"YulBlock","src":"1884:334:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1901:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1894:6:21"},"nodeType":"YulFunctionCall","src":"1894:21:21"},"nodeType":"YulExpressionStatement","src":"1894:21:21"},{"nodeType":"YulVariableDeclaration","src":"1924:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1944:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1938:5:21"},"nodeType":"YulFunctionCall","src":"1938:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1928:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1971:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1967:3:21"},"nodeType":"YulFunctionCall","src":"1967:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"1987:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1960:6:21"},"nodeType":"YulFunctionCall","src":"1960:34:21"},"nodeType":"YulExpressionStatement","src":"1960:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2042:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2050:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2038:3:21"},"nodeType":"YulFunctionCall","src":"2038:15:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2059:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2070:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2055:3:21"},"nodeType":"YulFunctionCall","src":"2055:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"2075:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2003:34:21"},"nodeType":"YulFunctionCall","src":"2003:79:21"},"nodeType":"YulExpressionStatement","src":"2003:79:21"},{"nodeType":"YulAssignment","src":"2091:121:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2107:9:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2126:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2134:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:21"},"nodeType":"YulFunctionCall","src":"2122:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"2139:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:21"},"nodeType":"YulFunctionCall","src":"2118:88:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2103:3:21"},"nodeType":"YulFunctionCall","src":"2103:104:21"},{"kind":"number","nodeType":"YulLiteral","src":"2209:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2099:3:21"},"nodeType":"YulFunctionCall","src":"2099:113:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2091:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1853:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1864:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1875:4:21","type":""}],"src":"1763:455:21"},{"body":{"nodeType":"YulBlock","src":"2255:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2272:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2275:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2265:6:21"},"nodeType":"YulFunctionCall","src":"2265:88:21"},"nodeType":"YulExpressionStatement","src":"2265:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2369:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2372:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2362:6:21"},"nodeType":"YulFunctionCall","src":"2362:15:21"},"nodeType":"YulExpressionStatement","src":"2362:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2393:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2396:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2386:6:21"},"nodeType":"YulFunctionCall","src":"2386:15:21"},"nodeType":"YulExpressionStatement","src":"2386:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2223:184:21"},{"body":{"nodeType":"YulBlock","src":"2459:261:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2469:117:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2491:6:21"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2507:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2513:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2503:3:21"},"nodeType":"YulFunctionCall","src":"2503:13:21"},{"kind":"number","nodeType":"YulLiteral","src":"2518:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2499:3:21"},"nodeType":"YulFunctionCall","src":"2499:86:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2487:3:21"},"nodeType":"YulFunctionCall","src":"2487:99:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2473:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2661:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2663:16:21"},"nodeType":"YulFunctionCall","src":"2663:18:21"},"nodeType":"YulExpressionStatement","src":"2663:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2604:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2616:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2601:2:21"},"nodeType":"YulFunctionCall","src":"2601:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2640:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2652:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2637:2:21"},"nodeType":"YulFunctionCall","src":"2637:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2598:2:21"},"nodeType":"YulFunctionCall","src":"2598:62:21"},"nodeType":"YulIf","src":"2595:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2699:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2703:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2692:6:21"},"nodeType":"YulFunctionCall","src":"2692:22:21"},"nodeType":"YulExpressionStatement","src":"2692:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2441:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"2449:4:21","type":""}],"src":"2412:308:21"},{"body":{"nodeType":"YulBlock","src":"2794:114:21","statements":[{"body":{"nodeType":"YulBlock","src":"2838:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2840:16:21"},"nodeType":"YulFunctionCall","src":"2840:18:21"},"nodeType":"YulExpressionStatement","src":"2840:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2810:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2818:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2807:2:21"},"nodeType":"YulFunctionCall","src":"2807:30:21"},"nodeType":"YulIf","src":"2804:56:21"},{"nodeType":"YulAssignment","src":"2869:33:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2885:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2888:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2881:3:21"},"nodeType":"YulFunctionCall","src":"2881:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"2897:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2877:3:21"},"nodeType":"YulFunctionCall","src":"2877:25:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2869:4:21"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2774:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2785:4:21","type":""}],"src":"2725:183:21"},{"body":{"nodeType":"YulBlock","src":"2977:758:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2987:45:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3012:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3020:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3008:3:21"},"nodeType":"YulFunctionCall","src":"3008:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3027:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3004:3:21"},"nodeType":"YulFunctionCall","src":"3004:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2997:6:21"},"nodeType":"YulFunctionCall","src":"2997:35:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2991:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3047:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3056:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3059:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3049:6:21"},"nodeType":"YulFunctionCall","src":"3049:12:21"},"nodeType":"YulExpressionStatement","src":"3049:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3044:2:21"},"nodeType":"YulIf","src":"3041:22:21"},{"nodeType":"YulVariableDeclaration","src":"3072:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3099:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3086:12:21"},"nodeType":"YulFunctionCall","src":"3086:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3076:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3149:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3151:16:21"},"nodeType":"YulFunctionCall","src":"3151:18:21"},"nodeType":"YulExpressionStatement","src":"3151:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3121:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3129:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3118:2:21"},"nodeType":"YulFunctionCall","src":"3118:30:21"},"nodeType":"YulIf","src":"3115:56:21"},{"nodeType":"YulVariableDeclaration","src":"3180:26:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3196:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3199:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3192:3:21"},"nodeType":"YulFunctionCall","src":"3192:14:21"},"variables":[{"name":"size","nodeType":"YulTypedName","src":"3184:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3215:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3235:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3229:5:21"},"nodeType":"YulFunctionCall","src":"3229:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3219:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3267:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3279:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"3285:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3275:3:21"},"nodeType":"YulFunctionCall","src":"3275:15:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3247:19:21"},"nodeType":"YulFunctionCall","src":"3247:44:21"},"nodeType":"YulExpressionStatement","src":"3247:44:21"},{"nodeType":"YulVariableDeclaration","src":"3300:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3311:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3304:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3333:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"3341:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3326:6:21"},"nodeType":"YulFunctionCall","src":"3326:22:21"},"nodeType":"YulExpressionStatement","src":"3326:22:21"},{"nodeType":"YulAssignment","src":"3357:24:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3368:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3376:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3364:3:21"},"nodeType":"YulFunctionCall","src":"3364:17:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3357:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"3390:42:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3412:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"3420:4:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3408:3:21"},"nodeType":"YulFunctionCall","src":"3408:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"3427:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3404:3:21"},"nodeType":"YulFunctionCall","src":"3404:28:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3394:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3460:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3472:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3462:6:21"},"nodeType":"YulFunctionCall","src":"3462:12:21"},"nodeType":"YulExpressionStatement","src":"3462:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3447:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"3455:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3444:2:21"},"nodeType":"YulFunctionCall","src":"3444:15:21"},"nodeType":"YulIf","src":"3441:35:21"},{"nodeType":"YulVariableDeclaration","src":"3485:28:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3500:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3508:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:21"},"nodeType":"YulFunctionCall","src":"3496:17:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3489:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3580:125:21","statements":[{"body":{"nodeType":"YulBlock","src":"3600:18:21","statements":[{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3609:2:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3613:2:21"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3602:6:21"},"nodeType":"YulFunctionCall","src":"3602:14:21"},"nodeType":"YulExpressionStatement","src":"3602:14:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3597:2:21"},"nodeType":"YulIf","src":"3594:24:21"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3638:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3656:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3643:12:21"},"nodeType":"YulFunctionCall","src":"3643:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3631:6:21"},"nodeType":"YulFunctionCall","src":"3631:30:21"},"nodeType":"YulExpressionStatement","src":"3631:30:21"},{"nodeType":"YulAssignment","src":"3674:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3685:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3690:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3681:3:21"},"nodeType":"YulFunctionCall","src":"3681:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3674:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3533:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3538:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3530:2:21"},"nodeType":"YulFunctionCall","src":"3530:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3546:25:21","statements":[{"nodeType":"YulAssignment","src":"3548:21:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3559:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3564:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3555:3:21"},"nodeType":"YulFunctionCall","src":"3555:14:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3548:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"3526:3:21","statements":[]},"src":"3522:183:21"},{"nodeType":"YulAssignment","src":"3714:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3723:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3714:5:21"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2951:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"2959:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2967:5:21","type":""}],"src":"2913:822:21"},{"body":{"nodeType":"YulBlock","src":"3792:611:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3802:45:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3827:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3835:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3823:3:21"},"nodeType":"YulFunctionCall","src":"3823:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3842:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3819:3:21"},"nodeType":"YulFunctionCall","src":"3819:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3812:6:21"},"nodeType":"YulFunctionCall","src":"3812:35:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3806:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3862:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3871:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3874:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3864:6:21"},"nodeType":"YulFunctionCall","src":"3864:12:21"},"nodeType":"YulExpressionStatement","src":"3864:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3859:2:21"},"nodeType":"YulIf","src":"3856:22:21"},{"nodeType":"YulVariableDeclaration","src":"3887:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3914:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3901:12:21"},"nodeType":"YulFunctionCall","src":"3901:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3891:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3964:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3966:16:21"},"nodeType":"YulFunctionCall","src":"3966:18:21"},"nodeType":"YulExpressionStatement","src":"3966:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3936:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3944:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3933:2:21"},"nodeType":"YulFunctionCall","src":"3933:30:21"},"nodeType":"YulIf","src":"3930:56:21"},{"nodeType":"YulVariableDeclaration","src":"3995:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4015:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4009:5:21"},"nodeType":"YulFunctionCall","src":"4009:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3999:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4047:6:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4067:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4075:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4063:3:21"},"nodeType":"YulFunctionCall","src":"4063:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"4082:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4059:3:21"},"nodeType":"YulFunctionCall","src":"4059:90:21"},{"kind":"number","nodeType":"YulLiteral","src":"4151:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:21"},"nodeType":"YulFunctionCall","src":"4055:101:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4027:19:21"},"nodeType":"YulFunctionCall","src":"4027:130:21"},"nodeType":"YulExpressionStatement","src":"4027:130:21"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4173:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"4181:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4166:6:21"},"nodeType":"YulFunctionCall","src":"4166:22:21"},"nodeType":"YulExpressionStatement","src":"4166:22:21"},{"body":{"nodeType":"YulBlock","src":"4240:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4249:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4252:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4242:6:21"},"nodeType":"YulFunctionCall","src":"4242:12:21"},"nodeType":"YulExpressionStatement","src":"4242:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4211:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"4219:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4207:3:21"},"nodeType":"YulFunctionCall","src":"4207:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"4228:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4203:3:21"},"nodeType":"YulFunctionCall","src":"4203:30:21"},{"name":"end","nodeType":"YulIdentifier","src":"4235:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4200:2:21"},"nodeType":"YulFunctionCall","src":"4200:39:21"},"nodeType":"YulIf","src":"4197:59:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4282:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4290:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4278:3:21"},"nodeType":"YulFunctionCall","src":"4278:17:21"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4301:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4309:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:21"},"nodeType":"YulFunctionCall","src":"4297:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"4316:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4265:12:21"},"nodeType":"YulFunctionCall","src":"4265:58:21"},"nodeType":"YulExpressionStatement","src":"4265:58:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4347:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"4355:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4343:3:21"},"nodeType":"YulFunctionCall","src":"4343:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"4364:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4339:3:21"},"nodeType":"YulFunctionCall","src":"4339:30:21"},{"kind":"number","nodeType":"YulLiteral","src":"4371:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4332:6:21"},"nodeType":"YulFunctionCall","src":"4332:41:21"},"nodeType":"YulExpressionStatement","src":"4332:41:21"},{"nodeType":"YulAssignment","src":"4382:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4391:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4382:5:21"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3766:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3774:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3782:5:21","type":""}],"src":"3740:663:21"},{"body":{"nodeType":"YulBlock","src":"4605:796:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4615:43:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4633:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4642:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4629:3:21"},"nodeType":"YulFunctionCall","src":"4629:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4654:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4625:3:21"},"nodeType":"YulFunctionCall","src":"4625:33:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4619:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4673:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4682:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4685:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4675:6:21"},"nodeType":"YulFunctionCall","src":"4675:12:21"},"nodeType":"YulExpressionStatement","src":"4675:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"4670:2:21"},"nodeType":"YulIf","src":"4667:22:21"},{"nodeType":"YulAssignment","src":"4698:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4727:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4738:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4708:18:21"},"nodeType":"YulFunctionCall","src":"4708:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4698:6:21"}]},{"nodeType":"YulAssignment","src":"4755:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4788:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4799:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4784:3:21"},"nodeType":"YulFunctionCall","src":"4784:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4804:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4765:18:21"},"nodeType":"YulFunctionCall","src":"4765:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4755:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4821:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4852:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4863:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4848:3:21"},"nodeType":"YulFunctionCall","src":"4848:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4835:12:21"},"nodeType":"YulFunctionCall","src":"4835:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4825:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4910:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4919:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4922:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4912:6:21"},"nodeType":"YulFunctionCall","src":"4912:12:21"},"nodeType":"YulExpressionStatement","src":"4912:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4882:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4890:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4879:2:21"},"nodeType":"YulFunctionCall","src":"4879:30:21"},"nodeType":"YulIf","src":"4876:50:21"},{"nodeType":"YulAssignment","src":"4935:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4978:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4989:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4974:3:21"},"nodeType":"YulFunctionCall","src":"4974:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4998:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4945:28:21"},"nodeType":"YulFunctionCall","src":"4945:61:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4935:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5015:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5048:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5059:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5044:3:21"},"nodeType":"YulFunctionCall","src":"5044:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5031:12:21"},"nodeType":"YulFunctionCall","src":"5031:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5019:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5108:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5117:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5120:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5110:6:21"},"nodeType":"YulFunctionCall","src":"5110:12:21"},"nodeType":"YulExpressionStatement","src":"5110:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5078:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5088:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5075:2:21"},"nodeType":"YulFunctionCall","src":"5075:32:21"},"nodeType":"YulIf","src":"5072:52:21"},{"nodeType":"YulAssignment","src":"5133:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5176:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5187:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:21"},"nodeType":"YulFunctionCall","src":"5172:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5198:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5143:28:21"},"nodeType":"YulFunctionCall","src":"5143:63:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5133:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5215:49:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5248:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5259:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5244:3:21"},"nodeType":"YulFunctionCall","src":"5244:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5231:12:21"},"nodeType":"YulFunctionCall","src":"5231:33:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5219:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5309:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5318:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5321:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5311:6:21"},"nodeType":"YulFunctionCall","src":"5311:12:21"},"nodeType":"YulExpressionStatement","src":"5311:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5279:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5289:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5276:2:21"},"nodeType":"YulFunctionCall","src":"5276:32:21"},"nodeType":"YulIf","src":"5273:52:21"},{"nodeType":"YulAssignment","src":"5334:61:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5365:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5376:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5361:3:21"},"nodeType":"YulFunctionCall","src":"5361:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5387:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5344:16:21"},"nodeType":"YulFunctionCall","src":"5344:51:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5334:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4539:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4550:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4562:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4570:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4578:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4586:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4594:6:21","type":""}],"src":"4408:993:21"},{"body":{"nodeType":"YulBlock","src":"5543:1135:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5553:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5571:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5580:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5567:3:21"},"nodeType":"YulFunctionCall","src":"5567:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5592:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5563:3:21"},"nodeType":"YulFunctionCall","src":"5563:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5557:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5610:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5619:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5622:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5612:6:21"},"nodeType":"YulFunctionCall","src":"5612:12:21"},"nodeType":"YulExpressionStatement","src":"5612:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"5607:2:21"},"nodeType":"YulIf","src":"5604:22:21"},{"nodeType":"YulVariableDeclaration","src":"5635:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5662:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5649:12:21"},"nodeType":"YulFunctionCall","src":"5649:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5639:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5715:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5724:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5727:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5717:6:21"},"nodeType":"YulFunctionCall","src":"5717:12:21"},"nodeType":"YulExpressionStatement","src":"5717:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5687:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5695:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5684:2:21"},"nodeType":"YulFunctionCall","src":"5684:30:21"},"nodeType":"YulIf","src":"5681:50:21"},{"nodeType":"YulVariableDeclaration","src":"5740:38:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5760:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5771:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5756:3:21"},"nodeType":"YulFunctionCall","src":"5756:22:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5744:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5832:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5841:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5844:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5834:6:21"},"nodeType":"YulFunctionCall","src":"5834:12:21"},"nodeType":"YulExpressionStatement","src":"5834:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5805:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5815:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5801:3:21"},"nodeType":"YulFunctionCall","src":"5801:19:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5822:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5797:3:21"},"nodeType":"YulFunctionCall","src":"5797:33:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5790:6:21"},"nodeType":"YulFunctionCall","src":"5790:41:21"},"nodeType":"YulIf","src":"5787:61:21"},{"nodeType":"YulVariableDeclaration","src":"5857:36:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5884:8:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5871:12:21"},"nodeType":"YulFunctionCall","src":"5871:22:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5861:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5902:59:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5954:6:21"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"5914:39:21"},"nodeType":"YulFunctionCall","src":"5914:47:21"},"variables":[{"name":"size","nodeType":"YulTypedName","src":"5906:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5970:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5990:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5984:5:21"},"nodeType":"YulFunctionCall","src":"5984:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5974:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6022:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"6030:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6002:19:21"},"nodeType":"YulFunctionCall","src":"6002:33:21"},"nodeType":"YulExpressionStatement","src":"6002:33:21"},{"nodeType":"YulVariableDeclaration","src":"6044:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6055:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6048:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6077:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"6085:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6070:6:21"},"nodeType":"YulFunctionCall","src":"6070:22:21"},"nodeType":"YulExpressionStatement","src":"6070:22:21"},{"nodeType":"YulAssignment","src":"6101:24:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6112:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6120:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6108:3:21"},"nodeType":"YulFunctionCall","src":"6108:17:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6101:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"6134:54:21","value":{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6156:8:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6170:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"6173:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6166:3:21"},"nodeType":"YulFunctionCall","src":"6166:14:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6152:3:21"},"nodeType":"YulFunctionCall","src":"6152:29:21"},{"kind":"number","nodeType":"YulLiteral","src":"6183:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6148:3:21"},"nodeType":"YulFunctionCall","src":"6148:40:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6138:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6220:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6229:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6232:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6222:6:21"},"nodeType":"YulFunctionCall","src":"6222:12:21"},"nodeType":"YulExpressionStatement","src":"6222:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6203:6:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6211:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6200:2:21"},"nodeType":"YulFunctionCall","src":"6200:19:21"},"nodeType":"YulIf","src":"6197:39:21"},{"nodeType":"YulVariableDeclaration","src":"6245:30:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6260:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"6270:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6256:3:21"},"nodeType":"YulFunctionCall","src":"6256:19:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6249:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6342:103:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6363:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6387:3:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6392:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6368:18:21"},"nodeType":"YulFunctionCall","src":"6368:32:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6356:6:21"},"nodeType":"YulFunctionCall","src":"6356:45:21"},"nodeType":"YulExpressionStatement","src":"6356:45:21"},{"nodeType":"YulAssignment","src":"6414:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6425:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6430:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6421:3:21"},"nodeType":"YulFunctionCall","src":"6421:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6414:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6295:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6300:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6292:2:21"},"nodeType":"YulFunctionCall","src":"6292:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6308:25:21","statements":[{"nodeType":"YulAssignment","src":"6310:21:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6321:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6326:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6317:3:21"},"nodeType":"YulFunctionCall","src":"6317:14:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6310:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"6288:3:21","statements":[]},"src":"6284:161:21"},{"nodeType":"YulAssignment","src":"6454:16:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6464:6:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6454:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"6479:50:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6512:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6523:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6508:3:21"},"nodeType":"YulFunctionCall","src":"6508:20:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6495:12:21"},"nodeType":"YulFunctionCall","src":"6495:34:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6483:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6574:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6583:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6586:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6576:6:21"},"nodeType":"YulFunctionCall","src":"6576:12:21"},"nodeType":"YulExpressionStatement","src":"6576:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6544:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"6554:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6541:2:21"},"nodeType":"YulFunctionCall","src":"6541:32:21"},"nodeType":"YulIf","src":"6538:52:21"},{"nodeType":"YulAssignment","src":"6599:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6642:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6653:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6638:3:21"},"nodeType":"YulFunctionCall","src":"6638:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6664:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6609:28:21"},"nodeType":"YulFunctionCall","src":"6609:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6599:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5501:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5512:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5524:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5532:6:21","type":""}],"src":"5406:1272:21"},{"body":{"nodeType":"YulBlock","src":"6744:359:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6754:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6774:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6768:5:21"},"nodeType":"YulFunctionCall","src":"6768:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6758:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6796:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6801:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6789:6:21"},"nodeType":"YulFunctionCall","src":"6789:19:21"},"nodeType":"YulExpressionStatement","src":"6789:19:21"},{"nodeType":"YulAssignment","src":"6817:21:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6828:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6833:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6824:3:21"},"nodeType":"YulFunctionCall","src":"6824:14:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6817:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"6847:30:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6865:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"6872:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6861:3:21"},"nodeType":"YulFunctionCall","src":"6861:16:21"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6851:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6886:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6895:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6890:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6954:124:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6975:3:21"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6986:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6980:5:21"},"nodeType":"YulFunctionCall","src":"6980:13:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6968:6:21"},"nodeType":"YulFunctionCall","src":"6968:26:21"},"nodeType":"YulExpressionStatement","src":"6968:26:21"},{"nodeType":"YulAssignment","src":"7007:21:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7018:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7023:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7014:3:21"},"nodeType":"YulFunctionCall","src":"7014:14:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7007:3:21"}]},{"nodeType":"YulAssignment","src":"7041:27:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7055:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7063:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7051:3:21"},"nodeType":"YulFunctionCall","src":"7051:17:21"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7041:6:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6916:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"6919:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6913:2:21"},"nodeType":"YulFunctionCall","src":"6913:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6927:18:21","statements":[{"nodeType":"YulAssignment","src":"6929:14:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6938:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"6941:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6934:3:21"},"nodeType":"YulFunctionCall","src":"6934:9:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6929:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"6909:3:21","statements":[]},"src":"6905:173:21"},{"nodeType":"YulAssignment","src":"7087:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"7094:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7087:3:21"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6721:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6728:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6736:3:21","type":""}],"src":"6683:420:21"},{"body":{"nodeType":"YulBlock","src":"7259:110:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7276:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7287:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7269:6:21"},"nodeType":"YulFunctionCall","src":"7269:21:21"},"nodeType":"YulExpressionStatement","src":"7269:21:21"},{"nodeType":"YulAssignment","src":"7299:64:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7336:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7348:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7359:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7344:3:21"},"nodeType":"YulFunctionCall","src":"7344:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"7307:28:21"},"nodeType":"YulFunctionCall","src":"7307:56:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7299:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7228:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7239:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7250:4:21","type":""}],"src":"7108:261:21"},{"body":{"nodeType":"YulBlock","src":"7458:293:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7468:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7486:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7495:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7482:3:21"},"nodeType":"YulFunctionCall","src":"7482:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7507:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7478:3:21"},"nodeType":"YulFunctionCall","src":"7478:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7472:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7525:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7534:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7537:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7527:6:21"},"nodeType":"YulFunctionCall","src":"7527:12:21"},"nodeType":"YulExpressionStatement","src":"7527:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"7522:2:21"},"nodeType":"YulIf","src":"7519:22:21"},{"nodeType":"YulAssignment","src":"7550:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7579:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7590:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7560:18:21"},"nodeType":"YulFunctionCall","src":"7560:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7550:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"7607:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7637:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7648:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7633:3:21"},"nodeType":"YulFunctionCall","src":"7633:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7620:12:21"},"nodeType":"YulFunctionCall","src":"7620:32:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7611:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7705:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7714:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7717:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7707:6:21"},"nodeType":"YulFunctionCall","src":"7707:12:21"},"nodeType":"YulExpressionStatement","src":"7707:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7674:5:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7695:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7688:6:21"},"nodeType":"YulFunctionCall","src":"7688:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7681:6:21"},"nodeType":"YulFunctionCall","src":"7681:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7671:2:21"},"nodeType":"YulFunctionCall","src":"7671:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7664:6:21"},"nodeType":"YulFunctionCall","src":"7664:40:21"},"nodeType":"YulIf","src":"7661:60:21"},{"nodeType":"YulAssignment","src":"7730:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"7740:5:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7730:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7416:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7427:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7439:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7447:6:21","type":""}],"src":"7374:377:21"},{"body":{"nodeType":"YulBlock","src":"7843:191:21","statements":[{"body":{"nodeType":"YulBlock","src":"7889:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7898:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7901:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7891:6:21"},"nodeType":"YulFunctionCall","src":"7891:12:21"},"nodeType":"YulExpressionStatement","src":"7891:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7864:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7873:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7860:3:21"},"nodeType":"YulFunctionCall","src":"7860:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7885:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7856:3:21"},"nodeType":"YulFunctionCall","src":"7856:32:21"},"nodeType":"YulIf","src":"7853:52:21"},{"nodeType":"YulAssignment","src":"7914:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7943:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7954:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7924:18:21"},"nodeType":"YulFunctionCall","src":"7924:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7914:6:21"}]},{"nodeType":"YulAssignment","src":"7971:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8004:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8015:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8000:3:21"},"nodeType":"YulFunctionCall","src":"8000:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8020:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7981:18:21"},"nodeType":"YulFunctionCall","src":"7981:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7971:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7801:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7812:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7824:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7832:6:21","type":""}],"src":"7756:278:21"},{"body":{"nodeType":"YulBlock","src":"8186:498:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8196:43:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8214:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8223:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8210:3:21"},"nodeType":"YulFunctionCall","src":"8210:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8235:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8206:3:21"},"nodeType":"YulFunctionCall","src":"8206:33:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8200:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8254:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8263:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8266:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8256:6:21"},"nodeType":"YulFunctionCall","src":"8256:12:21"},"nodeType":"YulExpressionStatement","src":"8256:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"8251:2:21"},"nodeType":"YulIf","src":"8248:22:21"},{"nodeType":"YulAssignment","src":"8279:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8308:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8319:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8289:18:21"},"nodeType":"YulFunctionCall","src":"8289:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8279:6:21"}]},{"nodeType":"YulAssignment","src":"8336:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8369:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8380:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8365:3:21"},"nodeType":"YulFunctionCall","src":"8365:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8385:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8346:18:21"},"nodeType":"YulFunctionCall","src":"8346:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8336:6:21"}]},{"nodeType":"YulAssignment","src":"8402:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8429:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8440:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8425:3:21"},"nodeType":"YulFunctionCall","src":"8425:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8412:12:21"},"nodeType":"YulFunctionCall","src":"8412:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8402:6:21"}]},{"nodeType":"YulAssignment","src":"8453:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8480:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8491:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8476:3:21"},"nodeType":"YulFunctionCall","src":"8476:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8463:12:21"},"nodeType":"YulFunctionCall","src":"8463:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8453:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"8504:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8535:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8546:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8531:3:21"},"nodeType":"YulFunctionCall","src":"8531:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8518:12:21"},"nodeType":"YulFunctionCall","src":"8518:33:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8508:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8594:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8603:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8606:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8596:6:21"},"nodeType":"YulFunctionCall","src":"8596:12:21"},"nodeType":"YulExpressionStatement","src":"8596:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8566:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8574:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8563:2:21"},"nodeType":"YulFunctionCall","src":"8563:30:21"},"nodeType":"YulIf","src":"8560:50:21"},{"nodeType":"YulAssignment","src":"8619:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8650:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8661:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8646:3:21"},"nodeType":"YulFunctionCall","src":"8646:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8670:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8629:16:21"},"nodeType":"YulFunctionCall","src":"8629:49:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8619:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8120:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8131:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8143:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8151:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8159:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8167:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8175:6:21","type":""}],"src":"8039:645:21"},{"body":{"nodeType":"YulBlock","src":"8863:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8880:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8891:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8873:6:21"},"nodeType":"YulFunctionCall","src":"8873:21:21"},"nodeType":"YulExpressionStatement","src":"8873:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8914:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8925:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8910:3:21"},"nodeType":"YulFunctionCall","src":"8910:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"8930:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8903:6:21"},"nodeType":"YulFunctionCall","src":"8903:30:21"},"nodeType":"YulExpressionStatement","src":"8903:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8953:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8964:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8949:3:21"},"nodeType":"YulFunctionCall","src":"8949:18:21"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"8969:34:21","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8942:6:21"},"nodeType":"YulFunctionCall","src":"8942:62:21"},"nodeType":"YulExpressionStatement","src":"8942:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9024:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9035:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9020:3:21"},"nodeType":"YulFunctionCall","src":"9020:18:21"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9040:12:21","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9013:6:21"},"nodeType":"YulFunctionCall","src":"9013:40:21"},"nodeType":"YulExpressionStatement","src":"9013:40:21"},{"nodeType":"YulAssignment","src":"9062:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9074:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9085:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9070:3:21"},"nodeType":"YulFunctionCall","src":"9070:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9062:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8840:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8854:4:21","type":""}],"src":"8689:406:21"},{"body":{"nodeType":"YulBlock","src":"9155:413:21","statements":[{"nodeType":"YulAssignment","src":"9165:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9179:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"9182:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9175:3:21"},"nodeType":"YulFunctionCall","src":"9175:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9165:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"9196:22:21","value":{"name":"length","nodeType":"YulIdentifier","src":"9212:6:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"9200:8:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9227:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9257:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"9263:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9253:3:21"},"nodeType":"YulFunctionCall","src":"9253:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"9231:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9304:31:21","statements":[{"nodeType":"YulAssignment","src":"9306:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9320:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9328:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9316:3:21"},"nodeType":"YulFunctionCall","src":"9316:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9306:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9284:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9277:6:21"},"nodeType":"YulFunctionCall","src":"9277:26:21"},"nodeType":"YulIf","src":"9274:61:21"},{"body":{"nodeType":"YulBlock","src":"9394:168:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9415:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9418:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9408:6:21"},"nodeType":"YulFunctionCall","src":"9408:88:21"},"nodeType":"YulExpressionStatement","src":"9408:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9516:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9519:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9509:6:21"},"nodeType":"YulFunctionCall","src":"9509:15:21"},"nodeType":"YulExpressionStatement","src":"9509:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9544:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9547:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9537:6:21"},"nodeType":"YulFunctionCall","src":"9537:15:21"},"nodeType":"YulExpressionStatement","src":"9537:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9350:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9373:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9381:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9370:2:21"},"nodeType":"YulFunctionCall","src":"9370:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9347:2:21"},"nodeType":"YulFunctionCall","src":"9347:38:21"},"nodeType":"YulIf","src":"9344:218:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"9135:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9144:6:21","type":""}],"src":"9100:468:21"},{"body":{"nodeType":"YulBlock","src":"9747:237:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9764:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9775:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9757:6:21"},"nodeType":"YulFunctionCall","src":"9757:21:21"},"nodeType":"YulExpressionStatement","src":"9757:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9798:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9809:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9794:3:21"},"nodeType":"YulFunctionCall","src":"9794:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9814:2:21","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9787:6:21"},"nodeType":"YulFunctionCall","src":"9787:30:21"},"nodeType":"YulExpressionStatement","src":"9787:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9837:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9848:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9833:3:21"},"nodeType":"YulFunctionCall","src":"9833:18:21"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"9853:34:21","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9826:6:21"},"nodeType":"YulFunctionCall","src":"9826:62:21"},"nodeType":"YulExpressionStatement","src":"9826:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9908:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9919:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9904:3:21"},"nodeType":"YulFunctionCall","src":"9904:18:21"},{"hexValue":"6572206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9924:17:21","type":"","value":"er nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9897:6:21"},"nodeType":"YulFunctionCall","src":"9897:45:21"},"nodeType":"YulExpressionStatement","src":"9897:45:21"},{"nodeType":"YulAssignment","src":"9951:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9963:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9974:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9959:3:21"},"nodeType":"YulFunctionCall","src":"9959:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9951:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9724:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9738:4:21","type":""}],"src":"9573:411:21"},{"body":{"nodeType":"YulBlock","src":"10163:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10180:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10191:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10173:6:21"},"nodeType":"YulFunctionCall","src":"10173:21:21"},"nodeType":"YulExpressionStatement","src":"10173:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10214:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10225:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10210:3:21"},"nodeType":"YulFunctionCall","src":"10210:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10230:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10203:6:21"},"nodeType":"YulFunctionCall","src":"10203:30:21"},"nodeType":"YulExpressionStatement","src":"10203:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10253:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10264:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10249:3:21"},"nodeType":"YulFunctionCall","src":"10249:18:21"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"10269:34:21","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10242:6:21"},"nodeType":"YulFunctionCall","src":"10242:62:21"},"nodeType":"YulExpressionStatement","src":"10242:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10324:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10335:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10320:3:21"},"nodeType":"YulFunctionCall","src":"10320:18:21"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10340:11:21","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10313:6:21"},"nodeType":"YulFunctionCall","src":"10313:39:21"},"nodeType":"YulExpressionStatement","src":"10313:39:21"},{"nodeType":"YulAssignment","src":"10361:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10373:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10384:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10369:3:21"},"nodeType":"YulFunctionCall","src":"10369:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10361:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10140:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10154:4:21","type":""}],"src":"9989:405:21"},{"body":{"nodeType":"YulBlock","src":"10431:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10448:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10451:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10441:6:21"},"nodeType":"YulFunctionCall","src":"10441:88:21"},"nodeType":"YulExpressionStatement","src":"10441:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10545:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10548:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10538:6:21"},"nodeType":"YulFunctionCall","src":"10538:15:21"},"nodeType":"YulExpressionStatement","src":"10538:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10569:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10572:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10562:6:21"},"nodeType":"YulFunctionCall","src":"10562:15:21"},"nodeType":"YulExpressionStatement","src":"10562:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10399:184:21"},{"body":{"nodeType":"YulBlock","src":"10620:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10630:6:21"},"nodeType":"YulFunctionCall","src":"10630:88:21"},"nodeType":"YulExpressionStatement","src":"10630:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10734:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10737:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10727:6:21"},"nodeType":"YulFunctionCall","src":"10727:15:21"},"nodeType":"YulExpressionStatement","src":"10727:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10758:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10761:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10751:6:21"},"nodeType":"YulFunctionCall","src":"10751:15:21"},"nodeType":"YulExpressionStatement","src":"10751:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10588:184:21"},{"body":{"nodeType":"YulBlock","src":"10824:148:21","statements":[{"body":{"nodeType":"YulBlock","src":"10915:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10917:16:21"},"nodeType":"YulFunctionCall","src":"10917:18:21"},"nodeType":"YulExpressionStatement","src":"10917:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10840:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"10847:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10837:2:21"},"nodeType":"YulFunctionCall","src":"10837:77:21"},"nodeType":"YulIf","src":"10834:103:21"},{"nodeType":"YulAssignment","src":"10946:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10957:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"10964:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10953:3:21"},"nodeType":"YulFunctionCall","src":"10953:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10946:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10806:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10816:3:21","type":""}],"src":"10777:195:21"},{"body":{"nodeType":"YulBlock","src":"11151:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11168:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11179:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11161:6:21"},"nodeType":"YulFunctionCall","src":"11161:21:21"},"nodeType":"YulExpressionStatement","src":"11161:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11202:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11213:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11198:3:21"},"nodeType":"YulFunctionCall","src":"11198:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11218:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11191:6:21"},"nodeType":"YulFunctionCall","src":"11191:30:21"},"nodeType":"YulExpressionStatement","src":"11191:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11241:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11252:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11237:3:21"},"nodeType":"YulFunctionCall","src":"11237:18:21"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"11257:34:21","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11230:6:21"},"nodeType":"YulFunctionCall","src":"11230:62:21"},"nodeType":"YulExpressionStatement","src":"11230:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11312:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11323:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11308:3:21"},"nodeType":"YulFunctionCall","src":"11308:18:21"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"11328:10:21","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11301:6:21"},"nodeType":"YulFunctionCall","src":"11301:38:21"},"nodeType":"YulExpressionStatement","src":"11301:38:21"},{"nodeType":"YulAssignment","src":"11348:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11360:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11371:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11356:3:21"},"nodeType":"YulFunctionCall","src":"11356:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11348:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11128:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11142:4:21","type":""}],"src":"10977:404:21"},{"body":{"nodeType":"YulBlock","src":"11560:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11577:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11588:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11570:6:21"},"nodeType":"YulFunctionCall","src":"11570:21:21"},"nodeType":"YulExpressionStatement","src":"11570:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11611:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11622:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11607:3:21"},"nodeType":"YulFunctionCall","src":"11607:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11627:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11600:6:21"},"nodeType":"YulFunctionCall","src":"11600:30:21"},"nodeType":"YulExpressionStatement","src":"11600:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11650:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11661:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11646:3:21"},"nodeType":"YulFunctionCall","src":"11646:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"11666:34:21","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11639:6:21"},"nodeType":"YulFunctionCall","src":"11639:62:21"},"nodeType":"YulExpressionStatement","src":"11639:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11721:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11732:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:21"},"nodeType":"YulFunctionCall","src":"11717:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"11737:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11710:6:21"},"nodeType":"YulFunctionCall","src":"11710:35:21"},"nodeType":"YulExpressionStatement","src":"11710:35:21"},{"nodeType":"YulAssignment","src":"11754:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11766:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11777:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11762:3:21"},"nodeType":"YulFunctionCall","src":"11762:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11754:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11537:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11551:4:21","type":""}],"src":"11386:401:21"},{"body":{"nodeType":"YulBlock","src":"11966:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11983:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11994:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11976:6:21"},"nodeType":"YulFunctionCall","src":"11976:21:21"},"nodeType":"YulExpressionStatement","src":"11976:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12017:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12028:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12013:3:21"},"nodeType":"YulFunctionCall","src":"12013:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12033:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12006:6:21"},"nodeType":"YulFunctionCall","src":"12006:30:21"},"nodeType":"YulExpressionStatement","src":"12006:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12056:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12067:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12052:3:21"},"nodeType":"YulFunctionCall","src":"12052:18:21"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"12072:34:21","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12045:6:21"},"nodeType":"YulFunctionCall","src":"12045:62:21"},"nodeType":"YulExpressionStatement","src":"12045:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12127:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12138:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12123:3:21"},"nodeType":"YulFunctionCall","src":"12123:18:21"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"12143:12:21","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12116:6:21"},"nodeType":"YulFunctionCall","src":"12116:40:21"},"nodeType":"YulExpressionStatement","src":"12116:40:21"},{"nodeType":"YulAssignment","src":"12165:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12177:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12188:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12173:3:21"},"nodeType":"YulFunctionCall","src":"12173:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12165:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11943:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11957:4:21","type":""}],"src":"11792:406:21"},{"body":{"nodeType":"YulBlock","src":"12251:102:21","statements":[{"nodeType":"YulAssignment","src":"12261:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12272:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"12275:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12268:3:21"},"nodeType":"YulFunctionCall","src":"12268:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"12261:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"12286:16:21","value":{"name":"sum","nodeType":"YulIdentifier","src":"12299:3:21"},"variables":[{"name":"sum_1","nodeType":"YulTypedName","src":"12290:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"12325:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12327:16:21"},"nodeType":"YulFunctionCall","src":"12327:18:21"},"nodeType":"YulExpressionStatement","src":"12327:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12317:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"12320:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12314:2:21"},"nodeType":"YulFunctionCall","src":"12314:10:21"},"nodeType":"YulIf","src":"12311:36:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12234:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"12237:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"12243:3:21","type":""}],"src":"12203:150:21"},{"body":{"nodeType":"YulBlock","src":"12587:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12604:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12615:2:21","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12597:6:21"},"nodeType":"YulFunctionCall","src":"12597:21:21"},"nodeType":"YulExpressionStatement","src":"12597:21:21"},{"nodeType":"YulVariableDeclaration","src":"12627:70:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12670:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12682:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12693:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12678:3:21"},"nodeType":"YulFunctionCall","src":"12678:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"12641:28:21"},"nodeType":"YulFunctionCall","src":"12641:56:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"12631:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12717:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12728:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12713:3:21"},"nodeType":"YulFunctionCall","src":"12713:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12737:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12745:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12733:3:21"},"nodeType":"YulFunctionCall","src":"12733:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12706:6:21"},"nodeType":"YulFunctionCall","src":"12706:50:21"},"nodeType":"YulExpressionStatement","src":"12706:50:21"},{"nodeType":"YulAssignment","src":"12765:52:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12802:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"12810:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"12773:28:21"},"nodeType":"YulFunctionCall","src":"12773:44:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12765:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12548:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12559:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12567:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12578:4:21","type":""}],"src":"12358:465:21"},{"body":{"nodeType":"YulBlock","src":"13002:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13019:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13030:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13012:6:21"},"nodeType":"YulFunctionCall","src":"13012:21:21"},"nodeType":"YulExpressionStatement","src":"13012:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13053:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13064:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13049:3:21"},"nodeType":"YulFunctionCall","src":"13049:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13069:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13042:6:21"},"nodeType":"YulFunctionCall","src":"13042:30:21"},"nodeType":"YulExpressionStatement","src":"13042:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13092:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13103:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13088:3:21"},"nodeType":"YulFunctionCall","src":"13088:18:21"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"13108:34:21","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13081:6:21"},"nodeType":"YulFunctionCall","src":"13081:62:21"},"nodeType":"YulExpressionStatement","src":"13081:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13163:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13174:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13159:3:21"},"nodeType":"YulFunctionCall","src":"13159:18:21"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"13179:11:21","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13152:6:21"},"nodeType":"YulFunctionCall","src":"13152:39:21"},"nodeType":"YulExpressionStatement","src":"13152:39:21"},{"nodeType":"YulAssignment","src":"13200:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13212:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13223:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13208:3:21"},"nodeType":"YulFunctionCall","src":"13208:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13200:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12979:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12993:4:21","type":""}],"src":"12828:405:21"},{"body":{"nodeType":"YulBlock","src":"13367:119:21","statements":[{"nodeType":"YulAssignment","src":"13377:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13389:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13400:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13385:3:21"},"nodeType":"YulFunctionCall","src":"13385:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13377:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13419:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"13430:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13412:6:21"},"nodeType":"YulFunctionCall","src":"13412:25:21"},"nodeType":"YulExpressionStatement","src":"13412:25:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13457:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13468:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13453:3:21"},"nodeType":"YulFunctionCall","src":"13453:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"13473:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13446:6:21"},"nodeType":"YulFunctionCall","src":"13446:34:21"},"nodeType":"YulExpressionStatement","src":"13446:34:21"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13328:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13339:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13347:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13358:4:21","type":""}],"src":"13238:248:21"},{"body":{"nodeType":"YulBlock","src":"13540:280:21","statements":[{"nodeType":"YulVariableDeclaration","src":"13550:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13570:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13564:5:21"},"nodeType":"YulFunctionCall","src":"13564:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13554:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13592:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"13597:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13585:6:21"},"nodeType":"YulFunctionCall","src":"13585:19:21"},"nodeType":"YulExpressionStatement","src":"13585:19:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13652:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"13659:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13648:3:21"},"nodeType":"YulFunctionCall","src":"13648:16:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13670:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"13675:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13666:3:21"},"nodeType":"YulFunctionCall","src":"13666:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"13682:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13613:34:21"},"nodeType":"YulFunctionCall","src":"13613:76:21"},"nodeType":"YulExpressionStatement","src":"13613:76:21"},{"nodeType":"YulAssignment","src":"13698:116:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13713:3:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13726:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"13734:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13722:3:21"},"nodeType":"YulFunctionCall","src":"13722:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"13739:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13718:3:21"},"nodeType":"YulFunctionCall","src":"13718:88:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13709:3:21"},"nodeType":"YulFunctionCall","src":"13709:98:21"},{"kind":"number","nodeType":"YulLiteral","src":"13809:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13705:3:21"},"nodeType":"YulFunctionCall","src":"13705:109:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13698:3:21"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13517:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13524:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13532:3:21","type":""}],"src":"13491:329:21"},{"body":{"nodeType":"YulBlock","src":"14156:537:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14173:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14188:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14196:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14184:3:21"},"nodeType":"YulFunctionCall","src":"14184:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14166:6:21"},"nodeType":"YulFunctionCall","src":"14166:74:21"},"nodeType":"YulExpressionStatement","src":"14166:74:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14260:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14271:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14256:3:21"},"nodeType":"YulFunctionCall","src":"14256:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14280:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14288:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14276:3:21"},"nodeType":"YulFunctionCall","src":"14276:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14249:6:21"},"nodeType":"YulFunctionCall","src":"14249:83:21"},"nodeType":"YulExpressionStatement","src":"14249:83:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14352:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14363:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14348:3:21"},"nodeType":"YulFunctionCall","src":"14348:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14368:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14341:6:21"},"nodeType":"YulFunctionCall","src":"14341:31:21"},"nodeType":"YulExpressionStatement","src":"14341:31:21"},{"nodeType":"YulVariableDeclaration","src":"14381:71:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14424:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14436:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14447:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14432:3:21"},"nodeType":"YulFunctionCall","src":"14432:19:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"14395:28:21"},"nodeType":"YulFunctionCall","src":"14395:57:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"14385:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14472:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14483:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14468:3:21"},"nodeType":"YulFunctionCall","src":"14468:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"14492:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14500:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14488:3:21"},"nodeType":"YulFunctionCall","src":"14488:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14461:6:21"},"nodeType":"YulFunctionCall","src":"14461:50:21"},"nodeType":"YulExpressionStatement","src":"14461:50:21"},{"nodeType":"YulVariableDeclaration","src":"14520:58:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"14563:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"14571:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"14534:28:21"},"nodeType":"YulFunctionCall","src":"14534:44:21"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"14524:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14598:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14609:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14594:3:21"},"nodeType":"YulFunctionCall","src":"14594:19:21"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"14619:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14627:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14615:3:21"},"nodeType":"YulFunctionCall","src":"14615:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14587:6:21"},"nodeType":"YulFunctionCall","src":"14587:51:21"},"nodeType":"YulExpressionStatement","src":"14587:51:21"},{"nodeType":"YulAssignment","src":"14647:40:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"14672:6:21"},{"name":"tail_2","nodeType":"YulIdentifier","src":"14680:6:21"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"14655:16:21"},"nodeType":"YulFunctionCall","src":"14655:32:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14647:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14093:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14104:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14112:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14120:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14128:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14136:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14147:4:21","type":""}],"src":"13825:868:21"},{"body":{"nodeType":"YulBlock","src":"14778:169:21","statements":[{"body":{"nodeType":"YulBlock","src":"14824:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14833:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14836:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14826:6:21"},"nodeType":"YulFunctionCall","src":"14826:12:21"},"nodeType":"YulExpressionStatement","src":"14826:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14799:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14808:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14795:3:21"},"nodeType":"YulFunctionCall","src":"14795:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"14820:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14791:3:21"},"nodeType":"YulFunctionCall","src":"14791:32:21"},"nodeType":"YulIf","src":"14788:52:21"},{"nodeType":"YulVariableDeclaration","src":"14849:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14868:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14862:5:21"},"nodeType":"YulFunctionCall","src":"14862:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14853:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14911:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"14887:23:21"},"nodeType":"YulFunctionCall","src":"14887:30:21"},"nodeType":"YulExpressionStatement","src":"14887:30:21"},{"nodeType":"YulAssignment","src":"14926:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"14936:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14926:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14744:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14755:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14767:6:21","type":""}],"src":"14698:249:21"},{"body":{"nodeType":"YulBlock","src":"14995:136:21","statements":[{"body":{"nodeType":"YulBlock","src":"15040:85:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15069:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15072:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15075:1:21","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"15054:14:21"},"nodeType":"YulFunctionCall","src":"15054:23:21"},"nodeType":"YulExpressionStatement","src":"15054:23:21"},{"nodeType":"YulAssignment","src":"15090:25:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15101:3:21","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15112:1:21","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15106:5:21"},"nodeType":"YulFunctionCall","src":"15106:8:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15097:3:21"},"nodeType":"YulFunctionCall","src":"15097:18:21"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"15090:3:21"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15011:14:21"},"nodeType":"YulFunctionCall","src":"15011:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15029:1:21","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15008:2:21"},"nodeType":"YulFunctionCall","src":"15008:23:21"},"nodeType":"YulIf","src":"15005:120:21"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"14987:3:21","type":""}],"src":"14952:179:21"},{"body":{"nodeType":"YulBlock","src":"15183:701:21","statements":[{"body":{"nodeType":"YulBlock","src":"15223:9:21","statements":[{"nodeType":"YulLeave","src":"15225:5:21"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15199:14:21"},"nodeType":"YulFunctionCall","src":"15199:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15217:4:21","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15196:2:21"},"nodeType":"YulFunctionCall","src":"15196:26:21"},"nodeType":"YulIf","src":"15193:39:21"},{"nodeType":"YulVariableDeclaration","src":"15241:21:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15259:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15253:5:21"},"nodeType":"YulFunctionCall","src":"15253:9:21"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"15245:4:21","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15286:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"15292:1:21","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15299:14:21"},"nodeType":"YulFunctionCall","src":"15299:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15317:66:21","type":"","value":"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15295:3:21"},"nodeType":"YulFunctionCall","src":"15295:89:21"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"15271:14:21"},"nodeType":"YulFunctionCall","src":"15271:114:21"},"nodeType":"YulExpressionStatement","src":"15271:114:21"},{"nodeType":"YulVariableDeclaration","src":"15394:25:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15414:4:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15408:5:21"},"nodeType":"YulFunctionCall","src":"15408:11:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15398:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"15507:9:21","statements":[{"nodeType":"YulLeave","src":"15509:5:21"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15437:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15445:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15434:2:21"},"nodeType":"YulFunctionCall","src":"15434:30:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15473:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15481:4:21","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15469:3:21"},"nodeType":"YulFunctionCall","src":"15469:17:21"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15488:14:21"},"nodeType":"YulFunctionCall","src":"15488:16:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15466:2:21"},"nodeType":"YulFunctionCall","src":"15466:39:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15431:2:21"},"nodeType":"YulFunctionCall","src":"15431:75:21"},"nodeType":"YulIf","src":"15428:88:21"},{"nodeType":"YulVariableDeclaration","src":"15525:28:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15540:4:21"},{"name":"offset","nodeType":"YulIdentifier","src":"15546:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15536:3:21"},"nodeType":"YulFunctionCall","src":"15536:17:21"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"15529:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15562:24:21","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"15582:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15576:5:21"},"nodeType":"YulFunctionCall","src":"15576:10:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15566:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"15629:9:21","statements":[{"nodeType":"YulLeave","src":"15631:5:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15601:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15609:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15598:2:21"},"nodeType":"YulFunctionCall","src":"15598:30:21"},"nodeType":"YulIf","src":"15595:43:21"},{"body":{"nodeType":"YulBlock","src":"15784:9:21","statements":[{"nodeType":"YulLeave","src":"15786:5:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"15661:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15666:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15657:3:21"},"nodeType":"YulFunctionCall","src":"15657:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15675:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15653:3:21"},"nodeType":"YulFunctionCall","src":"15653:27:21"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15690:4:21"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15696:14:21"},"nodeType":"YulFunctionCall","src":"15696:16:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15686:3:21"},"nodeType":"YulFunctionCall","src":"15686:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"15715:66:21","type":"","value":"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15682:3:21"},"nodeType":"YulFunctionCall","src":"15682:100:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15650:2:21"},"nodeType":"YulFunctionCall","src":"15650:133:21"},"nodeType":"YulIf","src":"15647:146:21"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15822:4:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15836:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"15844:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15832:3:21"},"nodeType":"YulFunctionCall","src":"15832:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"15853:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15828:3:21"},"nodeType":"YulFunctionCall","src":"15828:30:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"15802:19:21"},"nodeType":"YulFunctionCall","src":"15802:57:21"},"nodeType":"YulExpressionStatement","src":"15802:57:21"},{"nodeType":"YulAssignment","src":"15868:10:21","value":{"name":"msg","nodeType":"YulIdentifier","src":"15875:3:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15868:3:21"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15175:3:21","type":""}],"src":"15136:748:21"},{"body":{"nodeType":"YulBlock","src":"16063:242:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16080:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16091:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16073:6:21"},"nodeType":"YulFunctionCall","src":"16073:21:21"},"nodeType":"YulExpressionStatement","src":"16073:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16114:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16125:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16110:3:21"},"nodeType":"YulFunctionCall","src":"16110:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16130:2:21","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16103:6:21"},"nodeType":"YulFunctionCall","src":"16103:30:21"},"nodeType":"YulExpressionStatement","src":"16103:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16153:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16164:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16149:3:21"},"nodeType":"YulFunctionCall","src":"16149:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2045524331313535","kind":"string","nodeType":"YulLiteral","src":"16169:34:21","type":"","value":"ERC1155: transfer to non ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16142:6:21"},"nodeType":"YulFunctionCall","src":"16142:62:21"},"nodeType":"YulExpressionStatement","src":"16142:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16224:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16235:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16220:3:21"},"nodeType":"YulFunctionCall","src":"16220:18:21"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"16240:22:21","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16213:6:21"},"nodeType":"YulFunctionCall","src":"16213:50:21"},"nodeType":"YulExpressionStatement","src":"16213:50:21"},{"nodeType":"YulAssignment","src":"16272:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16284:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16295:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16280:3:21"},"nodeType":"YulFunctionCall","src":"16280:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16272:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16040:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16054:4:21","type":""}],"src":"15889:416:21"},{"body":{"nodeType":"YulBlock","src":"16484:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16501:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16512:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16494:6:21"},"nodeType":"YulFunctionCall","src":"16494:21:21"},"nodeType":"YulExpressionStatement","src":"16494:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16535:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16546:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16531:3:21"},"nodeType":"YulFunctionCall","src":"16531:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16551:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16524:6:21"},"nodeType":"YulFunctionCall","src":"16524:30:21"},"nodeType":"YulExpressionStatement","src":"16524:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16574:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16585:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16570:3:21"},"nodeType":"YulFunctionCall","src":"16570:18:21"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"16590:34:21","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16563:6:21"},"nodeType":"YulFunctionCall","src":"16563:62:21"},"nodeType":"YulExpressionStatement","src":"16563:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16645:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16656:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16641:3:21"},"nodeType":"YulFunctionCall","src":"16641:18:21"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"16661:10:21","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16634:6:21"},"nodeType":"YulFunctionCall","src":"16634:38:21"},"nodeType":"YulExpressionStatement","src":"16634:38:21"},{"nodeType":"YulAssignment","src":"16681:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16693:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16704:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16689:3:21"},"nodeType":"YulFunctionCall","src":"16689:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16681:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16461:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16475:4:21","type":""}],"src":"16310:404:21"},{"body":{"nodeType":"YulBlock","src":"16950:371:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16967:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16982:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16990:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16978:3:21"},"nodeType":"YulFunctionCall","src":"16978:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16960:6:21"},"nodeType":"YulFunctionCall","src":"16960:74:21"},"nodeType":"YulExpressionStatement","src":"16960:74:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17054:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17065:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17050:3:21"},"nodeType":"YulFunctionCall","src":"17050:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17074:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17082:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17070:3:21"},"nodeType":"YulFunctionCall","src":"17070:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17043:6:21"},"nodeType":"YulFunctionCall","src":"17043:83:21"},"nodeType":"YulExpressionStatement","src":"17043:83:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17146:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17157:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17142:3:21"},"nodeType":"YulFunctionCall","src":"17142:18:21"},{"name":"value2","nodeType":"YulIdentifier","src":"17162:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17135:6:21"},"nodeType":"YulFunctionCall","src":"17135:34:21"},"nodeType":"YulExpressionStatement","src":"17135:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17189:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17200:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17185:3:21"},"nodeType":"YulFunctionCall","src":"17185:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"17205:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17178:6:21"},"nodeType":"YulFunctionCall","src":"17178:34:21"},"nodeType":"YulExpressionStatement","src":"17178:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17232:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17243:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17228:3:21"},"nodeType":"YulFunctionCall","src":"17228:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"17249:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17221:6:21"},"nodeType":"YulFunctionCall","src":"17221:32:21"},"nodeType":"YulExpressionStatement","src":"17221:32:21"},{"nodeType":"YulAssignment","src":"17262:53:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"17287:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17299:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17310:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17295:3:21"},"nodeType":"YulFunctionCall","src":"17295:19:21"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17270:16:21"},"nodeType":"YulFunctionCall","src":"17270:45:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17262:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16887:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"16898:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16906:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16914:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16922:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16930:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16941:4:21","type":""}],"src":"16719:602:21"}]},"contents":"{\n    { }\n    function abi_decode_address(offset, end) -> value\n    {\n        value := calldataload(offset)\n        let value_1 := value\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        let _1 := iszero(slt(add(offset, 0x1f), end))\n        if _1 { revert(0, 0) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let size := shl(5, length)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(size, 0x20))\n        let dst := memPtr\n        mstore(memPtr, length)\n        dst := add(memPtr, 0x20)\n        let srcEnd := add(add(offset, size), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            if _1 { revert(_1, _1) }\n            mstore(dst, calldataload(src))\n            dst := add(dst, 0x20)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        let _1 := iszero(slt(add(offset, 0x1f), end))\n        if _1 { revert(0, 0) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20))\n        mstore(memPtr, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        let _1 := slt(sub(dataEnd, headStart), 160)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 64)\n        if _1 { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let offset_1 := add(headStart, offset)\n        if iszero(slt(add(offset_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(offset_1)\n        let size := array_allocation_size_array_uint256_dyn(length)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, size)\n        let dst := memPtr\n        mstore(memPtr, length)\n        dst := add(memPtr, 0x20)\n        let srcEnd := add(add(offset_1, shl(5, length)), 0x20)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(offset_1, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, abi_decode_address(src, dataEnd))\n            dst := add(dst, 0x20)\n        }\n        value0 := memPtr\n        let offset_2 := calldataload(add(headStart, 0x20))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 0x20)\n            srcPtr := add(srcPtr, 0x20)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 64)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        let _1 := slt(sub(dataEnd, headStart), 160)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let length_1 := length\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        let sum_1 := sum\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_bytes(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        returndatacopy(data, 4, add(returndatasize(), 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc))\n        let offset := mload(data)\n        if or(gt(offset, 0xffffffffffffffff), gt(add(offset, 0x24), returndatasize())) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, 0xffffffffffffffff) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_bytes(value4, add(headStart, 160))\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461018657600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004611265565b610199565b6040519081526020015b60405180910390f35b6100c56100c03660046112c1565b61027b565b60405190151581526020016100a9565b6100e86100e33660046112e5565b61035e565b6040516100a99190611322565b610108610103366004611538565b6103f2565b005b61011d6101183660046115f2565b6104bb565b6040516100a99190611706565b610108610138366004611719565b610613565b6100c561014b366004611758565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260666020908152604080832093909416825291909152205460ff1690565b61010861019436600461178d565b610622565b600073ffffffffffffffffffffffffffffffffffffffff8316610243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061030e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061027557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610275565b60606067805461036d906117ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610399906117ea565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff851633148061041b575061041b853361014b565b6104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b485858585856106e4565b5050505050565b6060815183511461054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161023a565b6000835167ffffffffffffffff81111561056a5761056a611373565b604051908082528060200260200182016040528015610593578160200160208202803683370190505b50905060005b845181101561060b576105de8582815181106105b7576105b761183d565b60200260200101518583815181106105d1576105d161183d565b6020026020010151610199565b8282815181106105f0576105f061183d565b60209081029190910101526106048161189b565b9050610599565b509392505050565b61061e338383610a21565b5050565b73ffffffffffffffffffffffffffffffffffffffff851633148061064b575061064b853361014b565b6106d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b48585858585610b74565b8151835114610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff8416610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b3360005b845181101561098c5760008582815181106108395761083961183d565b6020026020010151905060008583815181106108575761085761183d565b602090810291909101810151600084815260658352604080822073ffffffffffffffffffffffffffffffffffffffff8e168352909352919091205490915081811015610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600083815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e8116855292528083208585039055908b168252812080548492906109719084906118d3565b92505081905550505050806109859061189b565b905061081c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610a039291906118e6565b60405180910390a4610a19818787878787610db6565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526066602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8416610c17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b336000610c2385611049565b90506000610c3085611049565b9050600086815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8c16845290915290205485811015610cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600087815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8d8116855292528083208985039055908a16825281208054889290610d3e9084906118d3565b9091555050604080518881526020810188905273ffffffffffffffffffffffffffffffffffffffff808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610dab848a8a8a8a8a611094565b505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c8190610e2d908990899088908890889060040161195e565b6020604051808303816000875af1925050508015610e86575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610e83918101906119db565b60015b610f6f57610e926119f8565b806308c379a003610ee55750610ea6611a14565b80610eb15750610ee7565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023a9190611322565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161023a565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b50505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106110835761108361183d565b602090810291909101015292915050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e619061110b9089908990889088908890600401611acd565b6020604051808303816000875af1925050508015611164575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611161918101906119db565b60015b61117057610e926119f8565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027557600080fd5b6000806040838503121561127857600080fd5b6112828484611241565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146112be57600080fd5b50565b6000602082840312156112d357600080fd5b81356112de81611290565b9392505050565b6000602082840312156112f757600080fd5b5035919050565b60005b83811015611319578181015183820152602001611301565b50506000910152565b60208152600082518060208401526113418160408501602087016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156113e6576113e6611373565b6040525050565b600067ffffffffffffffff82111561140757611407611373565b5060051b60200190565b600082601f83011215801561142557600080fd5b823567ffffffffffffffff81111561143f5761143f611373565b8060051b60405161145360208301826113a2565b91825260208186018101929081018784111561146e57600080fd5b6020870192505b83831015611497578415611487578485fd5b8235815260209283019201611475565b509695505050505050565b600082601f8301121580156114b657600080fd5b50813567ffffffffffffffff8111156114d1576114d1611373565b60405161150660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601826113a2565b81815284602083860101111561151b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312801561155157600080fd5b5061155c8787611241565b945061156b8760208801611241565b9350604086013567ffffffffffffffff81111561158757600080fd5b61159388828901611411565b935050606086013567ffffffffffffffff8111156115b057600080fd5b6115bc88828901611411565b925050608086013567ffffffffffffffff8111156115d957600080fd5b6115e5888289016114a2565b9150509295509295909350565b600080604083850312801561160657600080fd5b50823567ffffffffffffffff81111561161e57600080fd5b8301601f8101851361162f57600080fd5b803561163a816113ed565b60405161164782826113a2565b80915082815260208101915060208360051b85010192508783111561166b57600080fd5b6020840193505b82841015611695576116848885611241565b825260209384019390910190611672565b9450505050602083013567ffffffffffffffff8111156116b457600080fd5b6116c085828601611411565b9150509250929050565b600081518084526020840193506020830160005b828110156116fc5781518652602095860195909101906001016116de565b5093949350505050565b6020815260006112de60208301846116ca565b600080604083850312801561172d57600080fd5b506117388484611241565b91506020830135801515811461174d57600080fd5b809150509250929050565b6000806040838503121561176b57600080fd5b6117758484611241565b91506117848460208501611241565b90509250929050565b600080600080600060a08688031280156117a657600080fd5b506117b18787611241565b94506117c08760208801611241565b93506040860135925060608601359150608086013567ffffffffffffffff8111156115d957600080fd5b600181811c908216806117fe57607f821691505b602082108103611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118cc576118cc61186c565b5060010190565b808201808211156102755761027561186c565b6040815260006118f960408301856116ca565b828103602084015261190b81856116ca565b95945050505050565b6000815180845261192c8160208601602086016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006119a960a08301866116ca565b82810360608401526119bb81866116ca565b905082810360808401526119cf8185611914565b98975050505050505050565b6000602082840312156119ed57600080fd5b81516112de81611290565b600060033d1115611a115760046000803e5060005160e01c5b90565b600060443d1015611a225790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d602482011167ffffffffffffffff82111715611a6a57505090565b808201805167ffffffffffffffff811115611a86575050505090565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d8501016020828401011115611abe575050505090565b61060b602082850101856113a2565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015283604082015282606082015260a060808201526000611b2460a0830184611914565b97965050505050505056fea2646970667358221220b1e6d4c39584beeca042d6d6d3145a9098d64ac1722b495d534c2ab1a66534b464736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x199 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C1 JUMP JUMPDEST PUSH2 0x27B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x1538 JUMP JUMPDEST PUSH2 0x3F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x15F2 JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1706 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1719 JUMP JUMPDEST PUSH2 0x613 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x1758 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x622 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x243 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x30E JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x275 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x275 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x36D SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3E6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3BB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3E6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3C9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x41B JUMPI POP PUSH2 0x41B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x6E4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH2 0x56A PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x593 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH2 0x5DE DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B7 JUMPI PUSH2 0x5B7 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D1 JUMPI PUSH2 0x5D1 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x199 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5F0 JUMPI PUSH2 0x5F0 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x604 DUP2 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x599 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x61E CALLER DUP4 DUP4 PUSH2 0xA21 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x64B JUMPI POP PUSH2 0x64B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xB74 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x818 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x98C JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x839 JUMPI PUSH2 0x839 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x857 JUMPI PUSH2 0x857 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x971 SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x985 SWAP1 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x81C JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA03 SWAP3 SWAP2 SWAP1 PUSH2 0x18E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA19 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xDB6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xADC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0xC23 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC30 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xCF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xD3E SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDAB DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1094 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0xE2D SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x195E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE86 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE83 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF6F JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0xEE5 JUMPI POP PUSH2 0xEA6 PUSH2 0x1A14 JUMP JUMPDEST DUP1 PUSH2 0xEB1 JUMPI POP PUSH2 0xEE7 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2045524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1083 JUMPI PUSH2 0x1083 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x110B SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1164 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1161 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1170 JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1282 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x12BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1319 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1301 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1341 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x13E6 JUMPI PUSH2 0x13E6 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1407 JUMPI PUSH2 0x1407 PUSH2 0x1373 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x1425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x143F JUMPI PUSH2 0x143F PUSH2 0x1373 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH2 0x1453 PUSH1 0x20 DUP4 ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD DUP8 DUP5 GT ISZERO PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x1497 JUMPI DUP5 ISZERO PUSH2 0x1487 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1475 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x14B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x14D1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1506 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x151B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x1551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x155C DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x156B DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1593 DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15BC DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E5 DUP9 DUP3 DUP10 ADD PUSH2 0x14A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x1606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x161E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x162F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x163A DUP2 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1647 DUP3 DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP1 SWAP2 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 POP PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 POP DUP8 DUP4 GT ISZERO PUSH2 0x166B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x1695 JUMPI PUSH2 0x1684 DUP9 DUP6 PUSH2 0x1241 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1672 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C0 DUP6 DUP3 DUP7 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16FC JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x16DE JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12DE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16CA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x172D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1738 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x174D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1775 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH2 0x1784 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x17A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B1 DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x17C0 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x17FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1837 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x18CC JUMPI PUSH2 0x18CC PUSH2 0x186C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x275 JUMPI PUSH2 0x275 PUSH2 0x186C JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18F9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190B DUP2 DUP6 PUSH2 0x16CA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x192C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x19A9 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x19BB DUP2 DUP7 PUSH2 0x16CA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x19CF DUP2 DUP6 PUSH2 0x1914 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x1A11 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x1A22 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD RETURNDATASIZE PUSH1 0x24 DUP3 ADD GT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1A6A JUMPI POP POP SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A86 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE DUP6 ADD ADD PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x1ABE JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x60B PUSH1 0x20 DUP3 DUP6 ADD ADD DUP6 PUSH2 0x13A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1B24 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE6 0xD4 0xC3 SWAP6 DUP5 0xBE 0xEC LOG0 TIMESTAMP 0xD6 0xD6 0xD3 EQ GAS SWAP1 SWAP9 0xD6 0x4A 0xC1 PUSH19 0x2B495D534C2AB1A66534B464736F6C63430008 LT STOP CALLER ","sourceMap":"682:17322:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2593:227;;;;;;:::i;:::-;;:::i;:::-;;;663:25:21;;;651:2;636:18;2593:227:6;;;;;;;;1600:349;;;;;;:::i;:::-;;:::i;:::-;;;1296:14:21;;1289:22;1271:41;;1259:2;1244:18;1600:349:6;1131:187:21;2348:103:6;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4473:427::-;;;;;;:::i;:::-;;:::i;:::-;;2977:508;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3553:153::-;;;;;;:::i;:::-;;:::i;3773:166::-;;;;;;:::i;:::-;3895:27;;;;3872:4;3895:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3773:166;4006:395;;;;;;:::i;:::-;;:::i;2593:227::-;2679:7;2706:21;;;2698:76;;;;;;;8891:2:21;2698:76:6;;;8873:21:21;8930:2;8910:18;;;8903:30;8969:34;8949:18;;;8942:62;9040:12;9020:18;;;9013:40;9070:19;;2698:76:6;;;;;;;;;-1:-1:-1;2791:13:6;;;;:9;:13;;;;;;;;:22;;;;;;;;;;;2593:227;;;;;:::o;1600:349::-;1724:4;1759:52;;;1774:37;1759:52;;:131;;-1:-1:-1;1827:63:6;;;1842:48;1827:63;1759:131;:183;;;-1:-1:-1;1183:36:15;1168:51;;;;1906:36:6;1060:166:15;2348:103:6;2408:13;2440:4;2433:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2348:103;;;:::o;4473:427::-;4698:20;;;929:10:12;4698:20:6;;:60;;-1:-1:-1;4722:36:6;4739:4;929:10:12;3773:166:6;:::i;4722:36::-;4677:154;;;;;;;9775:2:21;4677:154:6;;;9757:21:21;9814:2;9794:18;;;9787:30;9853:34;9833:18;;;9826:62;9924:17;9904:18;;;9897:45;9959:19;;4677:154:6;9573:411:21;4677:154:6;4841:52;4864:4;4870:2;4874:3;4879:7;4888:4;4841:22;:52::i;:::-;4473:427;;;;;:::o;2977:508::-;3128:16;3187:3;:10;3168:8;:15;:29;3160:83;;;;;;;10191:2:21;3160:83:6;;;10173:21:21;10230:2;10210:18;;;10203:30;10269:34;10249:18;;;10242:62;10340:11;10320:18;;;10313:39;10369:19;;3160:83:6;9989:405:21;3160:83:6;3254:30;3301:8;:15;3287:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3287:30:6;;3254:63;;3333:9;3328:120;3352:8;:15;3348:1;:19;3328:120;;;3407:30;3417:8;3426:1;3417:11;;;;;;;;:::i;:::-;;;;;;;3430:3;3434:1;3430:6;;;;;;;;:::i;:::-;;;;;;;3407:9;:30::i;:::-;3388:13;3402:1;3388:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;3369:3;;;:::i;:::-;;;3328:120;;;-1:-1:-1;3465:13:6;2977:508;-1:-1:-1;;;2977:508:6:o;3553:153::-;3647:52;929:10:12;3680:8:6;3690;3647:18;:52::i;:::-;3553:153;;:::o;4006:395::-;4206:20;;;929:10:12;4206:20:6;;:60;;-1:-1:-1;4230:36:6;4247:4;929:10:12;3773:166:6;:::i;4230:36::-;4185:154;;;;;;;9775:2:21;4185:154:6;;;9757:21:21;9814:2;9794:18;;;9787:30;9853:34;9833:18;;;9826:62;9924:17;9904:18;;;9897:45;9959:19;;4185:154:6;9573:411:21;4185:154:6;4349:45;4367:4;4373:2;4377;4381:6;4389:4;4349:17;:45::i;6643:1115::-;6863:7;:14;6849:3;:10;:28;6841:81;;;;;;;11179:2:21;6841:81:6;;;11161:21:21;11218:2;11198:18;;;11191:30;11257:34;11237:18;;;11230:62;11328:10;11308:18;;;11301:38;11356:19;;6841:81:6;10977:404:21;6841:81:6;6940:16;;;6932:66;;;;;;;11588:2:21;6932:66:6;;;11570:21:21;11627:2;11607:18;;;11600:30;11666:34;11646:18;;;11639:62;11737:7;11717:18;;;11710:35;11762:19;;6932:66:6;11386:401:21;6932:66:6;929:10:12;7009:16:6;7122:411;7146:3;:10;7142:1;:14;7122:411;;;7177:10;7190:3;7194:1;7190:6;;;;;;;;:::i;:::-;;;;;;;7177:19;;7210:14;7227:7;7235:1;7227:10;;;;;;;;:::i;:::-;;;;;;;;;;;;7252:19;7274:13;;;:9;:13;;;;;;:19;;;;;;;;;;;;;7227:10;;-1:-1:-1;7315:21:6;;;;7307:76;;;;;;;11994:2:21;7307:76:6;;;11976:21:21;12033:2;12013:18;;;12006:30;12072:34;12052:18;;;12045:62;12143:12;12123:18;;;12116:40;12173:19;;7307:76:6;11792:406:21;7307:76:6;7425:13;;;;:9;:13;;;;;;;;:19;;;;;;;;;;;7447:20;;;7425:42;;7495:17;;;;;;;:27;;7447:20;;7425:13;7495:27;;7447:20;;7495:27;:::i;:::-;;;;;;;;7163:370;;;7158:3;;;;:::i;:::-;;;7122:411;;;;7578:2;7548:47;;7572:4;7548:47;;7562:8;7548:47;;;7582:3;7587:7;7548:47;;;;;;;:::i;:::-;;;;;;;;7676:75;7712:8;7722:4;7728:2;7732:3;7737:7;7746:4;7676:35;:75::i;:::-;6831:927;6643:1115;;;;;:::o;13320:323::-;13470:8;13461:17;;:5;:17;;;13453:71;;;;;;;13030:2:21;13453:71:6;;;13012:21:21;13069:2;13049:18;;;13042:30;13108:34;13088:18;;;13081:62;13179:11;13159:18;;;13152:39;13208:19;;13453:71:6;12828:405:21;13453:71:6;13534:25;;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;;;;;;;;;;;;13595:41;;1271::21;;;13595::6;;1244:18:21;13595:41:6;;;;;;;13320:323;;;:::o;5350:947::-;5531:16;;;5523:66;;;;;;;11588:2:21;5523:66:6;;;11570:21:21;11627:2;11607:18;;;11600:30;11666:34;11646:18;;;11639:62;11737:7;11717:18;;;11710:35;11762:19;;5523:66:6;11386:401:21;5523:66:6;929:10:12;5600:16:6;5664:21;5682:2;5664:17;:21::i;:::-;5641:44;;5695:24;5722:25;5740:6;5722:17;:25::i;:::-;5695:52;;5829:19;5851:13;;;:9;:13;;;;;;;;:19;;;;;;;;;;;5888:21;;;;5880:76;;;;;;;11994:2:21;5880:76:6;;;11976:21:21;12033:2;12013:18;;;12006:30;12072:34;12052:18;;;12045:62;12143:12;12123:18;;;12116:40;12173:19;;5880:76:6;11792:406:21;5880:76:6;5990:13;;;;:9;:13;;;;;;;;:19;;;;;;;;;;;6012:20;;;5990:42;;6052:17;;;;;;;:27;;6012:20;;5990:13;6052:27;;6012:20;;6052:27;:::i;:::-;;;;-1:-1:-1;;6095:46:6;;;13412:25:21;;;13468:2;13453:18;;13446:34;;;6095:46:6;;;;;;;;;;;;;;;13385:18:21;6095:46:6;;;;;;;6222:68;6253:8;6263:4;6269:2;6273;6277:6;6285:4;6222:30;:68::i;:::-;5513:784;;;;5350:947;;;;;:::o;16698:814::-;16930:13;;;1476:19:11;:23;16926:580:6;;16965:90;;;;;:54;;;;;;:90;;17020:8;;17030:4;;17036:3;;17041:7;;17050:4;;16965:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16965:90:6;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;16961:535;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;17372:6;17365:14;;;;;;;;;;;:::i;16961:535::-;;;17419:62;;;;;16091:2:21;17419:62:6;;;16073:21:21;16130:2;16110:18;;;16103:30;16169:34;16149:18;;;16142:62;16240:22;16220:18;;;16213:50;16280:19;;17419:62:6;15889:416:21;16961:535:6;17134:71;;;17146:59;17134:71;17130:168;;17229:50;;;;;16512:2:21;17229:50:6;;;16494:21:21;16551:2;16531:18;;;16524:30;16590:34;16570:18;;;16563:62;16661:10;16641:18;;;16634:38;16689:19;;17229:50:6;16310:404:21;17130:168:6;17056:256;16698:814;;;;;;:::o;17518:193::-;17637:16;;;17651:1;17637:16;;;;;;;;;17584;;17612:22;;17637:16;;;;;;;;;;;;-1:-1:-1;17637:16:6;17612:41;;17674:7;17663:5;17669:1;17663:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17699:5;17518:193;-1:-1:-1;;17518:193:6:o;15945:747::-;16152:13;;;1476:19:11;:23;16148:538:6;;16187:83;;;;;:49;;;;;;:83;;16237:8;;16247:4;;16253:2;;16257:6;;16265:4;;16187:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16187:83:6;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;16183:493;;;;:::i;:::-;16319:66;;;16331:54;16319:66;16315:163;;16409:50;;;;;16512:2:21;16409:50:6;;;16494:21:21;16551:2;16531:18;;;16524:30;16590:34;16570:18;;;16563:62;16661:10;16641:18;;;16634:38;16689:19;;16409:50:6;16310:404:21;14:230;87:20;;176:42;165:54;;155:65;;145:93;;234:1;231;224:12;249:263;317:6;325;378:2;366:9;357:7;353:23;349:32;346:52;;;394:1;391;384:12;346:52;417:38;447:7;436:9;417:38;:::i;:::-;407:48;502:2;487:18;;;;474:32;;-1:-1:-1;;;249:263:21:o;699:177::-;784:66;777:5;773:78;766:5;763:89;753:117;;866:1;863;856:12;753:117;699:177;:::o;881:245::-;939:6;992:2;980:9;971:7;967:23;963:32;960:52;;;1008:1;1005;998:12;960:52;1047:9;1034:23;1066:30;1090:5;1066:30;:::i;:::-;1115:5;881:245;-1:-1:-1;;;881:245:21:o;1323:180::-;1382:6;1435:2;1423:9;1414:7;1410:23;1406:32;1403:52;;;1451:1;1448;1441:12;1403:52;-1:-1:-1;1474:23:21;;1323:180;-1:-1:-1;1323:180:21:o;1508:250::-;1593:1;1603:113;1617:6;1614:1;1611:13;1603:113;;;1693:11;;;1687:18;1674:11;;;1667:39;1639:2;1632:10;1603:113;;;-1:-1:-1;;1750:1:21;1732:16;;1725:27;1508:250::o;1763:455::-;1912:2;1901:9;1894:21;1875:4;1944:6;1938:13;1987:6;1982:2;1971:9;1967:18;1960:34;2003:79;2075:6;2070:2;2059:9;2055:18;2050:2;2042:6;2038:15;2003:79;:::i;:::-;2134:2;2122:15;2139:66;2118:88;2103:104;;;;2209:2;2099:113;;1763:455;-1:-1:-1;;1763:455:21:o;2223:184::-;2275:77;2272:1;2265:88;2372:4;2369:1;2362:15;2396:4;2393:1;2386:15;2412:308;2518:66;2513:2;2507:4;2503:13;2499:86;2491:6;2487:99;2652:6;2640:10;2637:22;2616:18;2604:10;2601:34;2598:62;2595:88;;;2663:18;;:::i;:::-;2699:2;2692:22;-1:-1:-1;;2412:308:21:o;2725:183::-;2785:4;2818:18;2810:6;2807:30;2804:56;;;2840:18;;:::i;:::-;-1:-1:-1;2885:1:21;2881:14;2897:4;2877:25;;2725:183::o;2913:822::-;2967:5;3027:3;3020:4;3012:6;3008:17;3004:27;2997:35;3044:2;3041:22;;;3059:1;3056;3049:12;3041:22;3099:6;3086:20;3129:18;3121:6;3118:30;3115:56;;;3151:18;;:::i;:::-;3199:6;3196:1;3192:14;3235:2;3229:9;3247:44;3285:4;3279;3275:15;3267:6;3247:44;:::i;:::-;3326:22;;;3376:4;3408:17;;;3404:28;;;3326:22;3364:17;;3444:15;;;3441:35;;;3472:1;3469;3462:12;3441:35;3508:4;3500:6;3496:17;3485:28;;3522:183;3538:6;3533:3;3530:15;3522:183;;;3597:2;3594:24;;;3613:2;3609;3602:14;3594:24;3643:17;;3631:30;;3690:4;3555:14;;;;3681;3522:183;;;-1:-1:-1;3723:6:21;2913:822;-1:-1:-1;;;;;;2913:822:21:o;3740:663::-;3782:5;3842:3;3835:4;3827:6;3823:17;3819:27;3812:35;3859:2;3856:22;;;3874:1;3871;3864:12;3856:22;;3914:6;3901:20;3944:18;3936:6;3933:30;3930:56;;;3966:18;;:::i;:::-;4015:2;4009:9;4027:130;4151:4;4082:66;4075:4;4067:6;4063:17;4059:90;4055:101;4047:6;4027:130;:::i;:::-;4181:6;4173;4166:22;4235:3;4228:4;4219:6;4211;4207:19;4203:30;4200:39;4197:59;;;4252:1;4249;4242:12;4197:59;4316:6;4309:4;4301:6;4297:17;4290:4;4282:6;4278:17;4265:58;4371:1;4343:19;;;4364:4;4339:30;4332:41;;;;4347:6;3740:663;-1:-1:-1;;;3740:663:21:o;4408:993::-;4562:6;4570;4578;4586;4594;4654:3;4642:9;4633:7;4629:23;4625:33;4670:2;4667:22;;;4685:1;4682;4675:12;4667:22;;4708:38;4738:7;4727:9;4708:38;:::i;:::-;4698:48;;4765:47;4804:7;4799:2;4788:9;4784:18;4765:47;:::i;:::-;4755:57;;4863:2;4852:9;4848:18;4835:32;4890:18;4882:6;4879:30;4876:50;;;4922:1;4919;4912:12;4876:50;4945:61;4998:7;4989:6;4978:9;4974:22;4945:61;:::i;:::-;4935:71;;;5059:2;5048:9;5044:18;5031:32;5088:18;5078:8;5075:32;5072:52;;;5120:1;5117;5110:12;5072:52;5143:63;5198:7;5187:8;5176:9;5172:24;5143:63;:::i;:::-;5133:73;;;5259:3;5248:9;5244:19;5231:33;5289:18;5279:8;5276:32;5273:52;;;5321:1;5318;5311:12;5273:52;5344:51;5387:7;5376:8;5365:9;5361:24;5344:51;:::i;:::-;5334:61;;;4408:993;;;;;;;;:::o;5406:1272::-;5524:6;5532;5592:2;5580:9;5571:7;5567:23;5563:32;5607:2;5604:22;;;5622:1;5619;5612:12;5604:22;;5662:9;5649:23;5695:18;5687:6;5684:30;5681:50;;;5727:1;5724;5717:12;5681:50;5756:22;;5815:4;5801:19;;5797:33;-1:-1:-1;5787:61:21;;5844:1;5841;5834:12;5787:61;5884:8;5871:22;5914:47;5954:6;5914:47;:::i;:::-;5990:2;5984:9;6002:33;6030:4;6022:6;6002:33;:::i;:::-;6055:6;6044:17;;6085:6;6077;6070:22;6120:4;6112:6;6108:17;6101:24;;6183:4;6173:6;6170:1;6166:14;6156:8;6152:29;6148:40;6134:54;;6211:7;6203:6;6200:19;6197:39;;;6232:1;6229;6222:12;6197:39;6270:4;6260:8;6256:19;6245:30;;6284:161;6300:6;6295:3;6292:15;6284:161;;;6368:32;6392:7;6387:3;6368:32;:::i;:::-;6356:45;;6430:4;6317:14;;;;6421;;;;6284:161;;;6464:6;-1:-1:-1;;;;6523:4:21;6508:20;;6495:34;6554:18;6541:32;;6538:52;;;6586:1;6583;6576:12;6538:52;6609:63;6664:7;6653:8;6642:9;6638:24;6609:63;:::i;:::-;6599:73;;;5406:1272;;;;;:::o;6683:420::-;6736:3;6774:5;6768:12;6801:6;6796:3;6789:19;6833:4;6828:3;6824:14;6817:21;;6872:4;6865:5;6861:16;6895:1;6905:173;6919:6;6916:1;6913:13;6905:173;;;6980:13;;6968:26;;7023:4;7014:14;;;;7051:17;;;;6941:1;6934:9;6905:173;;;-1:-1:-1;7094:3:21;;6683:420;-1:-1:-1;;;;6683:420:21:o;7108:261::-;7287:2;7276:9;7269:21;7250:4;7307:56;7359:2;7348:9;7344:18;7336:6;7307:56;:::i;7374:377::-;7439:6;7447;7507:2;7495:9;7486:7;7482:23;7478:32;7522:2;7519:22;;;7537:1;7534;7527:12;7519:22;;7560:38;7590:7;7579:9;7560:38;:::i;:::-;7550:48;;7648:2;7637:9;7633:18;7620:32;7695:5;7688:13;7681:21;7674:5;7671:32;7661:60;;7717:1;7714;7707:12;7661:60;7740:5;7730:15;;;7374:377;;;;;:::o;7756:278::-;7824:6;7832;7885:2;7873:9;7864:7;7860:23;7856:32;7853:52;;;7901:1;7898;7891:12;7853:52;7924:38;7954:7;7943:9;7924:38;:::i;:::-;7914:48;;7981:47;8020:7;8015:2;8004:9;8000:18;7981:47;:::i;:::-;7971:57;;7756:278;;;;;:::o;8039:645::-;8143:6;8151;8159;8167;8175;8235:3;8223:9;8214:7;8210:23;8206:33;8251:2;8248:22;;;8266:1;8263;8256:12;8248:22;;8289:38;8319:7;8308:9;8289:38;:::i;:::-;8279:48;;8346:47;8385:7;8380:2;8369:9;8365:18;8346:47;:::i;:::-;8336:57;;8440:2;8429:9;8425:18;8412:32;8402:42;;8491:2;8480:9;8476:18;8463:32;8453:42;;8546:3;8535:9;8531:19;8518:33;8574:18;8566:6;8563:30;8560:50;;;8606:1;8603;8596:12;9100:468;9179:1;9175:12;;;;9253;;;9274:61;;9328:4;9320:6;9316:17;9306:27;;9274:61;9381:2;9373:6;9370:14;9350:18;9347:38;9344:218;;9418:77;9415:1;9408:88;9519:4;9516:1;9509:15;9547:4;9544:1;9537:15;9344:218;;9100:468;;;:::o;10399:184::-;10451:77;10448:1;10441:88;10548:4;10545:1;10538:15;10572:4;10569:1;10562:15;10588:184;10640:77;10637:1;10630:88;10737:4;10734:1;10727:15;10761:4;10758:1;10751:15;10777:195;10816:3;10847:66;10840:5;10837:77;10834:103;;10917:18;;:::i;:::-;-1:-1:-1;10964:1:21;10953:13;;10777:195::o;12203:150::-;12268:9;;;12314:10;;;12311:36;;;12327:18;;:::i;12358:465::-;12615:2;12604:9;12597:21;12578:4;12641:56;12693:2;12682:9;12678:18;12670:6;12641:56;:::i;:::-;12745:9;12737:6;12733:22;12728:2;12717:9;12713:18;12706:50;12773:44;12810:6;12802;12773:44;:::i;:::-;12765:52;12358:465;-1:-1:-1;;;;;12358:465:21:o;13491:329::-;13532:3;13570:5;13564:12;13597:6;13592:3;13585:19;13613:76;13682:6;13675:4;13670:3;13666:14;13659:4;13652:5;13648:16;13613:76;:::i;:::-;13734:2;13722:15;13739:66;13718:88;13709:98;;;;13809:4;13705:109;;13491:329;-1:-1:-1;;13491:329:21:o;13825:868::-;14196:42;14188:6;14184:55;14173:9;14166:74;14288:42;14280:6;14276:55;14271:2;14260:9;14256:18;14249:83;14368:3;14363:2;14352:9;14348:18;14341:31;14147:4;14395:57;14447:3;14436:9;14432:19;14424:6;14395:57;:::i;:::-;14500:9;14492:6;14488:22;14483:2;14472:9;14468:18;14461:50;14534:44;14571:6;14563;14534:44;:::i;:::-;14520:58;;14627:9;14619:6;14615:22;14609:3;14598:9;14594:19;14587:51;14655:32;14680:6;14672;14655:32;:::i;:::-;14647:40;13825:868;-1:-1:-1;;;;;;;;13825:868:21:o;14698:249::-;14767:6;14820:2;14808:9;14799:7;14795:23;14791:32;14788:52;;;14836:1;14833;14826:12;14788:52;14868:9;14862:16;14887:30;14911:5;14887:30;:::i;14952:179::-;14987:3;15029:1;15011:16;15008:23;15005:120;;;15075:1;15072;15069;15054:23;-1:-1:-1;15112:1:21;15106:8;15101:3;15097:18;15005:120;14952:179;:::o;15136:748::-;15175:3;15217:4;15199:16;15196:26;15193:39;;;15136:748;:::o;15193:39::-;15259:2;15253:9;15317:66;15299:16;15295:89;15292:1;15286:4;15271:114;15414:4;15408:11;15488:16;15481:4;15473:6;15469:17;15466:39;15445:18;15437:6;15434:30;15431:75;15428:88;;;15509:5;;15136:748;:::o;15428:88::-;15546:6;15540:4;15536:17;15582:3;15576:10;15609:18;15601:6;15598:30;15595:43;;;15631:5;;;;15136:748;:::o;15595:43::-;15715:66;15696:16;15690:4;15686:27;15682:100;15675:4;15666:6;15661:3;15657:16;15653:27;15650:133;15647:146;;;15786:5;;;;15136:748;:::o;15647:146::-;15802:57;15853:4;15844:6;15836;15832:19;15828:30;15822:4;15802:57;:::i;16719:602::-;16990:42;16982:6;16978:55;16967:9;16960:74;17082:42;17074:6;17070:55;17065:2;17054:9;17050:18;17043:83;17162:6;17157:2;17146:9;17142:18;17135:34;17205:6;17200:2;17189:9;17185:18;17178:34;17249:3;17243;17232:9;17228:19;17221:32;16941:4;17270:45;17310:3;17299:9;17295:19;17287:6;17270:45;:::i;:::-;17262:53;16719:602;-1:-1:-1;;;;;;;16719:602:21:o"},"gasEstimates":{"creation":{"codeDepositCost":"1402600","executionCost":"1465","totalCost":"1404065"},"external":{"balanceOf(address,uint256)":"infinite","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26664","supportsInterface(bytes4)":"477","uri(uint256)":"infinite"},"internal":{"__ERC1155_init(string memory)":"infinite","__ERC1155_init_unchained(string memory)":"infinite","_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_asSingletonArray(uint256)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_burn(address,uint256,uint256)":"infinite","_burnBatch(address,uint256[] memory,uint256[] memory)":"infinite","_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)":"infinite","_mint(address,uint256,uint256,bytes memory)":"infinite","_mintBatch(address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeBatchTransferFrom(address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferFrom(address,address,uint256,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_setURI(string memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":\"ERC1155Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2691,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3021,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":836,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":842,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":844,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":2051,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"IERC1155ReceiverUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":\"IERC1155ReceiverUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"IERC1155Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":\"IERC1155Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"ERC1155SupplyUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted.","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply(uint256)":{"details":"Total amount of tokens in with a given id."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","exists(uint256)":"4f558e79","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","totalSupply(uint256)":"bd85b039","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":\"ERC1155SupplyUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2691,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3021,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":836,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":842,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":844,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":2051,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"},{"astId":2240,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"_totalSupply","offset":0,"slot":"151","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2391,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:ERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"IERC1155MetadataURIUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":\"IERC1155MetadataURIUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220988e9c19240af9e66ac35d9a7ad7e4ddfb11e4e0de0beff030f7e3eef8c7b89364736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 DUP15 SWAP13 NOT 0x24 EXP 0xF9 0xE6 PUSH11 0xC35D9A7AD7E4DDFB11E4E0 0xDE SIGNEXTEND 0xEF CREATE ADDRESS 0xF7 0xE3 0xEE 0xF8 0xC7 0xB8 SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"194:7172:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:7172:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220988e9c19240af9e66ac35d9a7ad7e4ddfb11e4e0de0beff030f7e3eef8c7b89364736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 DUP15 SWAP13 NOT 0x24 EXP 0xF9 0xE6 PUSH11 0xC35D9A7AD7E4DDFB11E4E0 0xDE SIGNEXTEND 0xEF CREATE ADDRESS 0xF7 0xE3 0xEE 0xF8 0xC7 0xB8 SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"194:7172:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2691,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209117a3c24b3bebe2d466d110263c685e957a01e1a6a4c82a6ad1d35d755d7ed764736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 OR LOG3 0xC2 0x4B EXTCODESIZE 0xEB 0xE2 0xD4 PUSH7 0xD110263C685E95 PUSH27 0x1E1A6A4C82A6AD1D35D755D7ED764736F6C634300081000330000 ","sourceMap":"1279:1402:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1402:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209117a3c24b3bebe2d466d110263c685e957a01e1a6a4c82a6ad1d35d755d7ed764736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 OR LOG3 0xC2 0x4B EXTCODESIZE 0xEB 0xE2 0xD4 PUSH7 0xD110263C685E95 PUSH27 0x1E1A6A4C82A6AD1D35D755D7ED764736F6C634300081000330000 ","sourceMap":"1279:1402:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203fc7a4338b2177ca3967b3b07a1bfa32f0f5ee1a0fb8e522f4ef4ecf7fc290ba64736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xC7 LOG4 CALLER DUP12 0x21 PUSH24 0xCA3967B3B07A1BFA32F0F5EE1A0FB8E522F4EF4ECF7FC290 0xBA PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"161:2246:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;161:2246:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203fc7a4338b2177ca3967b3b07a1bfa32f0f5ee1a0fb8e522f4ef4ecf7fc290ba64736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xC7 LOG4 CALLER DUP12 0x21 PUSH24 0xCA3967B3B07A1BFA32F0F5EE1A0FB8E522F4EF4ECF7FC290 0xBA PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"161:2246:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3021,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HYDNSeal.sol":{"HYDNSeal":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentAuditId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_baseURI","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_contracts","type":"address[]"}],"name":"mintSeal","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_baseURI","type":"string"}],"name":"reinitialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply(uint256)":{"details":"Total amount of tokens in with a given id."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3066":{"entryPoint":null,"id":3066,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_670":{"entryPoint":38,"id":670,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:608:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"188:229:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"205:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"216:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"198:6:21"},"nodeType":"YulFunctionCall","src":"198:21:21"},"nodeType":"YulExpressionStatement","src":"198:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"239:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"250:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"235:3:21"},"nodeType":"YulFunctionCall","src":"235:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"255:2:21","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"228:6:21"},"nodeType":"YulFunctionCall","src":"228:30:21"},"nodeType":"YulExpressionStatement","src":"228:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"278:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"289:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"274:3:21"},"nodeType":"YulFunctionCall","src":"274:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"294:34:21","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"267:6:21"},"nodeType":"YulFunctionCall","src":"267:62:21"},"nodeType":"YulExpressionStatement","src":"267:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"360:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"345:3:21"},"nodeType":"YulFunctionCall","src":"345:18:21"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"365:9:21","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"338:6:21"},"nodeType":"YulFunctionCall","src":"338:37:21"},"nodeType":"YulExpressionStatement","src":"338:37:21"},{"nodeType":"YulAssignment","src":"384:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"396:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"407:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"392:3:21"},"nodeType":"YulFunctionCall","src":"392:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"384:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"165:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"179:4:21","type":""}],"src":"14:403:21"},{"body":{"nodeType":"YulBlock","src":"519:87:21","statements":[{"nodeType":"YulAssignment","src":"529:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"541:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"552:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"537:3:21"},"nodeType":"YulFunctionCall","src":"537:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"529:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"571:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"586:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"594:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"582:3:21"},"nodeType":"YulFunctionCall","src":"582:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"564:6:21"},"nodeType":"YulFunctionCall","src":"564:36:21"},"nodeType":"YulExpressionStatement","src":"564:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"488:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"499:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"510:4:21","type":""}],"src":"422:184:21"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612cee6200012060003960008181610837015281816108cd01528181610b4601528181610bdc0152610d0b0152612cee6000f3fe60806040526004361061017f5760003560e01c8063715018a6116100d6578063bd85b0391161007f578063f2fde38b11610059578063f2fde38b1461045f578063f62d18881461047f578063f722c17d1461049f57600080fd5b8063bd85b039146103bb578063e985e9c5146103e9578063f242432a1461043f57600080fd5b806395d89b41116100b057806395d89b4114610366578063a22cb4651461037b578063a99b396e1461039b57600080fd5b8063715018a6146103055780638da5cb5b1461031a5780639458e7181461034f57600080fd5b80632eb2c2d6116101385780634f1ef286116101125780634f1ef286146102ad5780634f558e79146102c057806352d1902d146102f057600080fd5b80632eb2c2d61461023e5780633659cfe6146102605780634e1273f41461028057600080fd5b806306fdde031161016957806306fdde03146101e75780630e89341c1461020957806318160ddd1461022957600080fd5b8062fdd58e1461018457806301ffc9a7146101b7575b600080fd5b34801561019057600080fd5b506101a461019f366004612228565b6104bf565b6040519081526020015b60405180910390f35b3480156101c357600080fd5b506101d76101d2366004612253565b610587565b60405190151581526020016101ae565b3480156101f357600080fd5b506101fc61066a565b6040516101ae91906122bb565b34801561021557600080fd5b506101fc61022436600461230c565b6106f9565b34801561023557600080fd5b506101a4610791565b34801561024a57600080fd5b5061025e6102593660046124ea565b6107b3565b005b34801561026c57600080fd5b5061025e61027b3660046125a4565b610820565b34801561028c57600080fd5b506102a061029b3660046125c0565b6109f1565b6040516101ae9190612691565b61025e6102bb3660046126d4565b610b2f565b3480156102cc57600080fd5b506101d76102db36600461230c565b600090815261012d6020526040902054151590565b3480156102fc57600080fd5b506101a4610cf1565b34801561031157600080fd5b5061025e610dc3565b34801561032657600080fd5b5060975460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ae565b34801561035b57600080fd5b506101a46101615481565b34801561037257600080fd5b506101fc610dd7565b34801561038757600080fd5b5061025e61039636600461271b565b610de5565b3480156103a757600080fd5b5061025e6103b636600461275a565b610df0565b3480156103c757600080fd5b506101a46103d636600461230c565b600090815261012d602052604090205490565b3480156103f557600080fd5b506101d7610404366004612814565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260fc6020908152604080832093909416825291909152205460ff1690565b34801561044b57600080fd5b5061025e61045a366004612849565b610f21565b34801561046b57600080fd5b5061025e61047a3660046125a4565b610f69565b34801561048b57600080fd5b5061025e61049a36600461275a565b611003565b3480156104ab57600080fd5b506101d76104ba3660046128a6565b61122c565b600073ffffffffffffffffffffffffffffffffffffffff831661054f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260fb6020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061061a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061058157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610581565b61015f80546106789061291f565b80601f01602080910402602001604051908101604052809291908181526020018280546106a49061291f565b80156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b505050505081565b600081815261012d60205260409020546060906107585760405162461bcd60e51b815260206004820152601c60248201527f4859444e5365616c3a20746f6b656e206e6f74206578697374696e67000000006044820152606401610546565b61076182611374565b61076a83611408565b60405160200161077b929190612972565b6040516020818303038152906040529050919050565b60006107a062989680466129d0565b610161546107ae9190612a0d565b905090565b60405162461bcd60e51b8152602060048201526024808201527f4859444e5365616c3a207472616e73666572206261746368206e6f7420616c6c60448201527f6f776564000000000000000000000000000000000000000000000000000000006064820152608401610546565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036108cb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610546565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109407f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146109c95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610546565b6109d281611542565b604080516000808252602082019092526109ee9183919061154a565b50565b60608151835114610a6a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610546565b6000835167ffffffffffffffff811115610a8657610a86612325565b604051908082528060200260200182016040528015610aaf578160200160208202803683370190505b50905060005b8451811015610b2757610afa858281518110610ad357610ad3612a20565b6020026020010151858381518110610aed57610aed612a20565b60200260200101516104bf565b828281518110610b0c57610b0c612a20565b6020908102919091010152610b2081612a4f565b9050610ab5565b509392505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610bda5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610546565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610c4f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610cd85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610546565b610ce182611542565b610ced8282600161154a565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d9e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610546565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b610dcb61171a565b610dd56000611781565b565b61016080546106789061291f565b610ced3383836117f8565b600054600290610100900460ff16158015610e12575060005460ff8083169116105b610e845760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610546565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff831617610100179055610ebe82611931565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60405162461bcd60e51b815260206004820152601e60248201527f4859444e5365616c3a207472616e73666572206e6f7420616c6c6f77656400006044820152606401610546565b610f7161171a565b73ffffffffffffffffffffffffffffffffffffffff8116610ffa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610546565b6109ee81611781565b600054610100900460ff16158080156110235750600054600160ff909116105b8061103d5750303b15801561103d575060005460ff166001145b6110af5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610546565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561110d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61111561193d565b61111d61193d565b6111256119ba565b61112e82611a3f565b61113661193d565b61114362989680466129d0565b6101615560408051808201909152600981527f4859444e205365616c0000000000000000000000000000000000000000000000602082015261015f906111899082612ad5565b5060408051808201909152600381527fe29b9100000000000000000000000000000000000000000000000000000000006020820152610160906111cc9082612ad5565b508015610ced57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f15565b600061123661171a565b6001610161600082825461124a9190612bf2565b90915550506101615460005b83811015611369576112a485858381811061127357611273612a20565b905060200201602081019061128891906125a4565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b6113155760405162461bcd60e51b8152602060048201526024808201527f4859444e5365616c3a207265636569766572206973206e6f74206120636f6e7460448201527f72616374000000000000000000000000000000000000000000000000000000006064820152608401610546565b61135785858381811061132a5761132a612a20565b905060200201602081019061133f91906125a4565b83600160405180602001604052806000815250611ac5565b8061136181612a4f565b915050611256565b506001949350505050565b606060fd80546113839061291f565b80601f01602080910402602001604051908101604052809291908181526020018280546113af9061291f565b80156113fc5780601f106113d1576101008083540402835291602001916113fc565b820191906000526020600020905b8154815290600101906020018083116113df57829003601f168201915b50505050509050919050565b60608161144857505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611472578061145c81612a4f565b915061146b9050600a83612c34565b915061144c565b60008167ffffffffffffffff81111561148d5761148d612325565b6040519080825280601f01601f1916602001820160405280156114b7576020820181803683370190505b5090505b841561153a576114cc600183612a0d565b91506114d9600a86612c48565b6114e4906030612bf2565b60f81b8183815181106114f9576114f9612a20565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611533600a86612c34565b94506114bb565b949350505050565b6109ee61171a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115825761157d83611c1f565b505050565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611607575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261160491810190612c5c565b60015b6116795760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610546565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461170e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610546565b5061157d838383611d0f565b60975473ffffffffffffffffffffffffffffffffffffffff163314610dd55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610546565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036118995760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610546565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260fc602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60fd610ced8282612ad5565b600054610100900460ff16610dd55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b600054610100900460ff16611a375760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b610dd5611d3a565b600054610100900460ff16611abc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b6109ee81611dc0565b73ffffffffffffffffffffffffffffffffffffffff8416611b4e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610546565b336000611b5a85611e46565b90506000611b6785611e46565b9050611b7883600089858589611e91565b600086815260fb6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915281208054879290611bb7908490612bf2565b9091555050604080518781526020810187905273ffffffffffffffffffffffffffffffffffffffff808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff81163b611ca95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610546565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611d1883611ea7565b600082511180611d255750805b1561157d57611d348383611ef4565b50505050565b600054610100900460ff16611db75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b610dd533611781565b600054610100900460ff16611e3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b6109ee81611931565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611e8057611e80612a20565b602090810291909101015292915050565b611e9f868686868686612019565b505050505050565b611eb081611c1f565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606073ffffffffffffffffffffffffffffffffffffffff83163b611f805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610546565b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051611fa89190612c75565b600060405180830381855af49150503d8060008114611fe3576040519150601f19603f3d011682016040523d82523d6000602084013e611fe8565b606091505b50915091506120108282604051806060016040528060278152602001612c92602791396121c4565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff85166120ae5760005b83518110156120ac5782818151811061205257612052612a20565b602002602001015161012d600086848151811061207157612071612a20565b6020026020010151815260200190815260200160002060008282546120969190612bf2565b909155506120a5905081612a4f565b9050612037565b505b73ffffffffffffffffffffffffffffffffffffffff8416611e9f5760005b8351811015611c165760008482815181106120e9576120e9612a20565b60200260200101519050600084838151811061210757612107612a20565b60200260200101519050600061012d6000848152602001908152602001600020549050818110156121a05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610546565b600092835261012d6020526040909220910390556121bd81612a4f565b90506120cc565b606083156121d35750816121fd565b8251156121e35782518084602001fd5b8160405162461bcd60e51b815260040161054691906122bb565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461058157600080fd5b6000806040838503121561223b57600080fd5b6122458484612204565b946020939093013593505050565b6000602082840312801561226657600080fd5b5081357fffffffff00000000000000000000000000000000000000000000000000000000811681146121fd57600080fd5b60005b838110156122b257818101518382015260200161229a565b50506000910152565b60208152600082518060208401526122da816040850160208701612297565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561231e57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561239b5761239b612325565b604052919050565b600067ffffffffffffffff8211156123bd576123bd612325565b5060051b60200190565b600082601f8301121580156123db57600080fd5b823567ffffffffffffffff8111156123f5576123f5612325565b8060051b61240560208201612354565b9182526020818601810192908101908784111561242157600080fd5b6020870192505b8383101561244d57841561243a578485fd5b8235825260209283019290910190612428565b979650505050505050565b600082601f83011215801561246c57600080fd5b50813567ffffffffffffffff81111561248757612487612325565b6124b860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612354565b8181528460208386010111156124cd57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312801561250357600080fd5b5061250e8787612204565b945061251d8760208801612204565b9350604086013567ffffffffffffffff81111561253957600080fd5b612545888289016123c7565b935050606086013567ffffffffffffffff81111561256257600080fd5b61256e888289016123c7565b925050608086013567ffffffffffffffff81111561258b57600080fd5b61259788828901612458565b9150509295509295909350565b6000602082840312156125b657600080fd5b6121fd8383612204565b60008060408385031280156125d457600080fd5b50823567ffffffffffffffff8111156125ec57600080fd5b8301601f810185136125fd57600080fd5b803561261061260b826123a3565b612354565b8082825260208201915060208360051b85010192508783111561263257600080fd5b6020840193505b8284101561265c5761264b8885612204565b825260209384019390910190612639565b9450505050602083013567ffffffffffffffff81111561267b57600080fd5b612687858286016123c7565b9150509250929050565b602080825282518282018190526000918401906040840190835b818110156126c95783518352602093840193909201916001016126ab565b509095945050505050565b60008060408385031280156126e857600080fd5b506126f38484612204565b9150602083013567ffffffffffffffff81111561270f57600080fd5b61268785828601612458565b600080604083850312801561272f57600080fd5b5061273a8484612204565b91506020830135801515811461274f57600080fd5b809150509250929050565b6000602082840312801561276d57600080fd5b50813567ffffffffffffffff81111561278557600080fd5b8201601f8101841361279657600080fd5b803567ffffffffffffffff8111156127b0576127b0612325565b6127e160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612354565b8181528560208385010111156127f657600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806040838503121561282757600080fd5b6128318484612204565b91506128408460208501612204565b90509250929050565b600080600080600060a086880312801561286257600080fd5b5061286d8787612204565b945061287c8760208801612204565b93506040860135925060608601359150608086013567ffffffffffffffff81111561258b57600080fd5b60008060208385031280156128ba57600080fd5b50823567ffffffffffffffff8111156128d257600080fd5b8301601f810185136128e357600080fd5b803567ffffffffffffffff8111156128fa57600080fd5b8560208260051b840101111561290f57600080fd5b6020919091019590945092505050565b600181811c9082168061293357607f821691505b60208210810361296c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008351612984818460208801612297565b835190830190612998818360208801612297565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a0857612a086129a1565b500290565b81810381811115610581576105816129a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a8057612a806129a1565b5060010190565b601f82111561157d57806000526020600020601f840160051c81016020851015612aae5750805b601f840160051c820191505b81811015612ace5760008155600101612aba565b5050505050565b815167ffffffffffffffff81118015612af057612af0612325565b50612b0581612aff845461291f565b84612a87565b6020601f82118060018114612b585760008415612b225750858301515b8460011b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8660031b1c19821617865550611e9f565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612ba65788860151825560209586019560019092019101612b86565b5085821015612be257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610581576105816129a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612c4357612c43612c05565b500490565b600082612c5757612c57612c05565b500690565b600060208284031215612c6e57600080fd5b5051919050565b60008251612c87818460208701612297565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202d5fb37a6d95a21b476ee3685c04e413b1680413584b5d09e28985495c0d0ddc64736f6c63430008100033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x20 PUSH3 0x26 JUMP JUMPDEST PUSH3 0xE8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND LT ISZERO PUSH3 0xE6 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2CEE PUSH3 0x120 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x837 ADD MSTORE DUP2 DUP2 PUSH2 0x8CD ADD MSTORE DUP2 DUP2 PUSH2 0xB46 ADD MSTORE DUP2 DUP2 PUSH2 0xBDC ADD MSTORE PUSH2 0xD0B ADD MSTORE PUSH2 0x2CEE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xBD85B039 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0xF62D1888 EQ PUSH2 0x47F JUMPI DUP1 PUSH4 0xF722C17D EQ PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0xA99B396E EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0x9458E718 EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0x2228 JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2253 JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x66A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AE SWAP2 SWAP1 PUSH2 0x22BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x230C JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x791 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0x24EA JUMP JUMPDEST PUSH2 0x7B3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x820 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A0 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x25C0 JUMP JUMPDEST PUSH2 0x9F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AE SWAP2 SWAP1 PUSH2 0x2691 JUMP JUMPDEST PUSH2 0x25E PUSH2 0x2BB CALLDATASIZE PUSH1 0x4 PUSH2 0x26D4 JUMP JUMPDEST PUSH2 0xB2F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x230C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0xCF1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0xDC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x161 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xDD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x271B JUMP JUMPDEST PUSH2 0xDE5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x3B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x275A JUMP JUMPDEST PUSH2 0xDF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x3D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x230C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x2814 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xF21 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x47A CALLDATASIZE PUSH1 0x4 PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0xF69 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x275A JUMP JUMPDEST PUSH2 0x1003 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x28A6 JUMP JUMPDEST PUSH2 0x122C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x54F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x61A JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x581 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x581 JUMP JUMPDEST PUSH2 0x15F DUP1 SLOAD PUSH2 0x678 SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6A4 SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6F1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6C6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6F1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6D4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH2 0x758 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A20746F6B656E206E6F74206578697374696E6700000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x761 DUP3 PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x76A DUP4 PUSH2 0x1408 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x77B SWAP3 SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A0 PUSH3 0x989680 CHAINID PUSH2 0x29D0 JUMP JUMPDEST PUSH2 0x161 SLOAD PUSH2 0x7AE SWAP2 SWAP1 PUSH2 0x2A0D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A207472616E73666572206261746368206E6F7420616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F77656400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x8CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x940 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9D2 DUP2 PUSH2 0x1542 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x9EE SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x154A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA86 JUMPI PUSH2 0xA86 PUSH2 0x2325 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAAF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB27 JUMPI PUSH2 0xAFA DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAD3 JUMPI PUSH2 0xAD3 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAED JUMPI PUSH2 0xAED PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4BF JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB0C JUMPI PUSH2 0xB0C PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xB20 DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0xAB5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xBDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC4F PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xCE1 DUP3 PUSH2 0x1542 JUMP JUMPDEST PUSH2 0xCED DUP3 DUP3 PUSH1 0x1 PUSH2 0x154A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x171A JUMP JUMPDEST PUSH2 0xDD5 PUSH1 0x0 PUSH2 0x1781 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x160 DUP1 SLOAD PUSH2 0x678 SWAP1 PUSH2 0x291F JUMP JUMPDEST PUSH2 0xCED CALLER DUP4 DUP4 PUSH2 0x17F8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xE12 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0xE84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH1 0xFF DUP4 AND OR PUSH2 0x100 OR SWAP1 SSTORE PUSH2 0xEBE DUP3 PUSH2 0x1931 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0xFF DUP3 AND DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A207472616E73666572206E6F7420616C6C6F7765640000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xF71 PUSH2 0x171A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xFFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1023 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x103D JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x103D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x10AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1115 PUSH2 0x193D JUMP JUMPDEST PUSH2 0x111D PUSH2 0x193D JUMP JUMPDEST PUSH2 0x1125 PUSH2 0x19BA JUMP JUMPDEST PUSH2 0x112E DUP3 PUSH2 0x1A3F JUMP JUMPDEST PUSH2 0x1136 PUSH2 0x193D JUMP JUMPDEST PUSH2 0x1143 PUSH3 0x989680 CHAINID PUSH2 0x29D0 JUMP JUMPDEST PUSH2 0x161 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH32 0x4859444E205365616C0000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x15F SWAP1 PUSH2 0x1189 SWAP1 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0xE29B910000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x160 SWAP1 PUSH2 0x11CC SWAP1 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xCED JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0xF15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1236 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x1 PUSH2 0x161 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x124A SWAP2 SWAP1 PUSH2 0x2BF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0x161 SLOAD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1369 JUMPI PUSH2 0x12A4 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x1273 JUMPI PUSH2 0x1273 PUSH2 0x2A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1288 SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x1315 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A207265636569766572206973206E6F74206120636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7261637400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x1357 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x132A JUMPI PUSH2 0x132A PUSH2 0x2A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x133F SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1AC5 JUMP JUMPDEST DUP1 PUSH2 0x1361 DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1256 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFD DUP1 SLOAD PUSH2 0x1383 SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13AF SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13FC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13D1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13FC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13DF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x1448 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1472 JUMPI DUP1 PUSH2 0x145C DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP PUSH2 0x146B SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x2C34 JUMP JUMPDEST SWAP2 POP PUSH2 0x144C JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x148D JUMPI PUSH2 0x148D PUSH2 0x2325 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14B7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x153A JUMPI PUSH2 0x14CC PUSH1 0x1 DUP4 PUSH2 0x2A0D JUMP JUMPDEST SWAP2 POP PUSH2 0x14D9 PUSH1 0xA DUP7 PUSH2 0x2C48 JUMP JUMPDEST PUSH2 0x14E4 SWAP1 PUSH1 0x30 PUSH2 0x2BF2 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x14F9 JUMPI PUSH2 0x14F9 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1533 PUSH1 0xA DUP7 PUSH2 0x2C34 JUMP JUMPDEST SWAP5 POP PUSH2 0x14BB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x9EE PUSH2 0x171A JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1582 JUMPI PUSH2 0x157D DUP4 PUSH2 0x1C1F JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1607 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1604 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2C5C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1679 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x170E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST POP PUSH2 0x157D DUP4 DUP4 DUP4 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xDD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1899 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0xFD PUSH2 0xCED DUP3 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A37 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xDD5 PUSH2 0x1D3A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1ABC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1DC0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1B4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1B5A DUP6 PUSH2 0x1E46 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B67 DUP6 PUSH2 0x1E46 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B78 DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1E91 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x1BB7 SWAP1 DUP5 SWAP1 PUSH2 0x2BF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x1CA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D18 DUP4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x1D25 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x157D JUMPI PUSH2 0x1D34 DUP4 DUP4 PUSH2 0x1EF4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xDD5 CALLER PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1931 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E80 JUMPI PUSH2 0x1E80 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E9F DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2019 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EB0 DUP2 PUSH2 0x1C1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND EXTCODESIZE PUSH2 0x1F80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x1FA8 SWAP2 SWAP1 PUSH2 0x2C75 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FE3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FE8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2010 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2C92 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x21C4 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x20AE JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x20AC JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2052 JUMPI PUSH2 0x2052 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12D PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2071 JUMPI PUSH2 0x2071 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2096 SWAP2 SWAP1 PUSH2 0x2BF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x20A5 SWAP1 POP DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0x2037 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1E9F JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1C16 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20E9 JUMPI PUSH2 0x20E9 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2107 JUMPI PUSH2 0x2107 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x12D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x21A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E74206578636565647320746F74 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C537570706C79000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP2 SUB SWAP1 SSTORE PUSH2 0x21BD DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0x20CC JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x21D3 JUMPI POP DUP2 PUSH2 0x21FD JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x21E3 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x546 SWAP2 SWAP1 PUSH2 0x22BB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x223B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2245 DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT DUP1 ISZERO PUSH2 0x2266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x21FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x22B2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x229A JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x22DA DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2297 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x231E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x239B JUMPI PUSH2 0x239B PUSH2 0x2325 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23BD JUMPI PUSH2 0x23BD PUSH2 0x2325 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x23DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23F5 JUMPI PUSH2 0x23F5 PUSH2 0x2325 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x2405 PUSH1 0x20 DUP3 ADD PUSH2 0x2354 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 DUP8 DUP5 GT ISZERO PUSH2 0x2421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x244D JUMPI DUP5 ISZERO PUSH2 0x243A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2428 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x246C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2487 JUMPI PUSH2 0x2487 PUSH2 0x2325 JUMP JUMPDEST PUSH2 0x24B8 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2354 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x24CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x2503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x250E DUP8 DUP8 PUSH2 0x2204 JUMP JUMPDEST SWAP5 POP PUSH2 0x251D DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x2204 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2545 DUP9 DUP3 DUP10 ADD PUSH2 0x23C7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x256E DUP9 DUP3 DUP10 ADD PUSH2 0x23C7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x258B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2597 DUP9 DUP3 DUP10 ADD PUSH2 0x2458 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21FD DUP4 DUP4 PUSH2 0x2204 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x25D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x25FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2610 PUSH2 0x260B DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH2 0x2354 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 POP DUP8 DUP4 GT ISZERO PUSH2 0x2632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x265C JUMPI PUSH2 0x264B DUP9 DUP6 PUSH2 0x2204 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2639 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x267B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2687 DUP6 DUP3 DUP7 ADD PUSH2 0x23C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26C9 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x26AB JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x26E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26F3 DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x270F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2687 DUP6 DUP3 DUP7 ADD PUSH2 0x2458 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x272F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273A DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x274F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT DUP1 ISZERO PUSH2 0x276D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27B0 JUMPI PUSH2 0x27B0 PUSH2 0x2325 JUMP JUMPDEST PUSH2 0x27E1 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2354 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x27F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2827 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2831 DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP2 POP PUSH2 0x2840 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2204 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x2862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286D DUP8 DUP8 PUSH2 0x2204 JUMP JUMPDEST SWAP5 POP PUSH2 0x287C DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x2204 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x258B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x28BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x28E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x290F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2933 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x296C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2984 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2297 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2998 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2297 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2A08 JUMPI PUSH2 0x2A08 PUSH2 0x29A1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x581 JUMPI PUSH2 0x581 PUSH2 0x29A1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2A80 JUMPI PUSH2 0x2A80 PUSH2 0x29A1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x157D JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2AAE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2ACE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2ABA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2AF0 JUMPI PUSH2 0x2AF0 PUSH2 0x2325 JUMP JUMPDEST POP PUSH2 0x2B05 DUP2 PUSH2 0x2AFF DUP5 SLOAD PUSH2 0x291F JUMP JUMPDEST DUP5 PUSH2 0x2A87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT DUP1 PUSH1 0x1 DUP2 EQ PUSH2 0x2B58 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2B22 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST DUP5 PUSH1 0x1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 PUSH1 0x3 SHL SHR NOT DUP3 AND OR DUP7 SSTORE POP PUSH2 0x1E9F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2BA6 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x2B86 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2BE2 JUMPI DUP8 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x581 JUMPI PUSH2 0x581 PUSH2 0x29A1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2C43 JUMPI PUSH2 0x2C43 PUSH2 0x2C05 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2C57 JUMPI PUSH2 0x2C57 PUSH2 0x2C05 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C87 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2297 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212202D5FB3 PUSH27 0x6D95A21B476EE3685C04E413B1680413584B5D09E28985495C0D0D 0xDC PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"573:2339:17:-:0;;;1332:4:5;1289:48;;805:47:17;;;;;;;;;-1:-1:-1;825:22:17;:20;:22::i;:::-;573:2339;;5388:279:4;5456:13;;;;;;;5455:14;5447:66;;;;-1:-1:-1;;;5447:66:4;;216:2:21;5447:66:4;;;198:21:21;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:21;;;338:37;392:19;;5447:66:4;;;;;;;;5527:12;;5542:15;5527:12;;;:30;5523:138;;;5573:12;:30;;-1:-1:-1;;5573:30:4;5588:15;5573:30;;;;;;5622:28;;564:36:21;;;5622:28:4;;552:2:21;537:18;5622:28:4;;;;;;;5523:138;5388:279::o;422:184:21:-;573:2339:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Context_init_2662":{"entryPoint":6461,"id":2662,"parameterSlots":0,"returnSlots":0},"@__ERC1155Supply_init_3324":{"entryPoint":null,"id":3324,"parameterSlots":0,"returnSlots":0},"@__ERC1155_init_3537":{"entryPoint":6719,"id":3537,"parameterSlots":1,"returnSlots":0},"@__ERC1155_init_unchained_3549":{"entryPoint":7616,"id":3549,"parameterSlots":1,"returnSlots":0},"@__Ownable_init_26":{"entryPoint":6586,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":7482,"id":37,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_689":{"entryPoint":null,"id":689,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_4558":{"entryPoint":null,"id":4558,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_4714":{"entryPoint":7750,"id":4714,"parameterSlots":1,"returnSlots":1},"@_authorizeUpgrade_3129":{"entryPoint":5442,"id":3129,"parameterSlots":1,"returnSlots":0},"@_beforeTokenTransfer_3161":{"entryPoint":7825,"id":3161,"parameterSlots":6,"returnSlots":0},"@_beforeTokenTransfer_3480":{"entryPoint":8217,"id":3480,"parameterSlots":6,"returnSlots":0},"@_beforeTokenTransfer_4539":{"entryPoint":null,"id":4539,"parameterSlots":6,"returnSlots":0},"@_checkOwner_68":{"entryPoint":5914,"id":68,"parameterSlots":0,"returnSlots":0},"@_functionDelegateCall_504":{"entryPoint":7924,"id":504,"parameterSlots":2,"returnSlots":1},"@_getImplementation_188":{"entryPoint":null,"id":188,"parameterSlots":0,"returnSlots":1},"@_mint_4149":{"entryPoint":6853,"id":4149,"parameterSlots":4,"returnSlots":0},"@_msgSender_2677":{"entryPoint":null,"id":2677,"parameterSlots":0,"returnSlots":1},"@_setApprovalForAll_4520":{"entryPoint":6136,"id":4520,"parameterSlots":3,"returnSlots":0},"@_setImplementation_212":{"entryPoint":7199,"id":212,"parameterSlots":1,"returnSlots":0},"@_setURI_4060":{"entryPoint":6449,"id":4060,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_125":{"entryPoint":6017,"id":125,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_308":{"entryPoint":5450,"id":308,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_255":{"entryPoint":7439,"id":255,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_227":{"entryPoint":7847,"id":227,"parameterSlots":1,"returnSlots":0},"@balanceOfBatch_3684":{"entryPoint":2545,"id":3684,"parameterSlots":2,"returnSlots":1},"@balanceOf_3620":{"entryPoint":1215,"id":3620,"parameterSlots":2,"returnSlots":1},"@currentAuditId_3307":{"entryPoint":null,"id":3307,"parameterSlots":0,"returnSlots":0},"@exists_3363":{"entryPoint":null,"id":3363,"parameterSlots":1,"returnSlots":1},"@getAddressSlot_2718":{"entryPoint":null,"id":2718,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2729":{"entryPoint":null,"id":2729,"parameterSlots":1,"returnSlots":1},"@initialize_3105":{"entryPoint":4099,"id":3105,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_3719":{"entryPoint":null,"id":3719,"parameterSlots":2,"returnSlots":1},"@isContract_2425":{"entryPoint":null,"id":2425,"parameterSlots":1,"returnSlots":1},"@mintSeal_3298":{"entryPoint":4652,"id":3298,"parameterSlots":2,"returnSlots":1},"@name_3303":{"entryPoint":1642,"id":3303,"parameterSlots":0,"returnSlots":0},"@owner_54":{"entryPoint":null,"id":54,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_752":{"entryPoint":3313,"id":752,"parameterSlots":0,"returnSlots":1},"@reinitialize_3118":{"entryPoint":3568,"id":3118,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_82":{"entryPoint":3523,"id":82,"parameterSlots":0,"returnSlots":0},"@safeBatchTransferFrom_3201":{"entryPoint":1971,"id":3201,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_3180":{"entryPoint":3873,"id":3180,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_3701":{"entryPoint":3557,"id":3701,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3016":{"entryPoint":null,"id":3016,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3580":{"entryPoint":1415,"id":3580,"parameterSlots":1,"returnSlots":1},"@symbol_3305":{"entryPoint":3543,"id":3305,"parameterSlots":0,"returnSlots":0},"@toString_2840":{"entryPoint":5128,"id":2840,"parameterSlots":1,"returnSlots":1},"@totalSupply_3245":{"entryPoint":1937,"id":3245,"parameterSlots":0,"returnSlots":1},"@totalSupply_3347":{"entryPoint":null,"id":3347,"parameterSlots":1,"returnSlots":1},"@transferOwnership_105":{"entryPoint":3945,"id":105,"parameterSlots":1,"returnSlots":0},"@upgradeToAndCall_795":{"entryPoint":2863,"id":795,"parameterSlots":2,"returnSlots":0},"@upgradeTo_774":{"entryPoint":2080,"id":774,"parameterSlots":1,"returnSlots":0},"@uri_3232":{"entryPoint":1785,"id":3232,"parameterSlots":1,"returnSlots":1},"@uri_3592":{"entryPoint":4980,"id":3592,"parameterSlots":1,"returnSlots":1},"@verifyCallResult_2649":{"entryPoint":8644,"id":2649,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":8708,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":9159,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":9304,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9636,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10260,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":9450,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":10313,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":10011,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":9940,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8744,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":10406,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9664,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":11356,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":8787,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":10074,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8972,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11381,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10610,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9873,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8891,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3f84c69b1aba6fc99dba484e7c882a2ea70a6ea4d71ee67f03ae77d3d8f6d1e8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5c7954140cefba85008d6ba5fe42bda7421a9d6afee2f24ef8454b4191859c7c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_81c3f0ac137a93bc1fd51a97ddb9bc0526804f6e202e9dbd362da1d7654bb15b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ffcd27d0545ae5d83e35f36d8b146e4c7d852c0e8c6bd9849c6f1c6d69b8640e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":9044,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":9123,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11250,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":11316,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":10704,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":10765,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":10887,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":10965,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8855,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":10527,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":10831,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":11336,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":10657,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":11269,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10784,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8997,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:24937:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"68:176:21","statements":[{"nodeType":"YulAssignment","src":"78:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"100:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"87:12:21"},"nodeType":"YulFunctionCall","src":"87:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"78:5:21"}]},{"nodeType":"YulVariableDeclaration","src":"116:20:21","value":{"name":"value","nodeType":"YulIdentifier","src":"131:5:21"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"120:7:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"222:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"231:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"234:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"224:6:21"},"nodeType":"YulFunctionCall","src":"224:12:21"},"nodeType":"YulExpressionStatement","src":"224:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"158:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"169:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"176:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"165:3:21"},"nodeType":"YulFunctionCall","src":"165:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"155:2:21"},"nodeType":"YulFunctionCall","src":"155:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"148:6:21"},"nodeType":"YulFunctionCall","src":"148:73:21"},"nodeType":"YulIf","src":"145:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"50:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"58:5:21","type":""}],"src":"14:230:21"},{"body":{"nodeType":"YulBlock","src":"336:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"382:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"391:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"394:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"384:6:21"},"nodeType":"YulFunctionCall","src":"384:12:21"},"nodeType":"YulExpressionStatement","src":"384:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"357:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"366:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"353:3:21"},"nodeType":"YulFunctionCall","src":"353:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"378:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"349:3:21"},"nodeType":"YulFunctionCall","src":"349:32:21"},"nodeType":"YulIf","src":"346:52:21"},{"nodeType":"YulAssignment","src":"407:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"436:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"447:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"417:18:21"},"nodeType":"YulFunctionCall","src":"417:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:21"}]},{"nodeType":"YulAssignment","src":"464:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"491:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"502:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"487:3:21"},"nodeType":"YulFunctionCall","src":"487:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"474:12:21"},"nodeType":"YulFunctionCall","src":"474:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"464:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"294:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"305:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"317:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"325:6:21","type":""}],"src":"249:263:21"},{"body":{"nodeType":"YulBlock","src":"618:76:21","statements":[{"nodeType":"YulAssignment","src":"628:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"640:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"651:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"636:3:21"},"nodeType":"YulFunctionCall","src":"636:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"628:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"670:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"681:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"663:6:21"},"nodeType":"YulFunctionCall","src":"663:25:21"},"nodeType":"YulExpressionStatement","src":"663:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"587:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"598:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"609:4:21","type":""}],"src":"517:177:21"},{"body":{"nodeType":"YulBlock","src":"768:284:21","statements":[{"nodeType":"YulVariableDeclaration","src":"778:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"796:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"792:3:21"},"nodeType":"YulFunctionCall","src":"792:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"817:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"788:3:21"},"nodeType":"YulFunctionCall","src":"788:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"782:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"835:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"844:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"847:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"837:6:21"},"nodeType":"YulFunctionCall","src":"837:12:21"},"nodeType":"YulExpressionStatement","src":"837:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"832:2:21"},"nodeType":"YulIf","src":"829:22:21"},{"nodeType":"YulVariableDeclaration","src":"860:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"886:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"873:12:21"},"nodeType":"YulFunctionCall","src":"873:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"864:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1006:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1015:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1018:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1008:6:21"},"nodeType":"YulFunctionCall","src":"1008:12:21"},"nodeType":"YulExpressionStatement","src":"1008:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"918:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"929:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"936:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"925:3:21"},"nodeType":"YulFunctionCall","src":"925:78:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"915:2:21"},"nodeType":"YulFunctionCall","src":"915:89:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"908:6:21"},"nodeType":"YulFunctionCall","src":"908:97:21"},"nodeType":"YulIf","src":"905:117:21"},{"nodeType":"YulAssignment","src":"1031:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1041:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1031:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"734:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"745:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"757:6:21","type":""}],"src":"699:353:21"},{"body":{"nodeType":"YulBlock","src":"1152:92:21","statements":[{"nodeType":"YulAssignment","src":"1162:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:21"},"nodeType":"YulFunctionCall","src":"1170:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1162:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1204:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1229:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1222:6:21"},"nodeType":"YulFunctionCall","src":"1222:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1215:6:21"},"nodeType":"YulFunctionCall","src":"1215:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1197:6:21"},"nodeType":"YulFunctionCall","src":"1197:41:21"},"nodeType":"YulExpressionStatement","src":"1197:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1121:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:21","type":""}],"src":"1057:187:21"},{"body":{"nodeType":"YulBlock","src":"1315:184:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1325:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1334:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1329:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1394:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1419:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"1424:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1415:3:21"},"nodeType":"YulFunctionCall","src":"1415:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1438:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"1443:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1434:3:21"},"nodeType":"YulFunctionCall","src":"1434:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1428:5:21"},"nodeType":"YulFunctionCall","src":"1428:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1408:6:21"},"nodeType":"YulFunctionCall","src":"1408:39:21"},"nodeType":"YulExpressionStatement","src":"1408:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1355:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"1358:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1352:2:21"},"nodeType":"YulFunctionCall","src":"1352:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1366:19:21","statements":[{"nodeType":"YulAssignment","src":"1368:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1377:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"1380:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1373:3:21"},"nodeType":"YulFunctionCall","src":"1373:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1368:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"1348:3:21","statements":[]},"src":"1344:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1477:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"1482:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1473:3:21"},"nodeType":"YulFunctionCall","src":"1473:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"1491:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1466:6:21"},"nodeType":"YulFunctionCall","src":"1466:27:21"},"nodeType":"YulExpressionStatement","src":"1466:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1293:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1298:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"1303:6:21","type":""}],"src":"1249:250:21"},{"body":{"nodeType":"YulBlock","src":"1625:334:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1642:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1653:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1635:6:21"},"nodeType":"YulFunctionCall","src":"1635:21:21"},"nodeType":"YulExpressionStatement","src":"1635:21:21"},{"nodeType":"YulVariableDeclaration","src":"1665:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1685:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1679:5:21"},"nodeType":"YulFunctionCall","src":"1679:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1669:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1712:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1723:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1708:3:21"},"nodeType":"YulFunctionCall","src":"1708:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"1728:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1701:6:21"},"nodeType":"YulFunctionCall","src":"1701:34:21"},"nodeType":"YulExpressionStatement","src":"1701:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1783:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1791:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1779:3:21"},"nodeType":"YulFunctionCall","src":"1779:15:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1800:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1811:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1796:3:21"},"nodeType":"YulFunctionCall","src":"1796:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"1816:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1744:34:21"},"nodeType":"YulFunctionCall","src":"1744:79:21"},"nodeType":"YulExpressionStatement","src":"1744:79:21"},{"nodeType":"YulAssignment","src":"1832:121:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1848:9:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1867:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1875:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1863:3:21"},"nodeType":"YulFunctionCall","src":"1863:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"1880:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1859:3:21"},"nodeType":"YulFunctionCall","src":"1859:88:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1844:3:21"},"nodeType":"YulFunctionCall","src":"1844:104:21"},{"kind":"number","nodeType":"YulLiteral","src":"1950:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1840:3:21"},"nodeType":"YulFunctionCall","src":"1840:113:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1832:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1594:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1605:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1616:4:21","type":""}],"src":"1504:455:21"},{"body":{"nodeType":"YulBlock","src":"2034:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"2080:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2089:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2092:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2082:6:21"},"nodeType":"YulFunctionCall","src":"2082:12:21"},"nodeType":"YulExpressionStatement","src":"2082:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2055:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2064:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2051:3:21"},"nodeType":"YulFunctionCall","src":"2051:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2076:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2047:3:21"},"nodeType":"YulFunctionCall","src":"2047:32:21"},"nodeType":"YulIf","src":"2044:52:21"},{"nodeType":"YulAssignment","src":"2105:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2128:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2115:12:21"},"nodeType":"YulFunctionCall","src":"2115:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2105:6:21"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2000:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2011:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2023:6:21","type":""}],"src":"1964:180:21"},{"body":{"nodeType":"YulBlock","src":"2181:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2198:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2201:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2191:6:21"},"nodeType":"YulFunctionCall","src":"2191:88:21"},"nodeType":"YulExpressionStatement","src":"2191:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2295:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2298:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2288:6:21"},"nodeType":"YulFunctionCall","src":"2288:15:21"},"nodeType":"YulExpressionStatement","src":"2288:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2319:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2322:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2312:6:21"},"nodeType":"YulFunctionCall","src":"2312:15:21"},"nodeType":"YulExpressionStatement","src":"2312:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2149:184:21"},{"body":{"nodeType":"YulBlock","src":"2383:320:21","statements":[{"nodeType":"YulAssignment","src":"2393:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2409:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2403:5:21"},"nodeType":"YulFunctionCall","src":"2403:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2393:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"2421:22:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2437:6:21"},"variables":[{"name":"memPtr_1","nodeType":"YulTypedName","src":"2425:8:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2452:117:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2474:6:21"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2490:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2496:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2486:3:21"},"nodeType":"YulFunctionCall","src":"2486:13:21"},{"kind":"number","nodeType":"YulLiteral","src":"2501:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2482:3:21"},"nodeType":"YulFunctionCall","src":"2482:86:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2470:3:21"},"nodeType":"YulFunctionCall","src":"2470:99:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2456:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2644:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2646:16:21"},"nodeType":"YulFunctionCall","src":"2646:18:21"},"nodeType":"YulExpressionStatement","src":"2646:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2587:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2599:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2584:2:21"},"nodeType":"YulFunctionCall","src":"2584:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2623:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2635:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2620:2:21"},"nodeType":"YulFunctionCall","src":"2620:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2581:2:21"},"nodeType":"YulFunctionCall","src":"2581:62:21"},"nodeType":"YulIf","src":"2578:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2682:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2686:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2675:6:21"},"nodeType":"YulFunctionCall","src":"2675:22:21"},"nodeType":"YulExpressionStatement","src":"2675:22:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2363:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2372:6:21","type":""}],"src":"2338:365:21"},{"body":{"nodeType":"YulBlock","src":"2777:114:21","statements":[{"body":{"nodeType":"YulBlock","src":"2821:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2823:16:21"},"nodeType":"YulFunctionCall","src":"2823:18:21"},"nodeType":"YulExpressionStatement","src":"2823:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2793:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2801:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2790:2:21"},"nodeType":"YulFunctionCall","src":"2790:30:21"},"nodeType":"YulIf","src":"2787:56:21"},{"nodeType":"YulAssignment","src":"2852:33:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2868:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2871:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2864:3:21"},"nodeType":"YulFunctionCall","src":"2864:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"2880:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2860:3:21"},"nodeType":"YulFunctionCall","src":"2860:25:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2852:4:21"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2757:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2768:4:21","type":""}],"src":"2708:183:21"},{"body":{"nodeType":"YulBlock","src":"2960:717:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2970:45:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2995:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3003:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2991:3:21"},"nodeType":"YulFunctionCall","src":"2991:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3010:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2987:3:21"},"nodeType":"YulFunctionCall","src":"2987:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2980:6:21"},"nodeType":"YulFunctionCall","src":"2980:35:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2974:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3030:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3039:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3042:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3032:6:21"},"nodeType":"YulFunctionCall","src":"3032:12:21"},"nodeType":"YulExpressionStatement","src":"3032:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3027:2:21"},"nodeType":"YulIf","src":"3024:22:21"},{"nodeType":"YulVariableDeclaration","src":"3055:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3082:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3069:12:21"},"nodeType":"YulFunctionCall","src":"3069:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3059:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3132:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3134:16:21"},"nodeType":"YulFunctionCall","src":"3134:18:21"},"nodeType":"YulExpressionStatement","src":"3134:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3104:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3112:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3101:2:21"},"nodeType":"YulFunctionCall","src":"3101:30:21"},"nodeType":"YulIf","src":"3098:56:21"},{"nodeType":"YulVariableDeclaration","src":"3163:26:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3179:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3182:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3175:3:21"},"nodeType":"YulFunctionCall","src":"3175:14:21"},"variables":[{"name":"size","nodeType":"YulTypedName","src":"3167:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3198:43:21","value":{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3229:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"3235:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3225:3:21"},"nodeType":"YulFunctionCall","src":"3225:15:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3209:15:21"},"nodeType":"YulFunctionCall","src":"3209:32:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3202:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3250:16:21","value":{"name":"dst","nodeType":"YulIdentifier","src":"3263:3:21"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3254:5:21","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3282:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"3287:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3275:6:21"},"nodeType":"YulFunctionCall","src":"3275:19:21"},"nodeType":"YulExpressionStatement","src":"3275:19:21"},{"nodeType":"YulAssignment","src":"3303:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3314:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3319:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3310:3:21"},"nodeType":"YulFunctionCall","src":"3310:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3303:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"3333:42:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3355:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"3363:4:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3351:3:21"},"nodeType":"YulFunctionCall","src":"3351:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"3370:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3347:3:21"},"nodeType":"YulFunctionCall","src":"3347:28:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3337:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3403:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3412:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3415:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3405:6:21"},"nodeType":"YulFunctionCall","src":"3405:12:21"},"nodeType":"YulExpressionStatement","src":"3405:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3390:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"3398:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3387:2:21"},"nodeType":"YulFunctionCall","src":"3387:15:21"},"nodeType":"YulIf","src":"3384:35:21"},{"nodeType":"YulVariableDeclaration","src":"3428:28:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3443:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3451:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3439:3:21"},"nodeType":"YulFunctionCall","src":"3439:17:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3432:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3523:125:21","statements":[{"body":{"nodeType":"YulBlock","src":"3543:18:21","statements":[{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3552:2:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3556:2:21"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3545:6:21"},"nodeType":"YulFunctionCall","src":"3545:14:21"},"nodeType":"YulExpressionStatement","src":"3545:14:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3540:2:21"},"nodeType":"YulIf","src":"3537:24:21"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3581:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3599:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3586:12:21"},"nodeType":"YulFunctionCall","src":"3586:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3574:6:21"},"nodeType":"YulFunctionCall","src":"3574:30:21"},"nodeType":"YulExpressionStatement","src":"3574:30:21"},{"nodeType":"YulAssignment","src":"3617:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3628:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3633:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3624:3:21"},"nodeType":"YulFunctionCall","src":"3624:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3617:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3476:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3481:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3473:2:21"},"nodeType":"YulFunctionCall","src":"3473:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3489:25:21","statements":[{"nodeType":"YulAssignment","src":"3491:21:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3502:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3507:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3498:3:21"},"nodeType":"YulFunctionCall","src":"3498:14:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3491:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"3469:3:21","statements":[]},"src":"3465:183:21"},{"nodeType":"YulAssignment","src":"3657:14:21","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3666:5:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3657:5:21"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2934:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"2942:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2950:5:21","type":""}],"src":"2896:781:21"},{"body":{"nodeType":"YulBlock","src":"3734:586:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3744:45:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3769:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3777:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3765:3:21"},"nodeType":"YulFunctionCall","src":"3765:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3784:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3761:3:21"},"nodeType":"YulFunctionCall","src":"3761:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3754:6:21"},"nodeType":"YulFunctionCall","src":"3754:35:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3748:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3804:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3813:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3816:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3806:6:21"},"nodeType":"YulFunctionCall","src":"3806:12:21"},"nodeType":"YulExpressionStatement","src":"3806:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3801:2:21"},"nodeType":"YulIf","src":"3798:22:21"},{"nodeType":"YulVariableDeclaration","src":"3829:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3856:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3843:12:21"},"nodeType":"YulFunctionCall","src":"3843:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3833:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3906:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3908:16:21"},"nodeType":"YulFunctionCall","src":"3908:18:21"},"nodeType":"YulExpressionStatement","src":"3908:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3878:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3886:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3875:2:21"},"nodeType":"YulFunctionCall","src":"3875:30:21"},"nodeType":"YulIf","src":"3872:56:21"},{"nodeType":"YulVariableDeclaration","src":"3937:133:21","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3980:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3988:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3976:3:21"},"nodeType":"YulFunctionCall","src":"3976:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"3995:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3972:3:21"},"nodeType":"YulFunctionCall","src":"3972:90:21"},{"kind":"number","nodeType":"YulLiteral","src":"4064:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3968:3:21"},"nodeType":"YulFunctionCall","src":"3968:101:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3952:15:21"},"nodeType":"YulFunctionCall","src":"3952:118:21"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"3941:7:21","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4086:7:21"},{"name":"length","nodeType":"YulIdentifier","src":"4095:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4079:6:21"},"nodeType":"YulFunctionCall","src":"4079:23:21"},"nodeType":"YulExpressionStatement","src":"4079:23:21"},{"body":{"nodeType":"YulBlock","src":"4154:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4163:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4166:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4156:6:21"},"nodeType":"YulFunctionCall","src":"4156:12:21"},"nodeType":"YulExpressionStatement","src":"4156:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4125:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"4133:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4121:3:21"},"nodeType":"YulFunctionCall","src":"4121:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"4142:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4117:3:21"},"nodeType":"YulFunctionCall","src":"4117:30:21"},{"name":"end","nodeType":"YulIdentifier","src":"4149:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4114:2:21"},"nodeType":"YulFunctionCall","src":"4114:39:21"},"nodeType":"YulIf","src":"4111:59:21"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4196:7:21"},{"kind":"number","nodeType":"YulLiteral","src":"4205:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4192:3:21"},"nodeType":"YulFunctionCall","src":"4192:18:21"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4216:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4224:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4212:3:21"},"nodeType":"YulFunctionCall","src":"4212:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"4231:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4179:12:21"},"nodeType":"YulFunctionCall","src":"4179:59:21"},"nodeType":"YulExpressionStatement","src":"4179:59:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4262:7:21"},{"name":"length","nodeType":"YulIdentifier","src":"4271:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4258:3:21"},"nodeType":"YulFunctionCall","src":"4258:20:21"},{"kind":"number","nodeType":"YulLiteral","src":"4280:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4254:3:21"},"nodeType":"YulFunctionCall","src":"4254:31:21"},{"kind":"number","nodeType":"YulLiteral","src":"4287:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4247:6:21"},"nodeType":"YulFunctionCall","src":"4247:42:21"},"nodeType":"YulExpressionStatement","src":"4247:42:21"},{"nodeType":"YulAssignment","src":"4298:16:21","value":{"name":"array_1","nodeType":"YulIdentifier","src":"4307:7:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4298:5:21"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3708:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3716:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3724:5:21","type":""}],"src":"3682:638:21"},{"body":{"nodeType":"YulBlock","src":"4522:796:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4532:43:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4550:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4559:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4546:3:21"},"nodeType":"YulFunctionCall","src":"4546:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4571:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4542:3:21"},"nodeType":"YulFunctionCall","src":"4542:33:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4536:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4590:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4599:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4602:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4592:6:21"},"nodeType":"YulFunctionCall","src":"4592:12:21"},"nodeType":"YulExpressionStatement","src":"4592:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"4587:2:21"},"nodeType":"YulIf","src":"4584:22:21"},{"nodeType":"YulAssignment","src":"4615:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4644:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4655:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4625:18:21"},"nodeType":"YulFunctionCall","src":"4625:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4615:6:21"}]},{"nodeType":"YulAssignment","src":"4672:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4705:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4716:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4701:3:21"},"nodeType":"YulFunctionCall","src":"4701:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4721:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4682:18:21"},"nodeType":"YulFunctionCall","src":"4682:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4672:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4738:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4769:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4780:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4765:3:21"},"nodeType":"YulFunctionCall","src":"4765:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4752:12:21"},"nodeType":"YulFunctionCall","src":"4752:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4742:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4827:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4836:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4839:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4829:6:21"},"nodeType":"YulFunctionCall","src":"4829:12:21"},"nodeType":"YulExpressionStatement","src":"4829:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4799:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4807:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4796:2:21"},"nodeType":"YulFunctionCall","src":"4796:30:21"},"nodeType":"YulIf","src":"4793:50:21"},{"nodeType":"YulAssignment","src":"4852:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4895:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4906:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4891:3:21"},"nodeType":"YulFunctionCall","src":"4891:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4915:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4862:28:21"},"nodeType":"YulFunctionCall","src":"4862:61:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4852:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4932:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4965:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4976:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4961:3:21"},"nodeType":"YulFunctionCall","src":"4961:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4948:12:21"},"nodeType":"YulFunctionCall","src":"4948:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4936:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5025:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5034:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5037:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5027:6:21"},"nodeType":"YulFunctionCall","src":"5027:12:21"},"nodeType":"YulExpressionStatement","src":"5027:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4995:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5005:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4992:2:21"},"nodeType":"YulFunctionCall","src":"4992:32:21"},"nodeType":"YulIf","src":"4989:52:21"},{"nodeType":"YulAssignment","src":"5050:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5093:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5104:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5089:3:21"},"nodeType":"YulFunctionCall","src":"5089:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5115:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5060:28:21"},"nodeType":"YulFunctionCall","src":"5060:63:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5050:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5132:49:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5165:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5176:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5161:3:21"},"nodeType":"YulFunctionCall","src":"5161:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5148:12:21"},"nodeType":"YulFunctionCall","src":"5148:33:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5136:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5226:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5235:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5238:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5228:6:21"},"nodeType":"YulFunctionCall","src":"5228:12:21"},"nodeType":"YulExpressionStatement","src":"5228:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5196:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5206:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5193:2:21"},"nodeType":"YulFunctionCall","src":"5193:32:21"},"nodeType":"YulIf","src":"5190:52:21"},{"nodeType":"YulAssignment","src":"5251:61:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5282:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5293:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5278:3:21"},"nodeType":"YulFunctionCall","src":"5278:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5304:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5261:16:21"},"nodeType":"YulFunctionCall","src":"5261:51:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5251:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4456:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4467:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4479:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4487:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4495:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4503:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4511:6:21","type":""}],"src":"4325:993:21"},{"body":{"nodeType":"YulBlock","src":"5393:125:21","statements":[{"body":{"nodeType":"YulBlock","src":"5439:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5448:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5451:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5441:6:21"},"nodeType":"YulFunctionCall","src":"5441:12:21"},"nodeType":"YulExpressionStatement","src":"5441:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5414:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5423:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5410:3:21"},"nodeType":"YulFunctionCall","src":"5410:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5435:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5406:3:21"},"nodeType":"YulFunctionCall","src":"5406:32:21"},"nodeType":"YulIf","src":"5403:52:21"},{"nodeType":"YulAssignment","src":"5464:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5493:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5504:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5474:18:21"},"nodeType":"YulFunctionCall","src":"5474:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5464:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5359:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5370:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5382:6:21","type":""}],"src":"5323:195:21"},{"body":{"nodeType":"YulBlock","src":"5660:1069:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5670:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5688:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5697:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5684:3:21"},"nodeType":"YulFunctionCall","src":"5684:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5709:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5680:3:21"},"nodeType":"YulFunctionCall","src":"5680:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5674:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5727:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5736:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5739:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5729:6:21"},"nodeType":"YulFunctionCall","src":"5729:12:21"},"nodeType":"YulExpressionStatement","src":"5729:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"5724:2:21"},"nodeType":"YulIf","src":"5721:22:21"},{"nodeType":"YulVariableDeclaration","src":"5752:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5779:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5766:12:21"},"nodeType":"YulFunctionCall","src":"5766:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5756:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5832:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5841:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5844:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5834:6:21"},"nodeType":"YulFunctionCall","src":"5834:12:21"},"nodeType":"YulExpressionStatement","src":"5834:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5804:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5812:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5801:2:21"},"nodeType":"YulFunctionCall","src":"5801:30:21"},"nodeType":"YulIf","src":"5798:50:21"},{"nodeType":"YulVariableDeclaration","src":"5857:38:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5877:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5888:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5873:3:21"},"nodeType":"YulFunctionCall","src":"5873:22:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5861:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5949:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5958:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5961:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5951:6:21"},"nodeType":"YulFunctionCall","src":"5951:12:21"},"nodeType":"YulExpressionStatement","src":"5951:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5922:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5932:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5918:3:21"},"nodeType":"YulFunctionCall","src":"5918:19:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5939:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5914:3:21"},"nodeType":"YulFunctionCall","src":"5914:33:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5907:6:21"},"nodeType":"YulFunctionCall","src":"5907:41:21"},"nodeType":"YulIf","src":"5904:61:21"},{"nodeType":"YulVariableDeclaration","src":"5974:36:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6001:8:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5988:12:21"},"nodeType":"YulFunctionCall","src":"5988:22:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5978:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6019:75:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6086:6:21"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"6046:39:21"},"nodeType":"YulFunctionCall","src":"6046:47:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6030:15:21"},"nodeType":"YulFunctionCall","src":"6030:64:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6023:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6103:16:21","value":{"name":"dst","nodeType":"YulIdentifier","src":"6116:3:21"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"6107:5:21","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6135:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6140:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6128:6:21"},"nodeType":"YulFunctionCall","src":"6128:19:21"},"nodeType":"YulExpressionStatement","src":"6128:19:21"},{"nodeType":"YulAssignment","src":"6156:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6167:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6172:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6163:3:21"},"nodeType":"YulFunctionCall","src":"6163:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6156:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"6186:54:21","value":{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6208:8:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6222:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"6225:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6218:3:21"},"nodeType":"YulFunctionCall","src":"6218:14:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6204:3:21"},"nodeType":"YulFunctionCall","src":"6204:29:21"},{"kind":"number","nodeType":"YulLiteral","src":"6235:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6200:3:21"},"nodeType":"YulFunctionCall","src":"6200:40:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6190:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6272:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6281:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6284:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6274:6:21"},"nodeType":"YulFunctionCall","src":"6274:12:21"},"nodeType":"YulExpressionStatement","src":"6274:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6255:6:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6263:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6252:2:21"},"nodeType":"YulFunctionCall","src":"6252:19:21"},"nodeType":"YulIf","src":"6249:39:21"},{"nodeType":"YulVariableDeclaration","src":"6297:30:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6312:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"6322:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6308:3:21"},"nodeType":"YulFunctionCall","src":"6308:19:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6301:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6394:103:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6415:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6439:3:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6444:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6420:18:21"},"nodeType":"YulFunctionCall","src":"6420:32:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6408:6:21"},"nodeType":"YulFunctionCall","src":"6408:45:21"},"nodeType":"YulExpressionStatement","src":"6408:45:21"},{"nodeType":"YulAssignment","src":"6466:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6477:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6482:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6473:3:21"},"nodeType":"YulFunctionCall","src":"6473:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6466:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6347:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6352:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6344:2:21"},"nodeType":"YulFunctionCall","src":"6344:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6360:25:21","statements":[{"nodeType":"YulAssignment","src":"6362:21:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6373:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6378:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6369:3:21"},"nodeType":"YulFunctionCall","src":"6369:14:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6362:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"6340:3:21","statements":[]},"src":"6336:161:21"},{"nodeType":"YulAssignment","src":"6506:15:21","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"6516:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6506:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"6530:50:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6563:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6574:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6559:3:21"},"nodeType":"YulFunctionCall","src":"6559:20:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6546:12:21"},"nodeType":"YulFunctionCall","src":"6546:34:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6534:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6625:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6634:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6637:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6627:6:21"},"nodeType":"YulFunctionCall","src":"6627:12:21"},"nodeType":"YulExpressionStatement","src":"6627:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6595:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"6605:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6592:2:21"},"nodeType":"YulFunctionCall","src":"6592:32:21"},"nodeType":"YulIf","src":"6589:52:21"},{"nodeType":"YulAssignment","src":"6650:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6693:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6704:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6689:3:21"},"nodeType":"YulFunctionCall","src":"6689:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6715:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6660:28:21"},"nodeType":"YulFunctionCall","src":"6660:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6650:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5618:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5629:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5641:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5649:6:21","type":""}],"src":"5523:1206:21"},{"body":{"nodeType":"YulBlock","src":"6885:460:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6895:32:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6913:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6924:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6909:3:21"},"nodeType":"YulFunctionCall","src":"6909:18:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6899:6:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6943:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6954:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6936:6:21"},"nodeType":"YulFunctionCall","src":"6936:21:21"},"nodeType":"YulExpressionStatement","src":"6936:21:21"},{"nodeType":"YulVariableDeclaration","src":"6966:17:21","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"6977:6:21"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"6970:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6992:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7012:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7006:5:21"},"nodeType":"YulFunctionCall","src":"7006:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6996:6:21","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7035:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"7043:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7028:6:21"},"nodeType":"YulFunctionCall","src":"7028:22:21"},"nodeType":"YulExpressionStatement","src":"7028:22:21"},{"nodeType":"YulAssignment","src":"7059:25:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7070:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7081:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7066:3:21"},"nodeType":"YulFunctionCall","src":"7066:18:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7059:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"7093:29:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7111:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7119:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7107:3:21"},"nodeType":"YulFunctionCall","src":"7107:15:21"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7097:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7131:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7140:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7135:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7199:120:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7220:3:21"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7231:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7225:5:21"},"nodeType":"YulFunctionCall","src":"7225:13:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7213:6:21"},"nodeType":"YulFunctionCall","src":"7213:26:21"},"nodeType":"YulExpressionStatement","src":"7213:26:21"},{"nodeType":"YulAssignment","src":"7252:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7263:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7268:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7259:3:21"},"nodeType":"YulFunctionCall","src":"7259:12:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7252:3:21"}]},{"nodeType":"YulAssignment","src":"7284:25:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7298:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7306:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7294:3:21"},"nodeType":"YulFunctionCall","src":"7294:15:21"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7284:6:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7161:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"7164:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7158:2:21"},"nodeType":"YulFunctionCall","src":"7158:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7172:18:21","statements":[{"nodeType":"YulAssignment","src":"7174:14:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7183:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"7186:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7179:3:21"},"nodeType":"YulFunctionCall","src":"7179:9:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7174:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"7154:3:21","statements":[]},"src":"7150:169:21"},{"nodeType":"YulAssignment","src":"7328:11:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"7336:3:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7328:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6854:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6865:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6876:4:21","type":""}],"src":"6734:611:21"},{"body":{"nodeType":"YulBlock","src":"7446:328:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7456:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7474:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7483:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7470:3:21"},"nodeType":"YulFunctionCall","src":"7470:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7495:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7466:3:21"},"nodeType":"YulFunctionCall","src":"7466:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7460:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7513:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7522:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7525:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7515:6:21"},"nodeType":"YulFunctionCall","src":"7515:12:21"},"nodeType":"YulExpressionStatement","src":"7515:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"7510:2:21"},"nodeType":"YulIf","src":"7507:22:21"},{"nodeType":"YulAssignment","src":"7538:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7567:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7578:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7548:18:21"},"nodeType":"YulFunctionCall","src":"7548:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7538:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"7595:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7626:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7637:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7622:3:21"},"nodeType":"YulFunctionCall","src":"7622:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7609:12:21"},"nodeType":"YulFunctionCall","src":"7609:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7599:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7684:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7693:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7696:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7686:6:21"},"nodeType":"YulFunctionCall","src":"7686:12:21"},"nodeType":"YulExpressionStatement","src":"7686:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7656:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7664:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7653:2:21"},"nodeType":"YulFunctionCall","src":"7653:30:21"},"nodeType":"YulIf","src":"7650:50:21"},{"nodeType":"YulAssignment","src":"7709:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7740:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7751:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7736:3:21"},"nodeType":"YulFunctionCall","src":"7736:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7760:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7719:16:21"},"nodeType":"YulFunctionCall","src":"7719:49:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7709:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7404:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7415:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7427:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7435:6:21","type":""}],"src":"7350:424:21"},{"body":{"nodeType":"YulBlock","src":"7880:76:21","statements":[{"nodeType":"YulAssignment","src":"7890:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7902:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7913:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7898:3:21"},"nodeType":"YulFunctionCall","src":"7898:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7890:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7932:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"7943:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7925:6:21"},"nodeType":"YulFunctionCall","src":"7925:25:21"},"nodeType":"YulExpressionStatement","src":"7925:25:21"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7849:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7860:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7871:4:21","type":""}],"src":"7779:177:21"},{"body":{"nodeType":"YulBlock","src":"8062:125:21","statements":[{"nodeType":"YulAssignment","src":"8072:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8084:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8095:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8080:3:21"},"nodeType":"YulFunctionCall","src":"8080:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8072:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8114:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8129:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8137:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8125:3:21"},"nodeType":"YulFunctionCall","src":"8125:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8107:6:21"},"nodeType":"YulFunctionCall","src":"8107:74:21"},"nodeType":"YulExpressionStatement","src":"8107:74:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8031:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8042:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8053:4:21","type":""}],"src":"7961:226:21"},{"body":{"nodeType":"YulBlock","src":"8276:293:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8286:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8304:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8313:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8300:3:21"},"nodeType":"YulFunctionCall","src":"8300:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8325:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8296:3:21"},"nodeType":"YulFunctionCall","src":"8296:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8290:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8343:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8352:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8355:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8345:6:21"},"nodeType":"YulFunctionCall","src":"8345:12:21"},"nodeType":"YulExpressionStatement","src":"8345:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"8340:2:21"},"nodeType":"YulIf","src":"8337:22:21"},{"nodeType":"YulAssignment","src":"8368:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8397:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8408:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8378:18:21"},"nodeType":"YulFunctionCall","src":"8378:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8368:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"8425:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8455:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8466:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8451:3:21"},"nodeType":"YulFunctionCall","src":"8451:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8438:12:21"},"nodeType":"YulFunctionCall","src":"8438:32:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8429:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8523:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8532:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8535:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8525:6:21"},"nodeType":"YulFunctionCall","src":"8525:12:21"},"nodeType":"YulExpressionStatement","src":"8525:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8492:5:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8513:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8506:6:21"},"nodeType":"YulFunctionCall","src":"8506:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8499:6:21"},"nodeType":"YulFunctionCall","src":"8499:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8489:2:21"},"nodeType":"YulFunctionCall","src":"8489:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8482:6:21"},"nodeType":"YulFunctionCall","src":"8482:40:21"},"nodeType":"YulIf","src":"8479:60:21"},{"nodeType":"YulAssignment","src":"8548:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"8558:5:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8548:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8234:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8245:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8257:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8265:6:21","type":""}],"src":"8192:377:21"},{"body":{"nodeType":"YulBlock","src":"8654:796:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8664:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8682:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8691:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8678:3:21"},"nodeType":"YulFunctionCall","src":"8678:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8703:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8674:3:21"},"nodeType":"YulFunctionCall","src":"8674:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8668:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8721:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8730:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8733:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8723:6:21"},"nodeType":"YulFunctionCall","src":"8723:12:21"},"nodeType":"YulExpressionStatement","src":"8723:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"8718:2:21"},"nodeType":"YulIf","src":"8715:22:21"},{"nodeType":"YulVariableDeclaration","src":"8746:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8773:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8760:12:21"},"nodeType":"YulFunctionCall","src":"8760:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8750:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8826:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8835:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8838:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8828:6:21"},"nodeType":"YulFunctionCall","src":"8828:12:21"},"nodeType":"YulExpressionStatement","src":"8828:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8798:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8806:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8795:2:21"},"nodeType":"YulFunctionCall","src":"8795:30:21"},"nodeType":"YulIf","src":"8792:50:21"},{"nodeType":"YulVariableDeclaration","src":"8851:38:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8871:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8882:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8867:3:21"},"nodeType":"YulFunctionCall","src":"8867:22:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8855:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8943:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8952:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8955:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8945:6:21"},"nodeType":"YulFunctionCall","src":"8945:12:21"},"nodeType":"YulExpressionStatement","src":"8945:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8916:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"8926:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8912:3:21"},"nodeType":"YulFunctionCall","src":"8912:19:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8933:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8908:3:21"},"nodeType":"YulFunctionCall","src":"8908:33:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8901:6:21"},"nodeType":"YulFunctionCall","src":"8901:41:21"},"nodeType":"YulIf","src":"8898:61:21"},{"nodeType":"YulVariableDeclaration","src":"8968:36:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8995:8:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8982:12:21"},"nodeType":"YulFunctionCall","src":"8982:22:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8972:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9047:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9049:16:21"},"nodeType":"YulFunctionCall","src":"9049:18:21"},"nodeType":"YulExpressionStatement","src":"9049:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9019:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9027:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9016:2:21"},"nodeType":"YulFunctionCall","src":"9016:30:21"},"nodeType":"YulIf","src":"9013:56:21"},{"nodeType":"YulVariableDeclaration","src":"9078:129:21","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9119:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9127:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9115:3:21"},"nodeType":"YulFunctionCall","src":"9115:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"9134:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9111:3:21"},"nodeType":"YulFunctionCall","src":"9111:90:21"},{"kind":"number","nodeType":"YulLiteral","src":"9203:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9107:3:21"},"nodeType":"YulFunctionCall","src":"9107:99:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9091:15:21"},"nodeType":"YulFunctionCall","src":"9091:116:21"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"9082:5:21","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"9223:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"9230:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9216:6:21"},"nodeType":"YulFunctionCall","src":"9216:21:21"},"nodeType":"YulExpressionStatement","src":"9216:21:21"},{"body":{"nodeType":"YulBlock","src":"9293:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9302:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9305:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9295:6:21"},"nodeType":"YulFunctionCall","src":"9295:12:21"},"nodeType":"YulExpressionStatement","src":"9295:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9260:8:21"},{"name":"length","nodeType":"YulIdentifier","src":"9270:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9256:3:21"},"nodeType":"YulFunctionCall","src":"9256:21:21"},{"kind":"number","nodeType":"YulLiteral","src":"9279:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9252:3:21"},"nodeType":"YulFunctionCall","src":"9252:30:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9284:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9249:2:21"},"nodeType":"YulFunctionCall","src":"9249:43:21"},"nodeType":"YulIf","src":"9246:63:21"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"9335:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"9342:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9331:3:21"},"nodeType":"YulFunctionCall","src":"9331:14:21"},{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9351:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"9361:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9347:3:21"},"nodeType":"YulFunctionCall","src":"9347:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"9366:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"9318:12:21"},"nodeType":"YulFunctionCall","src":"9318:55:21"},"nodeType":"YulExpressionStatement","src":"9318:55:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"9397:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"9404:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9393:3:21"},"nodeType":"YulFunctionCall","src":"9393:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9413:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9389:3:21"},"nodeType":"YulFunctionCall","src":"9389:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"9418:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9382:6:21"},"nodeType":"YulFunctionCall","src":"9382:38:21"},"nodeType":"YulExpressionStatement","src":"9382:38:21"},{"nodeType":"YulAssignment","src":"9429:15:21","value":{"name":"array","nodeType":"YulIdentifier","src":"9439:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9429:6:21"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8620:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8631:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8643:6:21","type":""}],"src":"8574:876:21"},{"body":{"nodeType":"YulBlock","src":"9542:191:21","statements":[{"body":{"nodeType":"YulBlock","src":"9588:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9597:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9600:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9590:6:21"},"nodeType":"YulFunctionCall","src":"9590:12:21"},"nodeType":"YulExpressionStatement","src":"9590:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9563:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"9572:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9559:3:21"},"nodeType":"YulFunctionCall","src":"9559:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"9584:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9555:3:21"},"nodeType":"YulFunctionCall","src":"9555:32:21"},"nodeType":"YulIf","src":"9552:52:21"},{"nodeType":"YulAssignment","src":"9613:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9642:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9653:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9623:18:21"},"nodeType":"YulFunctionCall","src":"9623:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9613:6:21"}]},{"nodeType":"YulAssignment","src":"9670:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9703:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9714:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9699:3:21"},"nodeType":"YulFunctionCall","src":"9699:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9719:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9680:18:21"},"nodeType":"YulFunctionCall","src":"9680:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9670:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9500:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9511:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9523:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9531:6:21","type":""}],"src":"9455:278:21"},{"body":{"nodeType":"YulBlock","src":"9885:498:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9895:43:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9913:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"9922:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9909:3:21"},"nodeType":"YulFunctionCall","src":"9909:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"9934:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9905:3:21"},"nodeType":"YulFunctionCall","src":"9905:33:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9899:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9953:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9962:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9965:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9955:6:21"},"nodeType":"YulFunctionCall","src":"9955:12:21"},"nodeType":"YulExpressionStatement","src":"9955:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"9950:2:21"},"nodeType":"YulIf","src":"9947:22:21"},{"nodeType":"YulAssignment","src":"9978:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10007:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10018:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9988:18:21"},"nodeType":"YulFunctionCall","src":"9988:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9978:6:21"}]},{"nodeType":"YulAssignment","src":"10035:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10068:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10079:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10064:3:21"},"nodeType":"YulFunctionCall","src":"10064:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10084:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10045:18:21"},"nodeType":"YulFunctionCall","src":"10045:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10035:6:21"}]},{"nodeType":"YulAssignment","src":"10101:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10128:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10139:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10124:3:21"},"nodeType":"YulFunctionCall","src":"10124:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10111:12:21"},"nodeType":"YulFunctionCall","src":"10111:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10101:6:21"}]},{"nodeType":"YulAssignment","src":"10152:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10179:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10190:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10175:3:21"},"nodeType":"YulFunctionCall","src":"10175:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10162:12:21"},"nodeType":"YulFunctionCall","src":"10162:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10152:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"10203:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10234:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10245:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10230:3:21"},"nodeType":"YulFunctionCall","src":"10230:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10217:12:21"},"nodeType":"YulFunctionCall","src":"10217:33:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10207:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10293:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10302:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10305:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10295:6:21"},"nodeType":"YulFunctionCall","src":"10295:12:21"},"nodeType":"YulExpressionStatement","src":"10295:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10265:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10273:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10262:2:21"},"nodeType":"YulFunctionCall","src":"10262:30:21"},"nodeType":"YulIf","src":"10259:50:21"},{"nodeType":"YulAssignment","src":"10318:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10349:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"10360:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10345:3:21"},"nodeType":"YulFunctionCall","src":"10345:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10369:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"10328:16:21"},"nodeType":"YulFunctionCall","src":"10328:49:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10318:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9819:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9830:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9842:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9850:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9858:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9866:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9874:6:21","type":""}],"src":"9738:645:21"},{"body":{"nodeType":"YulBlock","src":"10493:556:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10503:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10521:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10530:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10517:3:21"},"nodeType":"YulFunctionCall","src":"10517:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"10542:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10513:3:21"},"nodeType":"YulFunctionCall","src":"10513:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10507:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10560:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10569:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10572:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10562:6:21"},"nodeType":"YulFunctionCall","src":"10562:12:21"},"nodeType":"YulExpressionStatement","src":"10562:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"10557:2:21"},"nodeType":"YulIf","src":"10554:22:21"},{"nodeType":"YulVariableDeclaration","src":"10585:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10612:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10599:12:21"},"nodeType":"YulFunctionCall","src":"10599:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10589:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10665:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10674:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10677:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10667:6:21"},"nodeType":"YulFunctionCall","src":"10667:12:21"},"nodeType":"YulExpressionStatement","src":"10667:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10637:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10645:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10634:2:21"},"nodeType":"YulFunctionCall","src":"10634:30:21"},"nodeType":"YulIf","src":"10631:50:21"},{"nodeType":"YulVariableDeclaration","src":"10690:38:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10710:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"10721:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10706:3:21"},"nodeType":"YulFunctionCall","src":"10706:22:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"10694:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10782:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10791:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10794:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10784:6:21"},"nodeType":"YulFunctionCall","src":"10784:12:21"},"nodeType":"YulExpressionStatement","src":"10784:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"10755:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"10765:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10751:3:21"},"nodeType":"YulFunctionCall","src":"10751:19:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10772:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10747:3:21"},"nodeType":"YulFunctionCall","src":"10747:33:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10740:6:21"},"nodeType":"YulFunctionCall","src":"10740:41:21"},"nodeType":"YulIf","src":"10737:61:21"},{"nodeType":"YulVariableDeclaration","src":"10807:36:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"10834:8:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10821:12:21"},"nodeType":"YulFunctionCall","src":"10821:22:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10811:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10886:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10895:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10898:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10888:6:21"},"nodeType":"YulFunctionCall","src":"10888:12:21"},"nodeType":"YulExpressionStatement","src":"10888:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10858:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10866:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10855:2:21"},"nodeType":"YulFunctionCall","src":"10855:30:21"},"nodeType":"YulIf","src":"10852:50:21"},{"body":{"nodeType":"YulBlock","src":"10966:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10975:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10978:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10968:6:21"},"nodeType":"YulFunctionCall","src":"10968:12:21"},"nodeType":"YulExpressionStatement","src":"10968:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"10925:8:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10939:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10942:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10935:3:21"},"nodeType":"YulFunctionCall","src":"10935:14:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10921:3:21"},"nodeType":"YulFunctionCall","src":"10921:29:21"},{"kind":"number","nodeType":"YulLiteral","src":"10952:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10917:3:21"},"nodeType":"YulFunctionCall","src":"10917:38:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10957:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10914:2:21"},"nodeType":"YulFunctionCall","src":"10914:51:21"},"nodeType":"YulIf","src":"10911:71:21"},{"nodeType":"YulAssignment","src":"10991:27:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"11005:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"11015:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11001:3:21"},"nodeType":"YulFunctionCall","src":"11001:17:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10991:6:21"}]},{"nodeType":"YulAssignment","src":"11027:16:21","value":{"name":"length","nodeType":"YulIdentifier","src":"11037:6:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11027:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10451:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10462:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10474:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10482:6:21","type":""}],"src":"10388:661:21"},{"body":{"nodeType":"YulBlock","src":"11228:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11245:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11256:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11238:6:21"},"nodeType":"YulFunctionCall","src":"11238:21:21"},"nodeType":"YulExpressionStatement","src":"11238:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11279:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11290:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11275:3:21"},"nodeType":"YulFunctionCall","src":"11275:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11295:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11268:6:21"},"nodeType":"YulFunctionCall","src":"11268:30:21"},"nodeType":"YulExpressionStatement","src":"11268:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11318:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11329:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11314:3:21"},"nodeType":"YulFunctionCall","src":"11314:18:21"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"11334:34:21","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11307:6:21"},"nodeType":"YulFunctionCall","src":"11307:62:21"},"nodeType":"YulExpressionStatement","src":"11307:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11389:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11400:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11385:3:21"},"nodeType":"YulFunctionCall","src":"11385:18:21"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11405:12:21","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11378:6:21"},"nodeType":"YulFunctionCall","src":"11378:40:21"},"nodeType":"YulExpressionStatement","src":"11378:40:21"},{"nodeType":"YulAssignment","src":"11427:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11439:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11450:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11435:3:21"},"nodeType":"YulFunctionCall","src":"11435:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11427:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11205:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11219:4:21","type":""}],"src":"11054:406:21"},{"body":{"nodeType":"YulBlock","src":"11520:413:21","statements":[{"nodeType":"YulAssignment","src":"11530:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11544:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"11547:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11540:3:21"},"nodeType":"YulFunctionCall","src":"11540:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11530:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"11561:22:21","value":{"name":"length","nodeType":"YulIdentifier","src":"11577:6:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"11565:8:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11592:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"11622:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"11628:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11618:3:21"},"nodeType":"YulFunctionCall","src":"11618:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"11596:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"11669:31:21","statements":[{"nodeType":"YulAssignment","src":"11671:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11685:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"11693:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11681:3:21"},"nodeType":"YulFunctionCall","src":"11681:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11671:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"11649:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11642:6:21"},"nodeType":"YulFunctionCall","src":"11642:26:21"},"nodeType":"YulIf","src":"11639:61:21"},{"body":{"nodeType":"YulBlock","src":"11759:168:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11780:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11783:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11773:6:21"},"nodeType":"YulFunctionCall","src":"11773:88:21"},"nodeType":"YulExpressionStatement","src":"11773:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11881:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11884:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11874:6:21"},"nodeType":"YulFunctionCall","src":"11874:15:21"},"nodeType":"YulExpressionStatement","src":"11874:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11909:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11912:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11902:6:21"},"nodeType":"YulFunctionCall","src":"11902:15:21"},"nodeType":"YulExpressionStatement","src":"11902:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"11715:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11738:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"11746:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11735:2:21"},"nodeType":"YulFunctionCall","src":"11735:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11712:2:21"},"nodeType":"YulFunctionCall","src":"11712:38:21"},"nodeType":"YulIf","src":"11709:218:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"11500:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"11509:6:21","type":""}],"src":"11465:468:21"},{"body":{"nodeType":"YulBlock","src":"12112:178:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12129:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12140:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12122:6:21"},"nodeType":"YulFunctionCall","src":"12122:21:21"},"nodeType":"YulExpressionStatement","src":"12122:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12163:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12174:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12159:3:21"},"nodeType":"YulFunctionCall","src":"12159:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12179:2:21","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12152:6:21"},"nodeType":"YulFunctionCall","src":"12152:30:21"},"nodeType":"YulExpressionStatement","src":"12152:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12202:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12213:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12198:3:21"},"nodeType":"YulFunctionCall","src":"12198:18:21"},{"hexValue":"4859444e5365616c3a20746f6b656e206e6f74206578697374696e67","kind":"string","nodeType":"YulLiteral","src":"12218:30:21","type":"","value":"HYDNSeal: token not existing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12191:6:21"},"nodeType":"YulFunctionCall","src":"12191:58:21"},"nodeType":"YulExpressionStatement","src":"12191:58:21"},{"nodeType":"YulAssignment","src":"12258:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12270:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12281:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12266:3:21"},"nodeType":"YulFunctionCall","src":"12266:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12258:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_3f84c69b1aba6fc99dba484e7c882a2ea70a6ea4d71ee67f03ae77d3d8f6d1e8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12089:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12103:4:21","type":""}],"src":"11938:352:21"},{"body":{"nodeType":"YulBlock","src":"12482:309:21","statements":[{"nodeType":"YulVariableDeclaration","src":"12492:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12512:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12506:5:21"},"nodeType":"YulFunctionCall","src":"12506:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12496:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12567:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"12575:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12563:3:21"},"nodeType":"YulFunctionCall","src":"12563:17:21"},{"name":"pos","nodeType":"YulIdentifier","src":"12582:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"12587:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12528:34:21"},"nodeType":"YulFunctionCall","src":"12528:66:21"},"nodeType":"YulExpressionStatement","src":"12528:66:21"},{"nodeType":"YulVariableDeclaration","src":"12603:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12620:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"12625:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12616:3:21"},"nodeType":"YulFunctionCall","src":"12616:16:21"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"12607:5:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12641:29:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12663:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12657:5:21"},"nodeType":"YulFunctionCall","src":"12657:13:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"12645:8:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12718:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"12726:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12714:3:21"},"nodeType":"YulFunctionCall","src":"12714:17:21"},{"name":"end_1","nodeType":"YulIdentifier","src":"12733:5:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"12740:8:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12679:34:21"},"nodeType":"YulFunctionCall","src":"12679:70:21"},"nodeType":"YulExpressionStatement","src":"12679:70:21"},{"nodeType":"YulAssignment","src":"12758:27:21","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"12769:5:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"12776:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12765:3:21"},"nodeType":"YulFunctionCall","src":"12765:20:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12758:3:21"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12450:3:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12455:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12463:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12474:3:21","type":""}],"src":"12295:496:21"},{"body":{"nodeType":"YulBlock","src":"12828:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12845:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12848:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12838:6:21"},"nodeType":"YulFunctionCall","src":"12838:88:21"},"nodeType":"YulExpressionStatement","src":"12838:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12942:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12945:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12935:6:21"},"nodeType":"YulFunctionCall","src":"12935:15:21"},"nodeType":"YulExpressionStatement","src":"12935:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12966:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12969:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12959:6:21"},"nodeType":"YulFunctionCall","src":"12959:15:21"},"nodeType":"YulExpressionStatement","src":"12959:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"12796:184:21"},{"body":{"nodeType":"YulBlock","src":"13037:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"13156:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13158:16:21"},"nodeType":"YulFunctionCall","src":"13158:18:21"},"nodeType":"YulExpressionStatement","src":"13158:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13068:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13061:6:21"},"nodeType":"YulFunctionCall","src":"13061:9:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13054:6:21"},"nodeType":"YulFunctionCall","src":"13054:17:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"13076:1:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13083:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"13151:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"13079:3:21"},"nodeType":"YulFunctionCall","src":"13079:74:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13073:2:21"},"nodeType":"YulFunctionCall","src":"13073:81:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13050:3:21"},"nodeType":"YulFunctionCall","src":"13050:105:21"},"nodeType":"YulIf","src":"13047:131:21"},{"nodeType":"YulAssignment","src":"13187:20:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13202:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"13205:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"13198:3:21"},"nodeType":"YulFunctionCall","src":"13198:9:21"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"13187:7:21"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13016:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"13019:1:21","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"13025:7:21","type":""}],"src":"12985:228:21"},{"body":{"nodeType":"YulBlock","src":"13267:106:21","statements":[{"nodeType":"YulAssignment","src":"13277:17:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13289:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"13292:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13285:3:21"},"nodeType":"YulFunctionCall","src":"13285:9:21"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"13277:4:21"}]},{"nodeType":"YulVariableDeclaration","src":"13303:18:21","value":{"name":"diff","nodeType":"YulIdentifier","src":"13317:4:21"},"variables":[{"name":"diff_1","nodeType":"YulTypedName","src":"13307:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"13345:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13347:16:21"},"nodeType":"YulFunctionCall","src":"13347:18:21"},"nodeType":"YulExpressionStatement","src":"13347:18:21"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"13336:4:21"},{"name":"x","nodeType":"YulIdentifier","src":"13342:1:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13333:2:21"},"nodeType":"YulFunctionCall","src":"13333:11:21"},"nodeType":"YulIf","src":"13330:37:21"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13249:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"13252:1:21","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"13258:4:21","type":""}],"src":"13218:155:21"},{"body":{"nodeType":"YulBlock","src":"13552:226:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13569:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13580:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13562:6:21"},"nodeType":"YulFunctionCall","src":"13562:21:21"},"nodeType":"YulExpressionStatement","src":"13562:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13603:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13614:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13599:3:21"},"nodeType":"YulFunctionCall","src":"13599:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13619:2:21","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13592:6:21"},"nodeType":"YulFunctionCall","src":"13592:30:21"},"nodeType":"YulExpressionStatement","src":"13592:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13642:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13653:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13638:3:21"},"nodeType":"YulFunctionCall","src":"13638:18:21"},{"hexValue":"4859444e5365616c3a207472616e73666572206261746368206e6f7420616c6c","kind":"string","nodeType":"YulLiteral","src":"13658:34:21","type":"","value":"HYDNSeal: transfer batch not all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13631:6:21"},"nodeType":"YulFunctionCall","src":"13631:62:21"},"nodeType":"YulExpressionStatement","src":"13631:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13713:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13724:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13709:3:21"},"nodeType":"YulFunctionCall","src":"13709:18:21"},{"hexValue":"6f776564","kind":"string","nodeType":"YulLiteral","src":"13729:6:21","type":"","value":"owed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13702:6:21"},"nodeType":"YulFunctionCall","src":"13702:34:21"},"nodeType":"YulExpressionStatement","src":"13702:34:21"},{"nodeType":"YulAssignment","src":"13745:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13757:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13768:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13753:3:21"},"nodeType":"YulFunctionCall","src":"13753:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13745:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_81c3f0ac137a93bc1fd51a97ddb9bc0526804f6e202e9dbd362da1d7654bb15b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13529:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13543:4:21","type":""}],"src":"13378:400:21"},{"body":{"nodeType":"YulBlock","src":"13957:234:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13974:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13985:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13967:6:21"},"nodeType":"YulFunctionCall","src":"13967:21:21"},"nodeType":"YulExpressionStatement","src":"13967:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14008:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14019:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14004:3:21"},"nodeType":"YulFunctionCall","src":"14004:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14024:2:21","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13997:6:21"},"nodeType":"YulFunctionCall","src":"13997:30:21"},"nodeType":"YulExpressionStatement","src":"13997:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14047:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14058:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14043:3:21"},"nodeType":"YulFunctionCall","src":"14043:18:21"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"14063:34:21","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14036:6:21"},"nodeType":"YulFunctionCall","src":"14036:62:21"},"nodeType":"YulExpressionStatement","src":"14036:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14118:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14129:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14114:3:21"},"nodeType":"YulFunctionCall","src":"14114:18:21"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"14134:14:21","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14107:6:21"},"nodeType":"YulFunctionCall","src":"14107:42:21"},"nodeType":"YulExpressionStatement","src":"14107:42:21"},{"nodeType":"YulAssignment","src":"14158:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14170:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14181:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14166:3:21"},"nodeType":"YulFunctionCall","src":"14166:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14158:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13934:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13948:4:21","type":""}],"src":"13783:408:21"},{"body":{"nodeType":"YulBlock","src":"14370:234:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14387:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14398:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14380:6:21"},"nodeType":"YulFunctionCall","src":"14380:21:21"},"nodeType":"YulExpressionStatement","src":"14380:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14421:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14432:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14417:3:21"},"nodeType":"YulFunctionCall","src":"14417:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14437:2:21","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14410:6:21"},"nodeType":"YulFunctionCall","src":"14410:30:21"},"nodeType":"YulExpressionStatement","src":"14410:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14460:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14471:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14456:3:21"},"nodeType":"YulFunctionCall","src":"14456:18:21"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"14476:34:21","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14449:6:21"},"nodeType":"YulFunctionCall","src":"14449:62:21"},"nodeType":"YulExpressionStatement","src":"14449:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14531:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14542:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14527:3:21"},"nodeType":"YulFunctionCall","src":"14527:18:21"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"14547:14:21","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14520:6:21"},"nodeType":"YulFunctionCall","src":"14520:42:21"},"nodeType":"YulExpressionStatement","src":"14520:42:21"},{"nodeType":"YulAssignment","src":"14571:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14583:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14594:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14579:3:21"},"nodeType":"YulFunctionCall","src":"14579:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14571:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14347:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14361:4:21","type":""}],"src":"14196:408:21"},{"body":{"nodeType":"YulBlock","src":"14783:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14800:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14811:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14793:6:21"},"nodeType":"YulFunctionCall","src":"14793:21:21"},"nodeType":"YulExpressionStatement","src":"14793:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14834:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14845:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14830:3:21"},"nodeType":"YulFunctionCall","src":"14830:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14850:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14823:6:21"},"nodeType":"YulFunctionCall","src":"14823:30:21"},"nodeType":"YulExpressionStatement","src":"14823:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14873:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14884:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14869:3:21"},"nodeType":"YulFunctionCall","src":"14869:18:21"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"14889:34:21","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14862:6:21"},"nodeType":"YulFunctionCall","src":"14862:62:21"},"nodeType":"YulExpressionStatement","src":"14862:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14944:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14955:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14940:3:21"},"nodeType":"YulFunctionCall","src":"14940:18:21"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"14960:11:21","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14933:6:21"},"nodeType":"YulFunctionCall","src":"14933:39:21"},"nodeType":"YulExpressionStatement","src":"14933:39:21"},{"nodeType":"YulAssignment","src":"14981:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14993:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15004:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14989:3:21"},"nodeType":"YulFunctionCall","src":"14989:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14981:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14760:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14774:4:21","type":""}],"src":"14609:405:21"},{"body":{"nodeType":"YulBlock","src":"15051:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15068:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15071:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15061:6:21"},"nodeType":"YulFunctionCall","src":"15061:88:21"},"nodeType":"YulExpressionStatement","src":"15061:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15165:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15168:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15158:6:21"},"nodeType":"YulFunctionCall","src":"15158:15:21"},"nodeType":"YulExpressionStatement","src":"15158:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15189:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15192:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15182:6:21"},"nodeType":"YulFunctionCall","src":"15182:15:21"},"nodeType":"YulExpressionStatement","src":"15182:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"15019:184:21"},{"body":{"nodeType":"YulBlock","src":"15255:148:21","statements":[{"body":{"nodeType":"YulBlock","src":"15346:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15348:16:21"},"nodeType":"YulFunctionCall","src":"15348:18:21"},"nodeType":"YulExpressionStatement","src":"15348:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15271:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"15278:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15268:2:21"},"nodeType":"YulFunctionCall","src":"15268:77:21"},"nodeType":"YulIf","src":"15265:103:21"},{"nodeType":"YulAssignment","src":"15377:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15388:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"15395:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15384:3:21"},"nodeType":"YulFunctionCall","src":"15384:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15377:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15237:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15247:3:21","type":""}],"src":"15208:195:21"},{"body":{"nodeType":"YulBlock","src":"15582:246:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15599:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15610:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15592:6:21"},"nodeType":"YulFunctionCall","src":"15592:21:21"},"nodeType":"YulExpressionStatement","src":"15592:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15633:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15644:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15629:3:21"},"nodeType":"YulFunctionCall","src":"15629:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15649:2:21","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15622:6:21"},"nodeType":"YulFunctionCall","src":"15622:30:21"},"nodeType":"YulExpressionStatement","src":"15622:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15672:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15683:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15668:3:21"},"nodeType":"YulFunctionCall","src":"15668:18:21"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"15688:34:21","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15661:6:21"},"nodeType":"YulFunctionCall","src":"15661:62:21"},"nodeType":"YulExpressionStatement","src":"15661:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15743:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15754:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15739:3:21"},"nodeType":"YulFunctionCall","src":"15739:18:21"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"15759:26:21","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15732:6:21"},"nodeType":"YulFunctionCall","src":"15732:54:21"},"nodeType":"YulExpressionStatement","src":"15732:54:21"},{"nodeType":"YulAssignment","src":"15795:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15807:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15818:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15803:3:21"},"nodeType":"YulFunctionCall","src":"15803:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15795:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15559:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15573:4:21","type":""}],"src":"15408:420:21"},{"body":{"nodeType":"YulBlock","src":"16007:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16024:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16035:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16017:6:21"},"nodeType":"YulFunctionCall","src":"16017:21:21"},"nodeType":"YulExpressionStatement","src":"16017:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16058:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16069:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16054:3:21"},"nodeType":"YulFunctionCall","src":"16054:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16074:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16047:6:21"},"nodeType":"YulFunctionCall","src":"16047:30:21"},"nodeType":"YulExpressionStatement","src":"16047:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16097:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16108:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16093:3:21"},"nodeType":"YulFunctionCall","src":"16093:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"16113:34:21","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16086:6:21"},"nodeType":"YulFunctionCall","src":"16086:62:21"},"nodeType":"YulExpressionStatement","src":"16086:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16168:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16179:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16164:3:21"},"nodeType":"YulFunctionCall","src":"16164:18:21"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"16184:16:21","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16157:6:21"},"nodeType":"YulFunctionCall","src":"16157:44:21"},"nodeType":"YulExpressionStatement","src":"16157:44:21"},{"nodeType":"YulAssignment","src":"16210:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16222:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16233:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16218:3:21"},"nodeType":"YulFunctionCall","src":"16218:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16210:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15984:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15998:4:21","type":""}],"src":"15833:410:21"},{"body":{"nodeType":"YulBlock","src":"16345:87:21","statements":[{"nodeType":"YulAssignment","src":"16355:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16367:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16378:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16363:3:21"},"nodeType":"YulFunctionCall","src":"16363:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16355:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16397:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16412:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16420:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16408:3:21"},"nodeType":"YulFunctionCall","src":"16408:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16390:6:21"},"nodeType":"YulFunctionCall","src":"16390:36:21"},"nodeType":"YulExpressionStatement","src":"16390:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16314:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16325:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16336:4:21","type":""}],"src":"16248:184:21"},{"body":{"nodeType":"YulBlock","src":"16611:180:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16628:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16639:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16621:6:21"},"nodeType":"YulFunctionCall","src":"16621:21:21"},"nodeType":"YulExpressionStatement","src":"16621:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16662:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16673:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16658:3:21"},"nodeType":"YulFunctionCall","src":"16658:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16678:2:21","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16651:6:21"},"nodeType":"YulFunctionCall","src":"16651:30:21"},"nodeType":"YulExpressionStatement","src":"16651:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16701:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16712:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16697:3:21"},"nodeType":"YulFunctionCall","src":"16697:18:21"},{"hexValue":"4859444e5365616c3a207472616e73666572206e6f7420616c6c6f776564","kind":"string","nodeType":"YulLiteral","src":"16717:32:21","type":"","value":"HYDNSeal: transfer not allowed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16690:6:21"},"nodeType":"YulFunctionCall","src":"16690:60:21"},"nodeType":"YulExpressionStatement","src":"16690:60:21"},{"nodeType":"YulAssignment","src":"16759:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16771:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16782:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16767:3:21"},"nodeType":"YulFunctionCall","src":"16767:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16759:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_ffcd27d0545ae5d83e35f36d8b146e4c7d852c0e8c6bd9849c6f1c6d69b8640e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16588:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16602:4:21","type":""}],"src":"16437:354:21"},{"body":{"nodeType":"YulBlock","src":"16970:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16987:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16998:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16980:6:21"},"nodeType":"YulFunctionCall","src":"16980:21:21"},"nodeType":"YulExpressionStatement","src":"16980:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17021:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17032:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17017:3:21"},"nodeType":"YulFunctionCall","src":"17017:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"17037:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17010:6:21"},"nodeType":"YulFunctionCall","src":"17010:30:21"},"nodeType":"YulExpressionStatement","src":"17010:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17060:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17071:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17056:3:21"},"nodeType":"YulFunctionCall","src":"17056:18:21"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"17076:34:21","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17049:6:21"},"nodeType":"YulFunctionCall","src":"17049:62:21"},"nodeType":"YulExpressionStatement","src":"17049:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17131:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17142:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17127:3:21"},"nodeType":"YulFunctionCall","src":"17127:18:21"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"17147:8:21","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17120:6:21"},"nodeType":"YulFunctionCall","src":"17120:36:21"},"nodeType":"YulExpressionStatement","src":"17120:36:21"},{"nodeType":"YulAssignment","src":"17165:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17177:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17188:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17173:3:21"},"nodeType":"YulFunctionCall","src":"17173:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17165:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16947:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16961:4:21","type":""}],"src":"16796:402:21"},{"body":{"nodeType":"YulBlock","src":"17259:65:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17276:1:21","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"17279:3:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17269:6:21"},"nodeType":"YulFunctionCall","src":"17269:14:21"},"nodeType":"YulExpressionStatement","src":"17269:14:21"},{"nodeType":"YulAssignment","src":"17292:26:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17310:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17313:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17300:9:21"},"nodeType":"YulFunctionCall","src":"17300:18:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"17292:4:21"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"17242:3:21","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"17250:4:21","type":""}],"src":"17203:121:21"},{"body":{"nodeType":"YulBlock","src":"17410:439:21","statements":[{"body":{"nodeType":"YulBlock","src":"17443:400:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17464:1:21","type":"","value":"0"},{"name":"array","nodeType":"YulIdentifier","src":"17467:5:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17457:6:21"},"nodeType":"YulFunctionCall","src":"17457:16:21"},"nodeType":"YulExpressionStatement","src":"17457:16:21"},{"nodeType":"YulVariableDeclaration","src":"17486:30:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17508:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17511:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17498:9:21"},"nodeType":"YulFunctionCall","src":"17498:18:21"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"17490:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17529:57:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17552:4:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17562:1:21","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"17569:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"17581:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17565:3:21"},"nodeType":"YulFunctionCall","src":"17565:19:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17558:3:21"},"nodeType":"YulFunctionCall","src":"17558:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17548:3:21"},"nodeType":"YulFunctionCall","src":"17548:38:21"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"17533:11:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"17623:23:21","statements":[{"nodeType":"YulAssignment","src":"17625:19:21","value":{"name":"data","nodeType":"YulIdentifier","src":"17640:4:21"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"17625:11:21"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"17605:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"17617:4:21","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17602:2:21"},"nodeType":"YulFunctionCall","src":"17602:20:21"},"nodeType":"YulIf","src":"17599:47:21"},{"nodeType":"YulVariableDeclaration","src":"17659:24:21","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"17672:11:21"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"17663:5:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17696:42:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17711:4:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17721:1:21","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17728:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17733:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17724:3:21"},"nodeType":"YulFunctionCall","src":"17724:12:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17717:3:21"},"nodeType":"YulFunctionCall","src":"17717:20:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17707:3:21"},"nodeType":"YulFunctionCall","src":"17707:31:21"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"17700:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"17813:20:21","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17822:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"17829:1:21","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17815:6:21"},"nodeType":"YulFunctionCall","src":"17815:16:21"},"nodeType":"YulExpressionStatement","src":"17815:16:21"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17762:5:21"},{"name":"end","nodeType":"YulIdentifier","src":"17769:3:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17759:2:21"},"nodeType":"YulFunctionCall","src":"17759:14:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17774:26:21","statements":[{"nodeType":"YulAssignment","src":"17776:22:21","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17789:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"17796:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17785:3:21"},"nodeType":"YulFunctionCall","src":"17785:13:21"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"17776:5:21"}]}]},"pre":{"nodeType":"YulBlock","src":"17755:3:21","statements":[]},"src":"17751:82:21"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17426:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17431:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17423:2:21"},"nodeType":"YulFunctionCall","src":"17423:11:21"},"nodeType":"YulIf","src":"17420:423:21"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"17382:5:21","type":""},{"name":"len","nodeType":"YulTypedName","src":"17389:3:21","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"17394:10:21","type":""}],"src":"17329:520:21"},{"body":{"nodeType":"YulBlock","src":"17950:1421:21","statements":[{"nodeType":"YulVariableDeclaration","src":"17960:24:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17980:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17974:5:21"},"nodeType":"YulFunctionCall","src":"17974:10:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17964:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17993:40:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18006:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"18014:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18003:2:21"},"nodeType":"YulFunctionCall","src":"18003:30:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17997:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"18048:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"18050:16:21"},"nodeType":"YulFunctionCall","src":"18050:18:21"},"nodeType":"YulExpressionStatement","src":"18050:18:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"18045:2:21"},"nodeType":"YulIf","src":"18042:28:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18123:4:21"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18161:4:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18155:5:21"},"nodeType":"YulFunctionCall","src":"18155:11:21"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"18129:25:21"},"nodeType":"YulFunctionCall","src":"18129:38:21"},{"name":"length","nodeType":"YulIdentifier","src":"18169:6:21"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"18079:43:21"},"nodeType":"YulFunctionCall","src":"18079:97:21"},"nodeType":"YulExpressionStatement","src":"18079:97:21"},{"nodeType":"YulVariableDeclaration","src":"18185:18:21","value":{"kind":"number","nodeType":"YulLiteral","src":"18202:1:21","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"18189:9:21","type":""}]},{"nodeType":"YulAssignment","src":"18212:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"18225:4:21","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18212:9:21"}]},{"nodeType":"YulVariableDeclaration","src":"18238:24:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18251:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"18259:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18248:2:21"},"nodeType":"YulFunctionCall","src":"18248:14:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"18242:2:21","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"18296:761:21","statements":[{"nodeType":"YulVariableDeclaration","src":"18310:94:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18329:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"18337:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18325:3:21"},"nodeType":"YulFunctionCall","src":"18325:79:21"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"18314:7:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18417:49:21","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18461:4:21"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"18431:29:21"},"nodeType":"YulFunctionCall","src":"18431:35:21"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"18421:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18479:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"18488:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"18483:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"18559:165:21","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18584:6:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18602:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18607:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18598:3:21"},"nodeType":"YulFunctionCall","src":"18598:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18592:5:21"},"nodeType":"YulFunctionCall","src":"18592:26:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18577:6:21"},"nodeType":"YulFunctionCall","src":"18577:42:21"},"nodeType":"YulExpressionStatement","src":"18577:42:21"},{"nodeType":"YulAssignment","src":"18636:24:21","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18650:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"18658:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18646:3:21"},"nodeType":"YulFunctionCall","src":"18646:14:21"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18636:6:21"}]},{"nodeType":"YulAssignment","src":"18677:33:21","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18694:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18705:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18690:3:21"},"nodeType":"YulFunctionCall","src":"18690:20:21"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18677:9:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18513:1:21"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"18516:7:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18510:2:21"},"nodeType":"YulFunctionCall","src":"18510:14:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18525:21:21","statements":[{"nodeType":"YulAssignment","src":"18527:17:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18536:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"18539:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18532:3:21"},"nodeType":"YulFunctionCall","src":"18532:12:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"18527:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"18506:3:21","statements":[]},"src":"18502:222:21"},{"body":{"nodeType":"YulBlock","src":"18772:226:21","statements":[{"nodeType":"YulVariableDeclaration","src":"18790:43:21","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18817:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18822:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18813:3:21"},"nodeType":"YulFunctionCall","src":"18813:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18807:5:21"},"nodeType":"YulFunctionCall","src":"18807:26:21"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"18794:9:21","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18857:6:21"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"18869:9:21"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18896:1:21","type":"","value":"3"},{"name":"length","nodeType":"YulIdentifier","src":"18899:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18892:3:21"},"nodeType":"YulFunctionCall","src":"18892:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"18908:3:21","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18888:3:21"},"nodeType":"YulFunctionCall","src":"18888:24:21"},{"kind":"number","nodeType":"YulLiteral","src":"18914:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"18884:3:21"},"nodeType":"YulFunctionCall","src":"18884:97:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18880:3:21"},"nodeType":"YulFunctionCall","src":"18880:102:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18865:3:21"},"nodeType":"YulFunctionCall","src":"18865:118:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18850:6:21"},"nodeType":"YulFunctionCall","src":"18850:134:21"},"nodeType":"YulExpressionStatement","src":"18850:134:21"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"18743:7:21"},{"name":"length","nodeType":"YulIdentifier","src":"18752:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18740:2:21"},"nodeType":"YulFunctionCall","src":"18740:19:21"},"nodeType":"YulIf","src":"18737:261:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"19018:4:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19032:1:21","type":"","value":"1"},{"name":"length","nodeType":"YulIdentifier","src":"19035:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19028:3:21"},"nodeType":"YulFunctionCall","src":"19028:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"19044:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19024:3:21"},"nodeType":"YulFunctionCall","src":"19024:22:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19011:6:21"},"nodeType":"YulFunctionCall","src":"19011:36:21"},"nodeType":"YulExpressionStatement","src":"19011:36:21"}]},"nodeType":"YulCase","src":"18289:768:21","value":{"kind":"number","nodeType":"YulLiteral","src":"18294:1:21","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"19074:291:21","statements":[{"nodeType":"YulVariableDeclaration","src":"19088:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"19101:1:21","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"19092:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"19137:67:21","statements":[{"nodeType":"YulAssignment","src":"19155:35:21","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19174:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"19179:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19170:3:21"},"nodeType":"YulFunctionCall","src":"19170:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19164:5:21"},"nodeType":"YulFunctionCall","src":"19164:26:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19155:5:21"}]}]},"condition":{"name":"length","nodeType":"YulIdentifier","src":"19118:6:21"},"nodeType":"YulIf","src":"19115:89:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"19224:4:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19237:5:21"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19256:1:21","type":"","value":"3"},{"name":"length","nodeType":"YulIdentifier","src":"19259:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19252:3:21"},"nodeType":"YulFunctionCall","src":"19252:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"19268:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"19248:3:21"},"nodeType":"YulFunctionCall","src":"19248:87:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19244:3:21"},"nodeType":"YulFunctionCall","src":"19244:92:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19233:3:21"},"nodeType":"YulFunctionCall","src":"19233:104:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19343:1:21","type":"","value":"1"},{"name":"length","nodeType":"YulIdentifier","src":"19346:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19339:3:21"},"nodeType":"YulFunctionCall","src":"19339:14:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19230:2:21"},"nodeType":"YulFunctionCall","src":"19230:124:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19217:6:21"},"nodeType":"YulFunctionCall","src":"19217:138:21"},"nodeType":"YulExpressionStatement","src":"19217:138:21"}]},"nodeType":"YulCase","src":"19066:299:21","value":"default"}],"expression":{"name":"_2","nodeType":"YulIdentifier","src":"18278:2:21"},"nodeType":"YulSwitch","src":"18271:1094:21"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"17935:4:21","type":""},{"name":"src","nodeType":"YulTypedName","src":"17941:3:21","type":""}],"src":"17854:1517:21"},{"body":{"nodeType":"YulBlock","src":"19483:87:21","statements":[{"nodeType":"YulAssignment","src":"19493:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19505:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19516:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19501:3:21"},"nodeType":"YulFunctionCall","src":"19501:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19493:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19535:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19550:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"19558:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19546:3:21"},"nodeType":"YulFunctionCall","src":"19546:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19528:6:21"},"nodeType":"YulFunctionCall","src":"19528:36:21"},"nodeType":"YulExpressionStatement","src":"19528:36:21"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19452:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19463:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19474:4:21","type":""}],"src":"19376:194:21"},{"body":{"nodeType":"YulBlock","src":"19623:102:21","statements":[{"nodeType":"YulAssignment","src":"19633:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19644:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"19647:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19640:3:21"},"nodeType":"YulFunctionCall","src":"19640:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"19633:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"19658:16:21","value":{"name":"sum","nodeType":"YulIdentifier","src":"19671:3:21"},"variables":[{"name":"sum_1","nodeType":"YulTypedName","src":"19662:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"19697:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19699:16:21"},"nodeType":"YulFunctionCall","src":"19699:18:21"},"nodeType":"YulExpressionStatement","src":"19699:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19689:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"19692:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19686:2:21"},"nodeType":"YulFunctionCall","src":"19686:10:21"},"nodeType":"YulIf","src":"19683:36:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19606:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"19609:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"19615:3:21","type":""}],"src":"19575:150:21"},{"body":{"nodeType":"YulBlock","src":"19904:226:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19921:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19932:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19914:6:21"},"nodeType":"YulFunctionCall","src":"19914:21:21"},"nodeType":"YulExpressionStatement","src":"19914:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19955:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19966:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19951:3:21"},"nodeType":"YulFunctionCall","src":"19951:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"19971:2:21","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19944:6:21"},"nodeType":"YulFunctionCall","src":"19944:30:21"},"nodeType":"YulExpressionStatement","src":"19944:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19994:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20005:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19990:3:21"},"nodeType":"YulFunctionCall","src":"19990:18:21"},{"hexValue":"4859444e5365616c3a207265636569766572206973206e6f74206120636f6e74","kind":"string","nodeType":"YulLiteral","src":"20010:34:21","type":"","value":"HYDNSeal: receiver is not a cont"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19983:6:21"},"nodeType":"YulFunctionCall","src":"19983:62:21"},"nodeType":"YulExpressionStatement","src":"19983:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20065:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20076:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20061:3:21"},"nodeType":"YulFunctionCall","src":"20061:18:21"},{"hexValue":"72616374","kind":"string","nodeType":"YulLiteral","src":"20081:6:21","type":"","value":"ract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20054:6:21"},"nodeType":"YulFunctionCall","src":"20054:34:21"},"nodeType":"YulExpressionStatement","src":"20054:34:21"},{"nodeType":"YulAssignment","src":"20097:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20109:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20120:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20105:3:21"},"nodeType":"YulFunctionCall","src":"20105:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20097:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_5c7954140cefba85008d6ba5fe42bda7421a9d6afee2f24ef8454b4191859c7c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19881:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19895:4:21","type":""}],"src":"19730:400:21"},{"body":{"nodeType":"YulBlock","src":"20167:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20184:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20187:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20177:6:21"},"nodeType":"YulFunctionCall","src":"20177:88:21"},"nodeType":"YulExpressionStatement","src":"20177:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20281:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20284:4:21","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20274:6:21"},"nodeType":"YulFunctionCall","src":"20274:15:21"},"nodeType":"YulExpressionStatement","src":"20274:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20305:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20308:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20298:6:21"},"nodeType":"YulFunctionCall","src":"20298:15:21"},"nodeType":"YulExpressionStatement","src":"20298:15:21"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"20135:184:21"},{"body":{"nodeType":"YulBlock","src":"20370:74:21","statements":[{"body":{"nodeType":"YulBlock","src":"20393:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"20395:16:21"},"nodeType":"YulFunctionCall","src":"20395:18:21"},"nodeType":"YulExpressionStatement","src":"20395:18:21"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"20390:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20383:6:21"},"nodeType":"YulFunctionCall","src":"20383:9:21"},"nodeType":"YulIf","src":"20380:35:21"},{"nodeType":"YulAssignment","src":"20424:14:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20433:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"20436:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"20429:3:21"},"nodeType":"YulFunctionCall","src":"20429:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"20424:1:21"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"20355:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"20358:1:21","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"20364:1:21","type":""}],"src":"20324:120:21"},{"body":{"nodeType":"YulBlock","src":"20487:74:21","statements":[{"body":{"nodeType":"YulBlock","src":"20510:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"20512:16:21"},"nodeType":"YulFunctionCall","src":"20512:18:21"},"nodeType":"YulExpressionStatement","src":"20512:18:21"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"20507:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20500:6:21"},"nodeType":"YulFunctionCall","src":"20500:9:21"},"nodeType":"YulIf","src":"20497:35:21"},{"nodeType":"YulAssignment","src":"20541:14:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20550:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"20553:1:21"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"20546:3:21"},"nodeType":"YulFunctionCall","src":"20546:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"20541:1:21"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"20472:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"20475:1:21","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"20481:1:21","type":""}],"src":"20449:112:21"},{"body":{"nodeType":"YulBlock","src":"20647:103:21","statements":[{"body":{"nodeType":"YulBlock","src":"20693:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20702:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20705:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20695:6:21"},"nodeType":"YulFunctionCall","src":"20695:12:21"},"nodeType":"YulExpressionStatement","src":"20695:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20668:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"20677:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20664:3:21"},"nodeType":"YulFunctionCall","src":"20664:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"20689:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20660:3:21"},"nodeType":"YulFunctionCall","src":"20660:32:21"},"nodeType":"YulIf","src":"20657:52:21"},{"nodeType":"YulAssignment","src":"20718:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20734:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20728:5:21"},"nodeType":"YulFunctionCall","src":"20728:16:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20718:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20613:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20624:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20636:6:21","type":""}],"src":"20566:184:21"},{"body":{"nodeType":"YulBlock","src":"20929:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20946:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20957:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20939:6:21"},"nodeType":"YulFunctionCall","src":"20939:21:21"},"nodeType":"YulExpressionStatement","src":"20939:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20980:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20991:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20976:3:21"},"nodeType":"YulFunctionCall","src":"20976:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"20996:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20969:6:21"},"nodeType":"YulFunctionCall","src":"20969:30:21"},"nodeType":"YulExpressionStatement","src":"20969:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21019:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21030:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21015:3:21"},"nodeType":"YulFunctionCall","src":"21015:18:21"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"21035:34:21","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21008:6:21"},"nodeType":"YulFunctionCall","src":"21008:62:21"},"nodeType":"YulExpressionStatement","src":"21008:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21090:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21101:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21086:3:21"},"nodeType":"YulFunctionCall","src":"21086:18:21"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"21106:16:21","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21079:6:21"},"nodeType":"YulFunctionCall","src":"21079:44:21"},"nodeType":"YulExpressionStatement","src":"21079:44:21"},{"nodeType":"YulAssignment","src":"21132:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21144:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21155:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21140:3:21"},"nodeType":"YulFunctionCall","src":"21140:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21132:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20906:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20920:4:21","type":""}],"src":"20755:410:21"},{"body":{"nodeType":"YulBlock","src":"21344:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21361:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21372:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21354:6:21"},"nodeType":"YulFunctionCall","src":"21354:21:21"},"nodeType":"YulExpressionStatement","src":"21354:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21395:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21406:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21391:3:21"},"nodeType":"YulFunctionCall","src":"21391:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"21411:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21384:6:21"},"nodeType":"YulFunctionCall","src":"21384:30:21"},"nodeType":"YulExpressionStatement","src":"21384:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21434:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21445:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21430:3:21"},"nodeType":"YulFunctionCall","src":"21430:18:21"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"21450:34:21","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21423:6:21"},"nodeType":"YulFunctionCall","src":"21423:62:21"},"nodeType":"YulExpressionStatement","src":"21423:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21505:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21516:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21501:3:21"},"nodeType":"YulFunctionCall","src":"21501:18:21"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"21521:11:21","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21494:6:21"},"nodeType":"YulFunctionCall","src":"21494:39:21"},"nodeType":"YulExpressionStatement","src":"21494:39:21"},{"nodeType":"YulAssignment","src":"21542:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21554:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21565:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21550:3:21"},"nodeType":"YulFunctionCall","src":"21550:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21542:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21321:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21335:4:21","type":""}],"src":"21170:405:21"},{"body":{"nodeType":"YulBlock","src":"21754:182:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21771:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21782:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21764:6:21"},"nodeType":"YulFunctionCall","src":"21764:21:21"},"nodeType":"YulExpressionStatement","src":"21764:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21805:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21816:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21801:3:21"},"nodeType":"YulFunctionCall","src":"21801:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"21821:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21794:6:21"},"nodeType":"YulFunctionCall","src":"21794:30:21"},"nodeType":"YulExpressionStatement","src":"21794:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21844:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21855:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21840:3:21"},"nodeType":"YulFunctionCall","src":"21840:18:21"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"21860:34:21","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21833:6:21"},"nodeType":"YulFunctionCall","src":"21833:62:21"},"nodeType":"YulExpressionStatement","src":"21833:62:21"},{"nodeType":"YulAssignment","src":"21904:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21916:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21927:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21912:3:21"},"nodeType":"YulFunctionCall","src":"21912:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21904:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21731:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21745:4:21","type":""}],"src":"21580:356:21"},{"body":{"nodeType":"YulBlock","src":"22115:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22132:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22143:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22125:6:21"},"nodeType":"YulFunctionCall","src":"22125:21:21"},"nodeType":"YulExpressionStatement","src":"22125:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22166:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22177:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22162:3:21"},"nodeType":"YulFunctionCall","src":"22162:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"22182:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22155:6:21"},"nodeType":"YulFunctionCall","src":"22155:30:21"},"nodeType":"YulExpressionStatement","src":"22155:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22205:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22216:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22201:3:21"},"nodeType":"YulFunctionCall","src":"22201:18:21"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"22221:34:21","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22194:6:21"},"nodeType":"YulFunctionCall","src":"22194:62:21"},"nodeType":"YulExpressionStatement","src":"22194:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22276:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22287:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22272:3:21"},"nodeType":"YulFunctionCall","src":"22272:18:21"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"22292:11:21","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22265:6:21"},"nodeType":"YulFunctionCall","src":"22265:39:21"},"nodeType":"YulExpressionStatement","src":"22265:39:21"},{"nodeType":"YulAssignment","src":"22313:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22325:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22336:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22321:3:21"},"nodeType":"YulFunctionCall","src":"22321:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22313:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22092:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22106:4:21","type":""}],"src":"21941:405:21"},{"body":{"nodeType":"YulBlock","src":"22525:233:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22542:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22553:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22535:6:21"},"nodeType":"YulFunctionCall","src":"22535:21:21"},"nodeType":"YulExpressionStatement","src":"22535:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22576:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22587:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22572:3:21"},"nodeType":"YulFunctionCall","src":"22572:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"22592:2:21","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22565:6:21"},"nodeType":"YulFunctionCall","src":"22565:30:21"},"nodeType":"YulExpressionStatement","src":"22565:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22615:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22626:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22611:3:21"},"nodeType":"YulFunctionCall","src":"22611:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"22631:34:21","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22604:6:21"},"nodeType":"YulFunctionCall","src":"22604:62:21"},"nodeType":"YulExpressionStatement","src":"22604:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22686:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22697:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22682:3:21"},"nodeType":"YulFunctionCall","src":"22682:18:21"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"22702:13:21","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22675:6:21"},"nodeType":"YulFunctionCall","src":"22675:41:21"},"nodeType":"YulExpressionStatement","src":"22675:41:21"},{"nodeType":"YulAssignment","src":"22725:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22737:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22748:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22733:3:21"},"nodeType":"YulFunctionCall","src":"22733:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22725:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22502:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22516:4:21","type":""}],"src":"22351:407:21"},{"body":{"nodeType":"YulBlock","src":"22937:223:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22954:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22965:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22947:6:21"},"nodeType":"YulFunctionCall","src":"22947:21:21"},"nodeType":"YulExpressionStatement","src":"22947:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22988:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22999:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22984:3:21"},"nodeType":"YulFunctionCall","src":"22984:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"23004:2:21","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22977:6:21"},"nodeType":"YulFunctionCall","src":"22977:30:21"},"nodeType":"YulExpressionStatement","src":"22977:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23027:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23038:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23023:3:21"},"nodeType":"YulFunctionCall","src":"23023:18:21"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"23043:34:21","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23016:6:21"},"nodeType":"YulFunctionCall","src":"23016:62:21"},"nodeType":"YulExpressionStatement","src":"23016:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23098:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23109:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23094:3:21"},"nodeType":"YulFunctionCall","src":"23094:18:21"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"23114:3:21","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23087:6:21"},"nodeType":"YulFunctionCall","src":"23087:31:21"},"nodeType":"YulExpressionStatement","src":"23087:31:21"},{"nodeType":"YulAssignment","src":"23127:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23139:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23150:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23135:3:21"},"nodeType":"YulFunctionCall","src":"23135:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23127:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22914:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22928:4:21","type":""}],"src":"22763:397:21"},{"body":{"nodeType":"YulBlock","src":"23294:119:21","statements":[{"nodeType":"YulAssignment","src":"23304:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23316:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23327:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23312:3:21"},"nodeType":"YulFunctionCall","src":"23312:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23304:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23346:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"23357:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23339:6:21"},"nodeType":"YulFunctionCall","src":"23339:25:21"},"nodeType":"YulExpressionStatement","src":"23339:25:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23384:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23395:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23380:3:21"},"nodeType":"YulFunctionCall","src":"23380:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"23400:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23373:6:21"},"nodeType":"YulFunctionCall","src":"23373:34:21"},"nodeType":"YulExpressionStatement","src":"23373:34:21"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23255:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23266:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23274:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23285:4:21","type":""}],"src":"23165:248:21"},{"body":{"nodeType":"YulBlock","src":"23592:235:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23609:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23620:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23602:6:21"},"nodeType":"YulFunctionCall","src":"23602:21:21"},"nodeType":"YulExpressionStatement","src":"23602:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23643:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23654:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23639:3:21"},"nodeType":"YulFunctionCall","src":"23639:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"23659:2:21","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23632:6:21"},"nodeType":"YulFunctionCall","src":"23632:30:21"},"nodeType":"YulExpressionStatement","src":"23632:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23682:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23693:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23678:3:21"},"nodeType":"YulFunctionCall","src":"23678:18:21"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"23698:34:21","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23671:6:21"},"nodeType":"YulFunctionCall","src":"23671:62:21"},"nodeType":"YulExpressionStatement","src":"23671:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23753:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23764:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23749:3:21"},"nodeType":"YulFunctionCall","src":"23749:18:21"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"23769:15:21","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23742:6:21"},"nodeType":"YulFunctionCall","src":"23742:43:21"},"nodeType":"YulExpressionStatement","src":"23742:43:21"},{"nodeType":"YulAssignment","src":"23794:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23806:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23817:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23802:3:21"},"nodeType":"YulFunctionCall","src":"23802:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23794:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23569:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23583:4:21","type":""}],"src":"23418:409:21"},{"body":{"nodeType":"YulBlock","src":"24006:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24023:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24034:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24016:6:21"},"nodeType":"YulFunctionCall","src":"24016:21:21"},"nodeType":"YulExpressionStatement","src":"24016:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24057:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24068:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24053:3:21"},"nodeType":"YulFunctionCall","src":"24053:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"24073:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24046:6:21"},"nodeType":"YulFunctionCall","src":"24046:30:21"},"nodeType":"YulExpressionStatement","src":"24046:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24096:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24107:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24092:3:21"},"nodeType":"YulFunctionCall","src":"24092:18:21"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"24112:34:21","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24085:6:21"},"nodeType":"YulFunctionCall","src":"24085:62:21"},"nodeType":"YulExpressionStatement","src":"24085:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24167:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24178:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24163:3:21"},"nodeType":"YulFunctionCall","src":"24163:18:21"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"24183:8:21","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24156:6:21"},"nodeType":"YulFunctionCall","src":"24156:36:21"},"nodeType":"YulExpressionStatement","src":"24156:36:21"},{"nodeType":"YulAssignment","src":"24201:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24213:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24224:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24209:3:21"},"nodeType":"YulFunctionCall","src":"24209:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24201:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23983:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23997:4:21","type":""}],"src":"23832:402:21"},{"body":{"nodeType":"YulBlock","src":"24376:150:21","statements":[{"nodeType":"YulVariableDeclaration","src":"24386:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24406:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24400:5:21"},"nodeType":"YulFunctionCall","src":"24400:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24390:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24461:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"24469:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24457:3:21"},"nodeType":"YulFunctionCall","src":"24457:17:21"},{"name":"pos","nodeType":"YulIdentifier","src":"24476:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"24481:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24422:34:21"},"nodeType":"YulFunctionCall","src":"24422:66:21"},"nodeType":"YulExpressionStatement","src":"24422:66:21"},{"nodeType":"YulAssignment","src":"24497:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24508:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"24513:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24504:3:21"},"nodeType":"YulFunctionCall","src":"24504:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24497:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24352:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24357:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24368:3:21","type":""}],"src":"24239:287:21"},{"body":{"nodeType":"YulBlock","src":"24705:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24722:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24733:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24715:6:21"},"nodeType":"YulFunctionCall","src":"24715:21:21"},"nodeType":"YulExpressionStatement","src":"24715:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24756:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24767:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24752:3:21"},"nodeType":"YulFunctionCall","src":"24752:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"24772:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24745:6:21"},"nodeType":"YulFunctionCall","src":"24745:30:21"},"nodeType":"YulExpressionStatement","src":"24745:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24795:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24806:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24791:3:21"},"nodeType":"YulFunctionCall","src":"24791:18:21"},{"hexValue":"455243313135353a206275726e20616d6f756e74206578636565647320746f74","kind":"string","nodeType":"YulLiteral","src":"24811:34:21","type":"","value":"ERC1155: burn amount exceeds tot"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24784:6:21"},"nodeType":"YulFunctionCall","src":"24784:62:21"},"nodeType":"YulExpressionStatement","src":"24784:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24866:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24877:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24862:3:21"},"nodeType":"YulFunctionCall","src":"24862:18:21"},{"hexValue":"616c537570706c79","kind":"string","nodeType":"YulLiteral","src":"24882:10:21","type":"","value":"alSupply"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24855:6:21"},"nodeType":"YulFunctionCall","src":"24855:38:21"},"nodeType":"YulExpressionStatement","src":"24855:38:21"},{"nodeType":"YulAssignment","src":"24902:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24914:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24925:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24910:3:21"},"nodeType":"YulFunctionCall","src":"24910:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24902:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24682:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24696:4:21","type":""}],"src":"24531:404:21"}]},"contents":"{\n    { }\n    function abi_decode_address(offset, end) -> value\n    {\n        value := calldataload(offset)\n        let value_1 := value\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        let _1 := slt(sub(dataEnd, headStart), 32)\n        if _1 { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let memPtr_1 := memPtr\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        let _1 := iszero(slt(add(offset, 0x1f), end))\n        if _1 { revert(0, 0) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let size := shl(5, length)\n        let dst := allocate_memory(add(size, 0x20))\n        let dst_1 := dst\n        mstore(dst, length)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, size), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            if _1 { revert(_1, _1) }\n            mstore(dst, calldataload(src))\n            dst := add(dst, 0x20)\n        }\n        array := dst_1\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        let _1 := iszero(slt(add(offset, 0x1f), end))\n        if _1 { revert(0, 0) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20))\n        mstore(array_1, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), length)\n        mstore(add(add(array_1, length), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        let _1 := slt(sub(dataEnd, headStart), 160)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 64)\n        if _1 { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let offset_1 := add(headStart, offset)\n        if iszero(slt(add(offset_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(offset_1)\n        let dst := allocate_memory(array_allocation_size_array_uint256_dyn(length))\n        let dst_1 := dst\n        mstore(dst, length)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset_1, shl(5, length)), 0x20)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(offset_1, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, abi_decode_address(src, dataEnd))\n            dst := add(dst, 0x20)\n        }\n        value0 := dst_1\n        let offset_2 := calldataload(add(headStart, 0x20))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 64)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 64)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := slt(sub(dataEnd, headStart), 32)\n        if _1 { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let offset_1 := add(headStart, offset)\n        if iszero(slt(add(offset_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(offset_1)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let array := allocate_memory(add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 32))\n        mstore(array, length)\n        if gt(add(add(offset_1, length), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(array, 32), add(offset_1, 32), length)\n        mstore(add(add(array, length), 32), 0)\n        value0 := array\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        let _1 := slt(sub(dataEnd, headStart), 160)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 32)\n        if _1 { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let offset_1 := add(headStart, offset)\n        if iszero(slt(add(offset_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(offset_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(offset_1, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(offset_1, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let length_1 := length\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_3f84c69b1aba6fc99dba484e7c882a2ea70a6ea4d71ee67f03ae77d3d8f6d1e8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"HYDNSeal: token not existing\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        let diff_1 := diff\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_81c3f0ac137a93bc1fd51a97ddb9bc0526804f6e202e9dbd362da1d7654bb15b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"HYDNSeal: transfer batch not all\")\n        mstore(add(headStart, 96), \"owed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_ffcd27d0545ae5d83e35f36d8b146e4c7d852c0e8c6bd9849c6f1c6d69b8640e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"HYDNSeal: transfer not allowed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let start := deleteStart\n            let end := add(data, shr(5, add(len, 31)))\n            for { } lt(start, end) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let length := mload(src)\n        let _1 := gt(length, 0xffffffffffffffff)\n        if _1 { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), length)\n        let srcOffset := 0\n        srcOffset := 0x20\n        let _2 := gt(length, 31)\n        switch _2\n        case 1 {\n            let loopEnd := and(length, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, length)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, length), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, length), 1))\n        }\n        default {\n            let value := 0\n            if length\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, or(and(value, not(shr(shl(3, length), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))), shl(1, length)))\n        }\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        let sum_1 := sum\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_5c7954140cefba85008d6ba5fe42bda7421a9d6afee2f24ef8454b4191859c7c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"HYDNSeal: receiver is not a cont\")\n        mstore(add(headStart, 96), \"ract\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_9eb0869d69143813ac9f244871191d8f2e530e71a4599ba9db4501f0f6110ee4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: burn amount exceeds tot\")\n        mstore(add(headStart, 96), \"alSupply\")\n        tail := add(headStart, 128)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"702":[{"length":32,"start":2103},{"length":32,"start":2253},{"length":32,"start":2886},{"length":32,"start":3036},{"length":32,"start":3339}]},"linkReferences":{},"object":"60806040526004361061017f5760003560e01c8063715018a6116100d6578063bd85b0391161007f578063f2fde38b11610059578063f2fde38b1461045f578063f62d18881461047f578063f722c17d1461049f57600080fd5b8063bd85b039146103bb578063e985e9c5146103e9578063f242432a1461043f57600080fd5b806395d89b41116100b057806395d89b4114610366578063a22cb4651461037b578063a99b396e1461039b57600080fd5b8063715018a6146103055780638da5cb5b1461031a5780639458e7181461034f57600080fd5b80632eb2c2d6116101385780634f1ef286116101125780634f1ef286146102ad5780634f558e79146102c057806352d1902d146102f057600080fd5b80632eb2c2d61461023e5780633659cfe6146102605780634e1273f41461028057600080fd5b806306fdde031161016957806306fdde03146101e75780630e89341c1461020957806318160ddd1461022957600080fd5b8062fdd58e1461018457806301ffc9a7146101b7575b600080fd5b34801561019057600080fd5b506101a461019f366004612228565b6104bf565b6040519081526020015b60405180910390f35b3480156101c357600080fd5b506101d76101d2366004612253565b610587565b60405190151581526020016101ae565b3480156101f357600080fd5b506101fc61066a565b6040516101ae91906122bb565b34801561021557600080fd5b506101fc61022436600461230c565b6106f9565b34801561023557600080fd5b506101a4610791565b34801561024a57600080fd5b5061025e6102593660046124ea565b6107b3565b005b34801561026c57600080fd5b5061025e61027b3660046125a4565b610820565b34801561028c57600080fd5b506102a061029b3660046125c0565b6109f1565b6040516101ae9190612691565b61025e6102bb3660046126d4565b610b2f565b3480156102cc57600080fd5b506101d76102db36600461230c565b600090815261012d6020526040902054151590565b3480156102fc57600080fd5b506101a4610cf1565b34801561031157600080fd5b5061025e610dc3565b34801561032657600080fd5b5060975460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ae565b34801561035b57600080fd5b506101a46101615481565b34801561037257600080fd5b506101fc610dd7565b34801561038757600080fd5b5061025e61039636600461271b565b610de5565b3480156103a757600080fd5b5061025e6103b636600461275a565b610df0565b3480156103c757600080fd5b506101a46103d636600461230c565b600090815261012d602052604090205490565b3480156103f557600080fd5b506101d7610404366004612814565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260fc6020908152604080832093909416825291909152205460ff1690565b34801561044b57600080fd5b5061025e61045a366004612849565b610f21565b34801561046b57600080fd5b5061025e61047a3660046125a4565b610f69565b34801561048b57600080fd5b5061025e61049a36600461275a565b611003565b3480156104ab57600080fd5b506101d76104ba3660046128a6565b61122c565b600073ffffffffffffffffffffffffffffffffffffffff831661054f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260fb6020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061061a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061058157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610581565b61015f80546106789061291f565b80601f01602080910402602001604051908101604052809291908181526020018280546106a49061291f565b80156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b505050505081565b600081815261012d60205260409020546060906107585760405162461bcd60e51b815260206004820152601c60248201527f4859444e5365616c3a20746f6b656e206e6f74206578697374696e67000000006044820152606401610546565b61076182611374565b61076a83611408565b60405160200161077b929190612972565b6040516020818303038152906040529050919050565b60006107a062989680466129d0565b610161546107ae9190612a0d565b905090565b60405162461bcd60e51b8152602060048201526024808201527f4859444e5365616c3a207472616e73666572206261746368206e6f7420616c6c60448201527f6f776564000000000000000000000000000000000000000000000000000000006064820152608401610546565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036108cb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610546565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109407f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146109c95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610546565b6109d281611542565b604080516000808252602082019092526109ee9183919061154a565b50565b60608151835114610a6a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610546565b6000835167ffffffffffffffff811115610a8657610a86612325565b604051908082528060200260200182016040528015610aaf578160200160208202803683370190505b50905060005b8451811015610b2757610afa858281518110610ad357610ad3612a20565b6020026020010151858381518110610aed57610aed612a20565b60200260200101516104bf565b828281518110610b0c57610b0c612a20565b6020908102919091010152610b2081612a4f565b9050610ab5565b509392505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610bda5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610546565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610c4f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610cd85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610546565b610ce182611542565b610ced8282600161154a565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d9e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610546565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b610dcb61171a565b610dd56000611781565b565b61016080546106789061291f565b610ced3383836117f8565b600054600290610100900460ff16158015610e12575060005460ff8083169116105b610e845760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610546565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff831617610100179055610ebe82611931565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60405162461bcd60e51b815260206004820152601e60248201527f4859444e5365616c3a207472616e73666572206e6f7420616c6c6f77656400006044820152606401610546565b610f7161171a565b73ffffffffffffffffffffffffffffffffffffffff8116610ffa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610546565b6109ee81611781565b600054610100900460ff16158080156110235750600054600160ff909116105b8061103d5750303b15801561103d575060005460ff166001145b6110af5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610546565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561110d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61111561193d565b61111d61193d565b6111256119ba565b61112e82611a3f565b61113661193d565b61114362989680466129d0565b6101615560408051808201909152600981527f4859444e205365616c0000000000000000000000000000000000000000000000602082015261015f906111899082612ad5565b5060408051808201909152600381527fe29b9100000000000000000000000000000000000000000000000000000000006020820152610160906111cc9082612ad5565b508015610ced57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f15565b600061123661171a565b6001610161600082825461124a9190612bf2565b90915550506101615460005b83811015611369576112a485858381811061127357611273612a20565b905060200201602081019061128891906125a4565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b6113155760405162461bcd60e51b8152602060048201526024808201527f4859444e5365616c3a207265636569766572206973206e6f74206120636f6e7460448201527f72616374000000000000000000000000000000000000000000000000000000006064820152608401610546565b61135785858381811061132a5761132a612a20565b905060200201602081019061133f91906125a4565b83600160405180602001604052806000815250611ac5565b8061136181612a4f565b915050611256565b506001949350505050565b606060fd80546113839061291f565b80601f01602080910402602001604051908101604052809291908181526020018280546113af9061291f565b80156113fc5780601f106113d1576101008083540402835291602001916113fc565b820191906000526020600020905b8154815290600101906020018083116113df57829003601f168201915b50505050509050919050565b60608161144857505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611472578061145c81612a4f565b915061146b9050600a83612c34565b915061144c565b60008167ffffffffffffffff81111561148d5761148d612325565b6040519080825280601f01601f1916602001820160405280156114b7576020820181803683370190505b5090505b841561153a576114cc600183612a0d565b91506114d9600a86612c48565b6114e4906030612bf2565b60f81b8183815181106114f9576114f9612a20565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611533600a86612c34565b94506114bb565b949350505050565b6109ee61171a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115825761157d83611c1f565b505050565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611607575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261160491810190612c5c565b60015b6116795760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610546565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461170e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610546565b5061157d838383611d0f565b60975473ffffffffffffffffffffffffffffffffffffffff163314610dd55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610546565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036118995760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610546565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260fc602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60fd610ced8282612ad5565b600054610100900460ff16610dd55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b600054610100900460ff16611a375760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b610dd5611d3a565b600054610100900460ff16611abc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b6109ee81611dc0565b73ffffffffffffffffffffffffffffffffffffffff8416611b4e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610546565b336000611b5a85611e46565b90506000611b6785611e46565b9050611b7883600089858589611e91565b600086815260fb6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915281208054879290611bb7908490612bf2565b9091555050604080518781526020810187905273ffffffffffffffffffffffffffffffffffffffff808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff81163b611ca95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610546565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611d1883611ea7565b600082511180611d255750805b1561157d57611d348383611ef4565b50505050565b600054610100900460ff16611db75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b610dd533611781565b600054610100900460ff16611e3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b6109ee81611931565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611e8057611e80612a20565b602090810291909101015292915050565b611e9f868686868686612019565b505050505050565b611eb081611c1f565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606073ffffffffffffffffffffffffffffffffffffffff83163b611f805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610546565b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051611fa89190612c75565b600060405180830381855af49150503d8060008114611fe3576040519150601f19603f3d011682016040523d82523d6000602084013e611fe8565b606091505b50915091506120108282604051806060016040528060278152602001612c92602791396121c4565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff85166120ae5760005b83518110156120ac5782818151811061205257612052612a20565b602002602001015161012d600086848151811061207157612071612a20565b6020026020010151815260200190815260200160002060008282546120969190612bf2565b909155506120a5905081612a4f565b9050612037565b505b73ffffffffffffffffffffffffffffffffffffffff8416611e9f5760005b8351811015611c165760008482815181106120e9576120e9612a20565b60200260200101519050600084838151811061210757612107612a20565b60200260200101519050600061012d6000848152602001908152602001600020549050818110156121a05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610546565b600092835261012d6020526040909220910390556121bd81612a4f565b90506120cc565b606083156121d35750816121fd565b8251156121e35782518084602001fd5b8160405162461bcd60e51b815260040161054691906122bb565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461058157600080fd5b6000806040838503121561223b57600080fd5b6122458484612204565b946020939093013593505050565b6000602082840312801561226657600080fd5b5081357fffffffff00000000000000000000000000000000000000000000000000000000811681146121fd57600080fd5b60005b838110156122b257818101518382015260200161229a565b50506000910152565b60208152600082518060208401526122da816040850160208701612297565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561231e57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561239b5761239b612325565b604052919050565b600067ffffffffffffffff8211156123bd576123bd612325565b5060051b60200190565b600082601f8301121580156123db57600080fd5b823567ffffffffffffffff8111156123f5576123f5612325565b8060051b61240560208201612354565b9182526020818601810192908101908784111561242157600080fd5b6020870192505b8383101561244d57841561243a578485fd5b8235825260209283019290910190612428565b979650505050505050565b600082601f83011215801561246c57600080fd5b50813567ffffffffffffffff81111561248757612487612325565b6124b860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612354565b8181528460208386010111156124cd57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312801561250357600080fd5b5061250e8787612204565b945061251d8760208801612204565b9350604086013567ffffffffffffffff81111561253957600080fd5b612545888289016123c7565b935050606086013567ffffffffffffffff81111561256257600080fd5b61256e888289016123c7565b925050608086013567ffffffffffffffff81111561258b57600080fd5b61259788828901612458565b9150509295509295909350565b6000602082840312156125b657600080fd5b6121fd8383612204565b60008060408385031280156125d457600080fd5b50823567ffffffffffffffff8111156125ec57600080fd5b8301601f810185136125fd57600080fd5b803561261061260b826123a3565b612354565b8082825260208201915060208360051b85010192508783111561263257600080fd5b6020840193505b8284101561265c5761264b8885612204565b825260209384019390910190612639565b9450505050602083013567ffffffffffffffff81111561267b57600080fd5b612687858286016123c7565b9150509250929050565b602080825282518282018190526000918401906040840190835b818110156126c95783518352602093840193909201916001016126ab565b509095945050505050565b60008060408385031280156126e857600080fd5b506126f38484612204565b9150602083013567ffffffffffffffff81111561270f57600080fd5b61268785828601612458565b600080604083850312801561272f57600080fd5b5061273a8484612204565b91506020830135801515811461274f57600080fd5b809150509250929050565b6000602082840312801561276d57600080fd5b50813567ffffffffffffffff81111561278557600080fd5b8201601f8101841361279657600080fd5b803567ffffffffffffffff8111156127b0576127b0612325565b6127e160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612354565b8181528560208385010111156127f657600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806040838503121561282757600080fd5b6128318484612204565b91506128408460208501612204565b90509250929050565b600080600080600060a086880312801561286257600080fd5b5061286d8787612204565b945061287c8760208801612204565b93506040860135925060608601359150608086013567ffffffffffffffff81111561258b57600080fd5b60008060208385031280156128ba57600080fd5b50823567ffffffffffffffff8111156128d257600080fd5b8301601f810185136128e357600080fd5b803567ffffffffffffffff8111156128fa57600080fd5b8560208260051b840101111561290f57600080fd5b6020919091019590945092505050565b600181811c9082168061293357607f821691505b60208210810361296c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008351612984818460208801612297565b835190830190612998818360208801612297565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a0857612a086129a1565b500290565b81810381811115610581576105816129a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a8057612a806129a1565b5060010190565b601f82111561157d57806000526020600020601f840160051c81016020851015612aae5750805b601f840160051c820191505b81811015612ace5760008155600101612aba565b5050505050565b815167ffffffffffffffff81118015612af057612af0612325565b50612b0581612aff845461291f565b84612a87565b6020601f82118060018114612b585760008415612b225750858301515b8460011b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8660031b1c19821617865550611e9f565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612ba65788860151825560209586019560019092019101612b86565b5085821015612be257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610581576105816129a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612c4357612c43612c05565b500490565b600082612c5757612c57612c05565b500690565b600060208284031215612c6e57600080fd5b5051919050565b60008251612c87818460208701612297565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202d5fb37a6d95a21b476ee3685c04e413b1680413584b5d09e28985495c0d0ddc64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xBD85B039 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0xF62D1888 EQ PUSH2 0x47F JUMPI DUP1 PUSH4 0xF722C17D EQ PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0xA99B396E EQ PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0x9458E718 EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0x2228 JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2253 JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x66A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AE SWAP2 SWAP1 PUSH2 0x22BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x230C JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x791 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0x24EA JUMP JUMPDEST PUSH2 0x7B3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x820 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A0 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x25C0 JUMP JUMPDEST PUSH2 0x9F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AE SWAP2 SWAP1 PUSH2 0x2691 JUMP JUMPDEST PUSH2 0x25E PUSH2 0x2BB CALLDATASIZE PUSH1 0x4 PUSH2 0x26D4 JUMP JUMPDEST PUSH2 0xB2F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x230C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0xCF1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0xDC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x161 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xDD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x271B JUMP JUMPDEST PUSH2 0xDE5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x3B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x275A JUMP JUMPDEST PUSH2 0xDF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH2 0x3D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x230C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x2814 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xF21 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x47A CALLDATASIZE PUSH1 0x4 PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0xF69 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25E PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x275A JUMP JUMPDEST PUSH2 0x1003 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D7 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x28A6 JUMP JUMPDEST PUSH2 0x122C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x54F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x61A JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x581 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x581 JUMP JUMPDEST PUSH2 0x15F DUP1 SLOAD PUSH2 0x678 SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6A4 SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6F1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6C6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6F1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6D4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH2 0x758 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A20746F6B656E206E6F74206578697374696E6700000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x761 DUP3 PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x76A DUP4 PUSH2 0x1408 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x77B SWAP3 SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A0 PUSH3 0x989680 CHAINID PUSH2 0x29D0 JUMP JUMPDEST PUSH2 0x161 SLOAD PUSH2 0x7AE SWAP2 SWAP1 PUSH2 0x2A0D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A207472616E73666572206261746368206E6F7420616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F77656400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x8CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x940 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9D2 DUP2 PUSH2 0x1542 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x9EE SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x154A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA86 JUMPI PUSH2 0xA86 PUSH2 0x2325 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAAF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB27 JUMPI PUSH2 0xAFA DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAD3 JUMPI PUSH2 0xAD3 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAED JUMPI PUSH2 0xAED PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4BF JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB0C JUMPI PUSH2 0xB0C PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xB20 DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0xAB5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xBDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC4F PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xCE1 DUP3 PUSH2 0x1542 JUMP JUMPDEST PUSH2 0xCED DUP3 DUP3 PUSH1 0x1 PUSH2 0x154A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x171A JUMP JUMPDEST PUSH2 0xDD5 PUSH1 0x0 PUSH2 0x1781 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x160 DUP1 SLOAD PUSH2 0x678 SWAP1 PUSH2 0x291F JUMP JUMPDEST PUSH2 0xCED CALLER DUP4 DUP4 PUSH2 0x17F8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xE12 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0xE84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH1 0xFF DUP4 AND OR PUSH2 0x100 OR SWAP1 SSTORE PUSH2 0xEBE DUP3 PUSH2 0x1931 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0xFF DUP3 AND DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A207472616E73666572206E6F7420616C6C6F7765640000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xF71 PUSH2 0x171A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xFFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1023 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x103D JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x103D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x10AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1115 PUSH2 0x193D JUMP JUMPDEST PUSH2 0x111D PUSH2 0x193D JUMP JUMPDEST PUSH2 0x1125 PUSH2 0x19BA JUMP JUMPDEST PUSH2 0x112E DUP3 PUSH2 0x1A3F JUMP JUMPDEST PUSH2 0x1136 PUSH2 0x193D JUMP JUMPDEST PUSH2 0x1143 PUSH3 0x989680 CHAINID PUSH2 0x29D0 JUMP JUMPDEST PUSH2 0x161 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH32 0x4859444E205365616C0000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x15F SWAP1 PUSH2 0x1189 SWAP1 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0xE29B910000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x160 SWAP1 PUSH2 0x11CC SWAP1 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xCED JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0xF15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1236 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x1 PUSH2 0x161 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x124A SWAP2 SWAP1 PUSH2 0x2BF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0x161 SLOAD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1369 JUMPI PUSH2 0x12A4 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x1273 JUMPI PUSH2 0x1273 PUSH2 0x2A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1288 SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x1315 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4859444E5365616C3A207265636569766572206973206E6F74206120636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7261637400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x1357 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x132A JUMPI PUSH2 0x132A PUSH2 0x2A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x133F SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1AC5 JUMP JUMPDEST DUP1 PUSH2 0x1361 DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1256 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFD DUP1 SLOAD PUSH2 0x1383 SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13AF SWAP1 PUSH2 0x291F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13FC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13D1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13FC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13DF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x1448 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1472 JUMPI DUP1 PUSH2 0x145C DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP PUSH2 0x146B SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x2C34 JUMP JUMPDEST SWAP2 POP PUSH2 0x144C JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x148D JUMPI PUSH2 0x148D PUSH2 0x2325 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14B7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x153A JUMPI PUSH2 0x14CC PUSH1 0x1 DUP4 PUSH2 0x2A0D JUMP JUMPDEST SWAP2 POP PUSH2 0x14D9 PUSH1 0xA DUP7 PUSH2 0x2C48 JUMP JUMPDEST PUSH2 0x14E4 SWAP1 PUSH1 0x30 PUSH2 0x2BF2 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x14F9 JUMPI PUSH2 0x14F9 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1533 PUSH1 0xA DUP7 PUSH2 0x2C34 JUMP JUMPDEST SWAP5 POP PUSH2 0x14BB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x9EE PUSH2 0x171A JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1582 JUMPI PUSH2 0x157D DUP4 PUSH2 0x1C1F JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1607 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1604 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2C5C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1679 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x170E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST POP PUSH2 0x157D DUP4 DUP4 DUP4 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xDD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1899 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0xFD PUSH2 0xCED DUP3 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A37 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xDD5 PUSH2 0x1D3A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1ABC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1DC0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1B4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1B5A DUP6 PUSH2 0x1E46 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B67 DUP6 PUSH2 0x1E46 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B78 DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1E91 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x1BB7 SWAP1 DUP5 SWAP1 PUSH2 0x2BF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x1CA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D18 DUP4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x1D25 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x157D JUMPI PUSH2 0x1D34 DUP4 DUP4 PUSH2 0x1EF4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0xDD5 CALLER PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1931 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E80 JUMPI PUSH2 0x1E80 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E9F DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2019 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EB0 DUP2 PUSH2 0x1C1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND EXTCODESIZE PUSH2 0x1F80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x1FA8 SWAP2 SWAP1 PUSH2 0x2C75 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FE3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FE8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2010 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2C92 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x21C4 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x20AE JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x20AC JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2052 JUMPI PUSH2 0x2052 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12D PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2071 JUMPI PUSH2 0x2071 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2096 SWAP2 SWAP1 PUSH2 0x2BF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x20A5 SWAP1 POP DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0x2037 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1E9F JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1C16 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20E9 JUMPI PUSH2 0x20E9 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2107 JUMPI PUSH2 0x2107 PUSH2 0x2A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x12D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x21A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E74206578636565647320746F74 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C537570706C79000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH2 0x12D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP2 SUB SWAP1 SSTORE PUSH2 0x21BD DUP2 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0x20CC JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x21D3 JUMPI POP DUP2 PUSH2 0x21FD JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x21E3 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x546 SWAP2 SWAP1 PUSH2 0x22BB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x223B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2245 DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT DUP1 ISZERO PUSH2 0x2266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x21FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x22B2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x229A JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x22DA DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2297 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x231E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x239B JUMPI PUSH2 0x239B PUSH2 0x2325 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23BD JUMPI PUSH2 0x23BD PUSH2 0x2325 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x23DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23F5 JUMPI PUSH2 0x23F5 PUSH2 0x2325 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x2405 PUSH1 0x20 DUP3 ADD PUSH2 0x2354 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 DUP8 DUP5 GT ISZERO PUSH2 0x2421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x244D JUMPI DUP5 ISZERO PUSH2 0x243A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2428 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x246C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2487 JUMPI PUSH2 0x2487 PUSH2 0x2325 JUMP JUMPDEST PUSH2 0x24B8 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2354 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x24CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x2503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x250E DUP8 DUP8 PUSH2 0x2204 JUMP JUMPDEST SWAP5 POP PUSH2 0x251D DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x2204 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2545 DUP9 DUP3 DUP10 ADD PUSH2 0x23C7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x256E DUP9 DUP3 DUP10 ADD PUSH2 0x23C7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x258B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2597 DUP9 DUP3 DUP10 ADD PUSH2 0x2458 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21FD DUP4 DUP4 PUSH2 0x2204 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x25D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x25FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2610 PUSH2 0x260B DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH2 0x2354 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 POP DUP8 DUP4 GT ISZERO PUSH2 0x2632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x265C JUMPI PUSH2 0x264B DUP9 DUP6 PUSH2 0x2204 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2639 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x267B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2687 DUP6 DUP3 DUP7 ADD PUSH2 0x23C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26C9 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x26AB JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x26E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26F3 DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x270F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2687 DUP6 DUP3 DUP7 ADD PUSH2 0x2458 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x272F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273A DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x274F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT DUP1 ISZERO PUSH2 0x276D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27B0 JUMPI PUSH2 0x27B0 PUSH2 0x2325 JUMP JUMPDEST PUSH2 0x27E1 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2354 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x27F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2827 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2831 DUP5 DUP5 PUSH2 0x2204 JUMP JUMPDEST SWAP2 POP PUSH2 0x2840 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x2204 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x2862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286D DUP8 DUP8 PUSH2 0x2204 JUMP JUMPDEST SWAP5 POP PUSH2 0x287C DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x2204 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x258B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x28BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x28E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x290F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2933 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x296C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2984 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2297 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2998 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2297 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2A08 JUMPI PUSH2 0x2A08 PUSH2 0x29A1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x581 JUMPI PUSH2 0x581 PUSH2 0x29A1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2A80 JUMPI PUSH2 0x2A80 PUSH2 0x29A1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x157D JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2AAE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2ACE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2ABA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2AF0 JUMPI PUSH2 0x2AF0 PUSH2 0x2325 JUMP JUMPDEST POP PUSH2 0x2B05 DUP2 PUSH2 0x2AFF DUP5 SLOAD PUSH2 0x291F JUMP JUMPDEST DUP5 PUSH2 0x2A87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT DUP1 PUSH1 0x1 DUP2 EQ PUSH2 0x2B58 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2B22 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST DUP5 PUSH1 0x1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 PUSH1 0x3 SHL SHR NOT DUP3 AND OR DUP7 SSTORE POP PUSH2 0x1E9F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2BA6 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x2B86 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2BE2 JUMPI DUP8 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x581 JUMPI PUSH2 0x581 PUSH2 0x29A1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2C43 JUMPI PUSH2 0x2C43 PUSH2 0x2C05 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2C57 JUMPI PUSH2 0x2C57 PUSH2 0x2C05 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C87 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2297 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212202D5FB3 PUSH27 0x6D95A21B476EE3685C04E413B1680413584B5D09E28985495C0D0D 0xDC PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"573:2339:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3069:217:20;;;;;;;;;;-1:-1:-1;3069:217:20;;;;;:::i;:::-;;:::i;:::-;;;663:25:21;;;651:2;636:18;3069:217:20;;;;;;;;2122:347;;;;;;;;;;-1:-1:-1;2122:347:20;;;;;:::i;:::-;;:::i;:::-;;;1222:14:21;;1215:22;1197:41;;1185:2;1170:18;2122:347:20;1057:187:21;99:18:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2176:241:17:-;;;;;;;;;;-1:-1:-1;2176:241:17;;;;;:::i;:::-;;:::i;2421:114::-;;;;;;;;;;;;;:::i;1976:196::-;;;;;;;;;;-1:-1:-1;1976:196:17;;;;;:::i;:::-;;:::i;:::-;;3315:197:5;;;;;;;;;;-1:-1:-1;3315:197:5;;;;;:::i;:::-;;:::i;3427:458:20:-;;;;;;;;;;-1:-1:-1;3427:458:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3761:222:5:-;;;;;;:::i;:::-;;:::i;1347:129:19:-;;;;;;;;;;-1:-1:-1;1347:129:19;;;;;:::i;:::-;1404:4;1241:16;;;:12;:16;;;;;;-1:-1:-1;;;1347:129:19;3004:131:5;;;;;;;;;;;;;:::i;2071:101:0:-;;;;;;;;;;;;;:::i;1441:85::-;;;;;;;;;;-1:-1:-1;1513:6:0;;1441:85;;1513:6;;;;8107:74:21;;8095:2;8080:18;1441:85:0;7961:226:21;145:29:18;;;;;;;;;;;;;;;;121:20;;;;;;;;;;;;;:::i;3945:147:20:-;;;;;;;;;;-1:-1:-1;3945:147:20;;;;;:::i;:::-;;:::i;1236:100:17:-;;;;;;;;;;-1:-1:-1;1236:100:17;;;;;:::i;:::-;;:::i;1157:105:19:-;;;;;;;;;;-1:-1:-1;1157:105:19;;;;;:::i;:::-;1219:7;1241:16;;;:12;:16;;;;;;;1157:105;4151:160:20;;;;;;;;;;-1:-1:-1;4151:160:20;;;;;:::i;:::-;4269:27;;;;4250:4;4269:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;4151:160;1805:167:17;;;;;;;;;;-1:-1:-1;1805:167:17;;;;;:::i;:::-;;:::i;2321:198:0:-;;;;;;;;;;-1:-1:-1;2321:198:0;;;;;:::i;:::-;;:::i;856:376:17:-;;;;;;;;;;-1:-1:-1;856:376:17;;;;;:::i;:::-;;:::i;2539:371::-;;;;;;;;;;-1:-1:-1;2539:371:17;;;;;:::i;:::-;;:::i;3069:217:20:-;3155:7;3178:21;;;3170:76;;;;-1:-1:-1;;;3170:76:20;;11256:2:21;3170:76:20;;;11238:21:21;11295:2;11275:18;;;11268:30;11334:34;11314:18;;;11307:62;11405:12;11385:18;;;11378:40;11435:19;;3170:76:20;;;;;;;;;-1:-1:-1;3259:13:20;;;;:9;:13;;;;;;;;:22;;;;;;;;;;;3069:217;;;;;:::o;2122:347::-;2266:4;2293:52;;;2308:37;2293:52;;:125;;-1:-1:-1;2355:63:20;;;2370:48;2355:63;2293:125;:171;;;-1:-1:-1;1183:36:15;1168:51;;;;2428:36:20;1060:166:15;99:18:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2176:241:17:-;1404:4:19;1241:16;;;:12;:16;;;;;;2237:13:17;;2258:57;;;;-1:-1:-1;;;2258:57:17;;12140:2:21;2258:57:17;;;12122:21:21;12179:2;12159:18;;;12152:30;12218;12198:18;;;12191:58;12266:18;;2258:57:17;11938:352:21;2258:57:17;2352:19;2362:8;2352:9;:19::i;:::-;2373:37;2401:8;2373:27;:37::i;:::-;2335:76;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2321:91;;2176:241;;;:::o;2421:114::-;2465:7;2504:26;2520:10;2504:13;:26;:::i;:::-;2487:14;;:43;;;;:::i;:::-;2480:50;;2421:114;:::o;1976:196::-;2121:46;;-1:-1:-1;;;2121:46:17;;13580:2:21;2121:46:17;;;13562:21:21;13619:2;13599:18;;;13592:30;13658:34;13638:18;;;13631:62;13729:6;13709:18;;;13702:34;13753:19;;2121:46:17;13378:400:21;3315:197:5;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:5;;13985:2:21;1873:80:5;;;13967:21:21;14024:2;14004:18;;;13997:30;14063:34;14043:18;;;14036:62;14134:14;14114:18;;;14107:42;14166:19;;1873:80:5;13783:408:21;1873:80:5;1995:6;1971:30;;:20;1292:66:2;1642:65;;;;1563:151;1971:20:5;:30;;;1963:87;;;;-1:-1:-1;;;1963:87:5;;14398:2:21;1963:87:5;;;14380:21:21;14437:2;14417:18;;;14410:30;14476:34;14456:18;;;14449:62;14547:14;14527:18;;;14520:42;14579:19;;1963:87:5;14196:408:21;1963:87:5;3398:36:::1;3416:17;3398;:36::i;:::-;3485:12;::::0;;3495:1:::1;3485:12:::0;;;::::1;::::0;::::1;::::0;;;3444:61:::1;::::0;3466:17;;3485:12;3444:21:::1;:61::i;:::-;3315:197:::0;:::o;3427:458:20:-;3558:16;3611:3;:10;3592:8;:15;:29;3584:83;;;;-1:-1:-1;;;3584:83:20;;14811:2:21;3584:83:20;;;14793:21:21;14850:2;14830:18;;;14823:30;14889:34;14869:18;;;14862:62;14960:11;14940:18;;;14933:39;14989:19;;3584:83:20;14609:405:21;3584:83:20;3674:30;3721:8;:15;3707:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3707:30:20;;3674:63;;3749:9;3744:110;3768:8;:15;3764:1;:19;3744:110;;;3817:30;3827:8;3836:1;3827:11;;;;;;;;:::i;:::-;;;;;;;3840:3;3844:1;3840:6;;;;;;;;:::i;:::-;;;;;;;3817:9;:30::i;:::-;3798:13;3812:1;3798:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;3785:3;;;:::i;:::-;;;3744:110;;;-1:-1:-1;3867:13:20;3427:458;-1:-1:-1;;;3427:458:20:o;3761:222:5:-;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:5;;13985:2:21;1873:80:5;;;13967:21:21;14024:2;14004:18;;;13997:30;14063:34;14043:18;;;14036:62;14134:14;14114:18;;;14107:42;14166:19;;1873:80:5;13783:408:21;1873:80:5;1995:6;1971:30;;:20;1292:66:2;1642:65;;;;1563:151;1971:20:5;:30;;;1963:87;;;;-1:-1:-1;;;1963:87:5;;14398:2:21;1963:87:5;;;14380:21:21;14437:2;14417:18;;;14410:30;14476:34;14456:18;;;14449:62;14547:14;14527:18;;;14520:42;14579:19;;1963:87:5;14196:408:21;1963:87:5;3878:36:::1;3896:17;3878;:36::i;:::-;3924:52;3946:17;3965:4;3971;3924:21;:52::i;:::-;3761:222:::0;;:::o;3004:131::-;3082:7;2324:4;2316:23;2333:6;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:5;;15610:2:21;2308:92:5;;;15592:21:21;15649:2;15629:18;;;15622:30;15688:34;15668:18;;;15661:62;15759:26;15739:18;;;15732:54;15803:19;;2308:92:5;15408:420:21;2308:92:5;-1:-1:-1;1292:66:2::1;3004:131:5::0;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;121:20:18:-;;;;;;;:::i;3945:147:20:-;4035:52;929:10:12;4068:8:20;4078;4035:18;:52::i;1236:100:17:-;4418:13:4;;1305:1:17;;4418:13:4;;;;;4417:14;:40;;;;-1:-1:-1;4435:12:4;;:22;;;;:12;;:22;4417:40;4409:99;;;;-1:-1:-1;;;4409:99:4;;16035:2:21;4409:99:4;;;16017:21:21;16074:2;16054:18;;;16047:30;16113:34;16093:18;;;16086:62;16184:16;16164:18;;;16157:44;16218:19;;4409:99:4;15833:410:21;4409:99:4;4518:12;:22;;4550:20;;4518:22;;;4550:20;4518:22;4550:20;;;1314:17:17::1;1322:8:::0;1314:7:::1;:17::i;:::-;4607:5:4::0;4591:21;;;;;;4627:20;;16420:4:21;16408:17;;16390:36;;4627:20:4;;16378:2:21;16363:18;4627:20:4;;;;;;;;1236:100:17;;:::o;1805:167::-;1927:40;;-1:-1:-1;;;1927:40:17;;16639:2:21;1927:40:17;;;16621:21:21;16678:2;16658:18;;;16651:30;16717:32;16697:18;;;16690:60;16767:18;;1927:40:17;16437:354:21;2321:198:0;1334:13;:11;:13::i;:::-;2409:22:::1;::::0;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:0;;16998:2:21;2401:73:0::1;::::0;::::1;16980:21:21::0;17037:2;17017:18;;;17010:30;17076:34;17056:18;;;17049:62;17147:8;17127:18;;;17120:36;17173:19;;2401:73:0::1;16796:402:21::0;2401:73:0::1;2484:28;2503:8;2484:18;:28::i;856:376:17:-:0;3111:19:4;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:4;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:4;1476:19:11;:23;;;3219:66:4;;-1:-1:-1;3268:12:4;;;;3284:1;3268:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:4;;16035:2:21;3157:201:4;;;16017:21:21;16074:2;16054:18;;;16047:30;16113:34;16093:18;;;16086:62;16184:16;16164:18;;;16157:44;16218:19;;3157:201:4;15833:410:21;3157:201:4;3368:12;:16;;;;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;;;;;;;3394:65;927:16:17::1;:14;:16::i;:::-;949:24;:22;:24::i;:::-;979:16;:14;:16::i;:::-;1001:24;1016:8;1001:14;:24::i;:::-;1031:22;:20;:22::i;:::-;1076:26;1092:10;1076:13;:26;:::i;:::-;1059:14;:43:::0;1108:18:::1;::::0;;;;::::1;::::0;;;::::1;::::0;;::::1;;::::0;::::1;::::0;:4:::1;::::0;:18:::1;::::0;:4;:18:::1;:::i;:::-;-1:-1:-1::0;1206:21:17::1;::::0;;;;::::1;::::0;;;::::1;::::0;;::::1;;::::0;::::1;::::0;:6:::1;::::0;:21:::1;::::0;:6;:21:::1;:::i;:::-;;3483:14:4::0;3479:99;;;3529:5;3513:21;;;;;;3553:14;;-1:-1:-1;16390:36:21;;3553:14:4;;16378:2:21;16363:18;3553:14:4;16248:184:21;2539:371:17;2616:12;1334:13:0;:11;:13::i;:::-;2654:1:17::1;2636:14;;:19;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2674:14:17::1;::::0;2661:10:::1;2694:195;2714:21:::0;;::::1;2694:195;;;2758:44;2788:10;;2799:1;2788:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1476:19:11::0;;;:23;;;1186:320;2758:44:17::1;2750:93;;;::::0;-1:-1:-1;;;2750:93:17;;19932:2:21;2750:93:17::1;::::0;::::1;19914:21:21::0;19971:2;19951:18;;;19944:30;20010:34;19990:18;;;19983:62;20081:6;20061:18;;;20054:34;20105:19;;2750:93:17::1;19730:400:21::0;2750:93:17::1;2851:31;2857:10;;2868:1;2857:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2872:2;2876:1;2851:31;;;;;;;;;;;::::0;:5:::1;:31::i;:::-;2737:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2694:195;;;-1:-1:-1::0;2901:4:17::1;::::0;2539:371;-1:-1:-1;;;;2539:371:17:o;2846:97:20:-;2906:13;2934:4;2927:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2846:97;;;:::o;403:703:14:-;459:13;676:5;672:51;;-1:-1:-1;;702:10:14;;;;;;;;;;;;;;;;;;403:703::o;672:51::-;747:5;732:12;786:75;793:9;;786:75;;818:8;;;;:::i;:::-;;-1:-1:-1;840:10:14;;-1:-1:-1;848:2:14;840:10;;:::i;:::-;;;786:75;;;870:19;902:6;892:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;892:17:14;;870:39;;919:150;926:10;;919:150;;952:11;962:1;952:11;;:::i;:::-;;-1:-1:-1;1020:10:14;1028:2;1020:5;:10;:::i;:::-;1007:24;;:2;:24;:::i;:::-;994:39;;977:6;984;977:14;;;;;;;;:::i;:::-;;;;:56;;;;;;;;;;-1:-1:-1;1047:11:14;1056:2;1047:11;;:::i;:::-;;;919:150;;;1092:6;403:703;-1:-1:-1;;;;403:703:14:o;1340:131:17:-;1334:13:0;:11;:13::i;2938:974:2:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;2938:974;;;:::o;3380:526::-;3560:17;3531:61;;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:2;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:2;;20957:2:21;3758:56:2;;;20939:21:21;20996:2;20976:18;;;20969:30;21035:34;21015:18;;;21008:62;21106:16;21086:18;;;21079:44;21140:19;;3758:56:2;20755:410:21;3527:302:2;1292:66;3644:28;;3636:82;;;;-1:-1:-1;;;3636:82:2;;21372:2:21;3636:82:2;;;21354:21:21;21411:2;21391:18;;;21384:30;21450:34;21430:18;;;21423:62;21521:11;21501:18;;;21494:39;21550:19;;3636:82:2;21170:405:21;3636:82:2;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;1599:130:0:-;1513:6;;1662:23;1513:6;929:10:12;1662:23:0;1654:68;;;;-1:-1:-1;;;1654:68:0;;21782:2:21;1654:68:0;;;21764:21:21;;;21801:18;;;21794:30;21860:34;21840:18;;;21833:62;21912:18;;1654:68:0;21580:356:21;2673:187:0;2765:6;;;;2781:17;;;;;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;12835:295:20:-;12967:8;12958:17;;:5;:17;;;12950:71;;;;-1:-1:-1;;;12950:71:20;;22143:2:21;12950:71:20;;;22125:21:21;22182:2;22162:18;;;22155:30;22221:34;22201:18;;;22194:62;22292:11;22272:18;;;22265:39;22321:19;;12950:71:20;21941:405:21;12950:71:20;13027:25;;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;;;;;;;;;;;;13084:41;;1197::21;;;13084::20;;1170:18:21;13084:41:20;;;;;;;12835:295;;;:::o;8561:80::-;8623:4;:13;8630:6;8623:4;:13;:::i;711:59:12:-;4910:13:4;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:4;;22553:2:21;4902:69:4;;;22535:21:21;22592:2;22572:18;;;22565:30;22631:34;22611:18;;;22604:62;22702:13;22682:18;;;22675:41;22733:19;;4902:69:4;22351:407:21;1003:95:0;4910:13:4;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:4;;22553:2:21;4902:69:4;;;22535:21:21;22592:2;22572:18;;;22565:30;22631:34;22611:18;;;22604:62;22702:13;22682:18;;;22675:41;22733:19;;4902:69:4;22351:407:21;4902:69:4;1065:26:0::1;:24;:26::i;1844:111:20:-:0;4910:13:4;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:4;;22553:2:21;4902:69:4;;;22535:21:21;22592:2;22572:18;;;22565:30;22631:34;22611:18;;;22604:62;22702:13;22682:18;;;22675:41;22733:19;;4902:69:4;22351:407:21;4902:69:4;1920:30:20::1;1945:4;1920:24;:30::i;8990:572::-:0;9115:16;;;9107:62;;;;-1:-1:-1;;;9107:62:20;;22965:2:21;9107:62:20;;;22947:21:21;23004:2;22984:18;;;22977:30;23043:34;23023:18;;;23016:62;23114:3;23094:18;;;23087:31;23135:19;;9107:62:20;22763:397:21;9107:62:20;929:10:12;9176:16:20;9236:21;9254:2;9236:17;:21::i;:::-;9213:44;;9263:24;9290:25;9308:6;9290:17;:25::i;:::-;9263:52;;9322:66;9343:8;9361:1;9365:2;9369:3;9374:7;9383:4;9322:20;:66::i;:::-;9395:13;;;;:9;:13;;;;;;;;:17;;;;;;;;;;:27;;9416:6;;9395:13;:27;;9416:6;;9395:27;:::i;:::-;;;;-1:-1:-1;;9433:52:20;;;23339:25:21;;;23395:2;23380:18;;23373:34;;;9433:52:20;;;;;9466:1;;9433:52;;;;;;23312:18:21;9433:52:20;;;;;;;9492:65;9101:461;;;8990:572;;;;:::o;1805:281:2:-;1476:19:11;;;;1878:106:2;;;;-1:-1:-1;;;1878:106:2;;23620:2:21;1878:106:2;;;23602:21:21;23659:2;23639:18;;;23632:30;23698:34;23678:18;;;23671:62;23769:15;23749:18;;;23742:43;23802:19;;1878:106:2;23418:409:21;1878:106:2;1292:66;1994:85;;;;;;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2478:288;;;:::o;1104:111:0:-;4910:13:4;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:4;;22553:2:21;4902:69:4;;;22535:21:21;22592:2;22572:18;;;22565:30;22631:34;22611:18;;;22604:62;22702:13;22682:18;;;22675:41;22733:19;;4902:69:4;22351:407:21;4902:69:4;1176:32:0::1;929:10:12::0;1176:18:0::1;:32::i;1959:104:20:-:0;4910:13:4;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:4;;22553:2:21;4902:69:4;;;22535:21:21;22592:2;22572:18;;;22565:30;22631:34;22611:18;;;22604:62;22702:13;22682:18;;;22675:41;22733:19;;4902:69:4;22351:407:21;4902:69:4;2045:13:20::1;2053:4;2045:7;:13::i;16661:179::-:0;16776:16;;;16790:1;16776:16;;;;;;;;;16727;;16751:22;;16776:16;;;;;;;;;;;;-1:-1:-1;16776:16:20;16751:41;;16809:7;16798:5;16804:1;16798:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;16830:5;16661:179;-1:-1:-1;;16661:179:20:o;1475:326:17:-;1730:66;1757:8;1767:4;1773:2;1777:3;1782:7;1791:4;1730:26;:66::i;:::-;1475:326;;;;;;:::o;2192:152:2:-;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;;;;;;;;;;2192:152;:::o;7088:455::-;7171:12;1476:19:11;;;;7195:88:2;;;;-1:-1:-1;;;7195:88:2;;24034:2:21;7195:88:2;;;24016:21:21;24073:2;24053:18;;;24046:30;24112:34;24092:18;;;24085:62;24183:8;24163:18;;;24156:36;24209:19;;7195:88:2;23832:402:21;7195:88:2;7354:12;7368:23;7395:6;:19;;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;7088:455;-1:-1:-1;;;;;7088:455:2:o;1538:766:19:-;1816:18;;;1812:132;;1849:9;1844:94;1868:3;:10;1864:1;:14;1844:94;;;1919:7;1927:1;1919:10;;;;;;;;:::i;:::-;;;;;;;1895:12;:20;1908:3;1912:1;1908:6;;;;;;;;:::i;:::-;;;;;;;1895:20;;;;;;;;;;;;:34;;;;;;;:::i;:::-;;;;-1:-1:-1;1880:3:19;;-1:-1:-1;1880:3:19;;:::i;:::-;;;1844:94;;;;1812:132;1954:16;;;1950:350;;1985:9;1980:314;2004:3;:10;2000:1;:14;1980:314;;;2031:10;2044:3;2048:1;2044:6;;;;;;;;:::i;:::-;;;;;;;2031:19;;2060:14;2077:7;2085:1;2077:10;;;;;;;;:::i;:::-;;;;;;;2060:27;;2097:14;2114:12;:16;2127:2;2114:16;;;;;;;;;;;;2097:33;;2158:6;2148;:16;;2140:69;;;;-1:-1:-1;;;2140:69:19;;24733:2:21;2140:69:19;;;24715:21:21;24772:2;24752:18;;;24745:30;24811:34;24791:18;;;24784:62;24882:10;24862:18;;;24855:38;24910:19;;2140:69:19;24531:404:21;2140:69:19;2241:16;;;;:12;:16;;;;;;2260:15;;2241:34;;2016:3;;;:::i;:::-;;;1980:314;;6622:742:11;6768:12;6796:7;6792:566;;;-1:-1:-1;6826:10:11;6819:17;;6792:566;6937:17;;:21;6933:415;;7181:10;7175:17;7241:15;7228:10;7224:2;7220:19;7213:44;6933:415;7320:12;7313:20;;-1:-1:-1;;;7313:20:11;;;;;;;;:::i;6933:415::-;6622:742;;;;;:::o;14:230:21:-;87:20;;176:42;165:54;;155:65;;145:93;;234:1;231;224:12;249:263;317:6;325;378:2;366:9;357:7;353:23;349:32;346:52;;;394:1;391;384:12;346:52;417:38;447:7;436:9;417:38;:::i;:::-;407:48;502:2;487:18;;;;474:32;;-1:-1:-1;;;249:263:21:o;699:353::-;757:6;817:2;805:9;796:7;792:23;788:32;832:2;829:22;;;847:1;844;837:12;829:22;;886:9;873:23;936:66;929:5;925:78;918:5;915:89;905:117;;1018:1;1015;1008:12;1249:250;1334:1;1344:113;1358:6;1355:1;1352:13;1344:113;;;1434:11;;;1428:18;1415:11;;;1408:39;1380:2;1373:10;1344:113;;;-1:-1:-1;;1491:1:21;1473:16;;1466:27;1249:250::o;1504:455::-;1653:2;1642:9;1635:21;1616:4;1685:6;1679:13;1728:6;1723:2;1712:9;1708:18;1701:34;1744:79;1816:6;1811:2;1800:9;1796:18;1791:2;1783:6;1779:15;1744:79;:::i;:::-;1875:2;1863:15;1880:66;1859:88;1844:104;;;;1950:2;1840:113;;1504:455;-1:-1:-1;;1504:455:21:o;1964:180::-;2023:6;2076:2;2064:9;2055:7;2051:23;2047:32;2044:52;;;2092:1;2089;2082:12;2044:52;-1:-1:-1;2115:23:21;;1964:180;-1:-1:-1;1964:180:21:o;2149:184::-;2201:77;2198:1;2191:88;2298:4;2295:1;2288:15;2322:4;2319:1;2312:15;2338:365;2409:2;2403:9;2496:2;2486:13;;2501:66;2482:86;2470:99;;2599:18;2584:34;;2620:22;;;2581:62;2578:88;;;2646:18;;:::i;:::-;2682:2;2675:22;2338:365;;-1:-1:-1;2338:365:21:o;2708:183::-;2768:4;2801:18;2793:6;2790:30;2787:56;;;2823:18;;:::i;:::-;-1:-1:-1;2868:1:21;2864:14;2880:4;2860:25;;2708:183::o;2896:781::-;2950:5;3010:3;3003:4;2995:6;2991:17;2987:27;2980:35;3027:2;3024:22;;;3042:1;3039;3032:12;3024:22;3082:6;3069:20;3112:18;3104:6;3101:30;3098:56;;;3134:18;;:::i;:::-;3182:6;3179:1;3175:14;3209:32;3235:4;3229;3225:15;3209:32;:::i;:::-;3275:19;;;3319:4;3351:17;;;3347:28;;;3310:14;;;;3387:15;;;3384:35;;;3415:1;3412;3405:12;3384:35;3451:4;3443:6;3439:17;3428:28;;3465:183;3481:6;3476:3;3473:15;3465:183;;;3540:2;3537:24;;;3556:2;3552;3545:14;3537:24;3586:17;;3574:30;;3633:4;3498:14;;;;3624;;;;3465:183;;;3666:5;2896:781;-1:-1:-1;;;;;;;2896:781:21:o;3682:638::-;3724:5;3784:3;3777:4;3769:6;3765:17;3761:27;3754:35;3801:2;3798:22;;;3816:1;3813;3806:12;3798:22;;3856:6;3843:20;3886:18;3878:6;3875:30;3872:56;;;3908:18;;:::i;:::-;3952:118;4064:4;3995:66;3988:4;3980:6;3976:17;3972:90;3968:101;3952:118;:::i;:::-;4095:6;4086:7;4079:23;4149:3;4142:4;4133:6;4125;4121:19;4117:30;4114:39;4111:59;;;4166:1;4163;4156:12;4111:59;4231:6;4224:4;4216:6;4212:17;4205:4;4196:7;4192:18;4179:59;4287:1;4258:20;;;4280:4;4254:31;4247:42;;;;4262:7;3682:638;-1:-1:-1;;;3682:638:21:o;4325:993::-;4479:6;4487;4495;4503;4511;4571:3;4559:9;4550:7;4546:23;4542:33;4587:2;4584:22;;;4602:1;4599;4592:12;4584:22;;4625:38;4655:7;4644:9;4625:38;:::i;:::-;4615:48;;4682:47;4721:7;4716:2;4705:9;4701:18;4682:47;:::i;:::-;4672:57;;4780:2;4769:9;4765:18;4752:32;4807:18;4799:6;4796:30;4793:50;;;4839:1;4836;4829:12;4793:50;4862:61;4915:7;4906:6;4895:9;4891:22;4862:61;:::i;:::-;4852:71;;;4976:2;4965:9;4961:18;4948:32;5005:18;4995:8;4992:32;4989:52;;;5037:1;5034;5027:12;4989:52;5060:63;5115:7;5104:8;5093:9;5089:24;5060:63;:::i;:::-;5050:73;;;5176:3;5165:9;5161:19;5148:33;5206:18;5196:8;5193:32;5190:52;;;5238:1;5235;5228:12;5190:52;5261:51;5304:7;5293:8;5282:9;5278:24;5261:51;:::i;:::-;5251:61;;;4325:993;;;;;;;;:::o;5323:195::-;5382:6;5435:2;5423:9;5414:7;5410:23;5406:32;5403:52;;;5451:1;5448;5441:12;5403:52;5474:38;5504:7;5493:9;5474:38;:::i;5523:1206::-;5641:6;5649;5709:2;5697:9;5688:7;5684:23;5680:32;5724:2;5721:22;;;5739:1;5736;5729:12;5721:22;;5779:9;5766:23;5812:18;5804:6;5801:30;5798:50;;;5844:1;5841;5834:12;5798:50;5873:22;;5932:4;5918:19;;5914:33;-1:-1:-1;5904:61:21;;5961:1;5958;5951:12;5904:61;6001:8;5988:22;6030:64;6046:47;6086:6;6046:47;:::i;:::-;6030:64;:::i;:::-;6116:3;6140:6;6135:3;6128:19;6172:4;6167:3;6163:14;6156:21;;6235:4;6225:6;6222:1;6218:14;6208:8;6204:29;6200:40;6186:54;;6263:7;6255:6;6252:19;6249:39;;;6284:1;6281;6274:12;6249:39;6322:4;6312:8;6308:19;6297:30;;6336:161;6352:6;6347:3;6344:15;6336:161;;;6420:32;6444:7;6439:3;6420:32;:::i;:::-;6408:45;;6482:4;6369:14;;;;6473;;;;6336:161;;;6516:5;-1:-1:-1;;;;6574:4:21;6559:20;;6546:34;6605:18;6592:32;;6589:52;;;6637:1;6634;6627:12;6589:52;6660:63;6715:7;6704:8;6693:9;6689:24;6660:63;:::i;:::-;6650:73;;;5523:1206;;;;;:::o;6734:611::-;6924:2;6936:21;;;7006:13;;6909:18;;;7028:22;;;6876:4;;7107:15;;;7081:2;7066:18;;;6876:4;7150:169;7164:6;7161:1;7158:13;7150:169;;;7225:13;;7213:26;;7268:2;7294:15;;;;7259:12;;;;7186:1;7179:9;7150:169;;;-1:-1:-1;7336:3:21;;6734:611;-1:-1:-1;;;;;6734:611:21:o;7350:424::-;7427:6;7435;7495:2;7483:9;7474:7;7470:23;7466:32;7510:2;7507:22;;;7525:1;7522;7515:12;7507:22;;7548:38;7578:7;7567:9;7548:38;:::i;:::-;7538:48;;7637:2;7626:9;7622:18;7609:32;7664:18;7656:6;7653:30;7650:50;;;7696:1;7693;7686:12;7650:50;7719:49;7760:7;7751:6;7740:9;7736:22;7719:49;:::i;8192:377::-;8257:6;8265;8325:2;8313:9;8304:7;8300:23;8296:32;8340:2;8337:22;;;8355:1;8352;8345:12;8337:22;;8378:38;8408:7;8397:9;8378:38;:::i;:::-;8368:48;;8466:2;8455:9;8451:18;8438:32;8513:5;8506:13;8499:21;8492:5;8489:32;8479:60;;8535:1;8532;8525:12;8479:60;8558:5;8548:15;;;8192:377;;;;;:::o;8574:876::-;8643:6;8703:2;8691:9;8682:7;8678:23;8674:32;8718:2;8715:22;;;8733:1;8730;8723:12;8715:22;;8773:9;8760:23;8806:18;8798:6;8795:30;8792:50;;;8838:1;8835;8828:12;8792:50;8867:22;;8926:4;8912:19;;8908:33;-1:-1:-1;8898:61:21;;8955:1;8952;8945:12;8898:61;8995:8;8982:22;9027:18;9019:6;9016:30;9013:56;;;9049:18;;:::i;:::-;9091:116;9203:2;9134:66;9127:4;9119:6;9115:17;9111:90;9107:99;9091:116;:::i;:::-;9230:6;9223:5;9216:21;9284:7;9279:2;9270:6;9260:8;9256:21;9252:30;9249:43;9246:63;;;9305:1;9302;9295:12;9246:63;9366:6;9361:2;9351:8;9347:17;9342:2;9335:5;9331:14;9318:55;9418:1;9393:18;;;9413:2;9389:27;9382:38;;;;9397:5;8574:876;-1:-1:-1;;;;8574:876:21:o;9455:278::-;9523:6;9531;9584:2;9572:9;9563:7;9559:23;9555:32;9552:52;;;9600:1;9597;9590:12;9552:52;9623:38;9653:7;9642:9;9623:38;:::i;:::-;9613:48;;9680:47;9719:7;9714:2;9703:9;9699:18;9680:47;:::i;:::-;9670:57;;9455:278;;;;;:::o;9738:645::-;9842:6;9850;9858;9866;9874;9934:3;9922:9;9913:7;9909:23;9905:33;9950:2;9947:22;;;9965:1;9962;9955:12;9947:22;;9988:38;10018:7;10007:9;9988:38;:::i;:::-;9978:48;;10045:47;10084:7;10079:2;10068:9;10064:18;10045:47;:::i;:::-;10035:57;;10139:2;10128:9;10124:18;10111:32;10101:42;;10190:2;10179:9;10175:18;10162:32;10152:42;;10245:3;10234:9;10230:19;10217:33;10273:18;10265:6;10262:30;10259:50;;;10305:1;10302;10295:12;10388:661;10474:6;10482;10542:2;10530:9;10521:7;10517:23;10513:32;10557:2;10554:22;;;10572:1;10569;10562:12;10554:22;;10612:9;10599:23;10645:18;10637:6;10634:30;10631:50;;;10677:1;10674;10667:12;10631:50;10706:22;;10765:4;10751:19;;10747:33;-1:-1:-1;10737:61:21;;10794:1;10791;10784:12;10737:61;10834:8;10821:22;10866:18;10858:6;10855:30;10852:50;;;10898:1;10895;10888:12;10852:50;10957:7;10952:2;10942:6;10939:1;10935:14;10925:8;10921:29;10917:38;10914:51;10911:71;;;10978:1;10975;10968:12;10911:71;11015:2;11001:17;;;;;11037:6;;-1:-1:-1;10388:661:21;-1:-1:-1;;;10388:661:21:o;11465:468::-;11544:1;11540:12;;;;11618;;;11639:61;;11693:4;11685:6;11681:17;11671:27;;11639:61;11746:2;11738:6;11735:14;11715:18;11712:38;11709:218;;11783:77;11780:1;11773:88;11884:4;11881:1;11874:15;11912:4;11909:1;11902:15;11709:218;;11465:468;;;:::o;12295:496::-;12474:3;12512:6;12506:13;12528:66;12587:6;12582:3;12575:4;12567:6;12563:17;12528:66;:::i;:::-;12657:13;;12616:16;;;;12679:70;12657:13;12616:16;12726:4;12714:17;;12679:70;:::i;:::-;12765:20;;12295:496;-1:-1:-1;;;;12295:496:21:o;12796:184::-;12848:77;12845:1;12838:88;12945:4;12942:1;12935:15;12969:4;12966:1;12959:15;12985:228;13025:7;13151:1;13083:66;13079:74;13076:1;13073:81;13068:1;13061:9;13054:17;13050:105;13047:131;;;13158:18;;:::i;:::-;-1:-1:-1;13198:9:21;;12985:228::o;13218:155::-;13285:9;;;13333:11;;;13330:37;;;13347:18;;:::i;15019:184::-;15071:77;15068:1;15061:88;15168:4;15165:1;15158:15;15192:4;15189:1;15182:15;15208:195;15247:3;15278:66;15271:5;15268:77;15265:103;;15348:18;;:::i;:::-;-1:-1:-1;15395:1:21;15384:13;;15208:195::o;17329:520::-;17431:2;17426:3;17423:11;17420:423;;;17467:5;17464:1;17457:16;17511:4;17508:1;17498:18;17581:2;17569:10;17565:19;17562:1;17558:27;17552:4;17548:38;17617:4;17605:10;17602:20;17599:47;;;-1:-1:-1;17640:4:21;17599:47;17733:2;17728:3;17724:12;17721:1;17717:20;17711:4;17707:31;17696:42;;17751:82;17769:3;17762:5;17759:14;17751:82;;;17829:1;17815:16;;17796:1;17785:13;17751:82;;;17755:3;;17329:520;;;:::o;17854:1517::-;17980:3;17974:10;18014:18;18006:6;18003:30;18045:2;18042:28;;;18050:18;;:::i;:::-;18042:28;18079:97;18169:6;18129:38;18161:4;18155:11;18129:38;:::i;:::-;18123:4;18079:97;:::i;:::-;18225:4;18259:2;18248:14;;;18294:1;18289:768;;;;19101:1;19118:6;19115:89;;;-1:-1:-1;19170:19:21;;;19164:26;19115:89;19346:6;19343:1;19339:14;19268:66;19259:6;19256:1;19252:14;19248:87;19244:92;19237:5;19233:104;19230:124;19224:4;19217:138;;18271:1094;;18289:768;17276:1;17269:14;;;17313:4;17300:18;;18337:66;18325:79;;;18502:222;18516:7;18513:1;18510:14;18502:222;;;18598:19;;;18592:26;18577:42;;18705:4;18690:20;;;;18658:1;18646:14;;;;18532:12;18502:222;;;18506:3;18752:6;18743:7;18740:19;18737:261;;;18813:19;;;18807:26;18914:66;18896:1;18892:14;;;18908:3;18888:24;18884:97;18880:102;18865:118;18850:134;;18737:261;-1:-1:-1;;;;;19044:1:21;19028:14;;;19024:22;19011:36;;-1:-1:-1;17854:1517:21:o;19575:150::-;19640:9;;;19686:10;;;19683:36;;;19699:18;;:::i;20135:184::-;20187:77;20184:1;20177:88;20284:4;20281:1;20274:15;20308:4;20305:1;20298:15;20324:120;20364:1;20390;20380:35;;20395:18;;:::i;:::-;-1:-1:-1;20429:9:21;;20324:120::o;20449:112::-;20481:1;20507;20497:35;;20512:18;;:::i;:::-;-1:-1:-1;20546:9:21;;20449:112::o;20566:184::-;20636:6;20689:2;20677:9;20668:7;20664:23;20660:32;20657:52;;;20705:1;20702;20695:12;20657:52;-1:-1:-1;20728:16:21;;20566:184;-1:-1:-1;20566:184:21:o;24239:287::-;24368:3;24406:6;24400:13;24422:66;24481:6;24476:3;24469:4;24461:6;24457:17;24422:66;:::i;:::-;24504:16;;;;;24239:287;-1:-1:-1;;24239:287:21:o"},"gasEstimates":{"creation":{"codeDepositCost":"2300400","executionCost":"infinite","totalCost":"infinite"},"external":{"balanceOf(address,uint256)":"infinite","balanceOfBatch(address[],uint256[])":"infinite","currentAuditId()":"2374","exists(uint256)":"2517","initialize(string)":"infinite","isApprovedForAll(address,address)":"infinite","mintSeal(address[])":"infinite","name()":"infinite","owner()":"2357","proxiableUUID()":"infinite","reinitialize(string)":"infinite","renounceOwnership()":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26709","supportsInterface(bytes4)":"499","symbol()":"infinite","totalSupply()":"2557","totalSupply(uint256)":"2472","transferOwnership(address)":"28322","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","uri(uint256)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","currentAuditId()":"9458e718","exists(uint256)":"4f558e79","initialize(string)":"f62d1888","isApprovedForAll(address,address)":"e985e9c5","mintSeal(address[])":"f722c17d","name()":"06fdde03","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","reinitialize(string)":"a99b396e","renounceOwnership()":"715018a6","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupply(uint256)":"bd85b039","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAuditId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"}],\"name\":\"mintSeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"reinitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HYDNSeal.sol\":\"HYDNSeal\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/HYDNSeal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport './openzepplin/ERC1155Upgradeable.sol';\\nimport './openzepplin/ERC1155SupplyUpgradeable.sol';\\nimport './HYDNSealStorage.sol';\\n\\n//\\n\\ncontract HYDNSeal is\\n  Initializable,\\n  ContextUpgradeable,\\n  UUPSUpgradeable,\\n  OwnableUpgradeable,\\n  HYDNERC1155Upgradeable,\\n  HYDNERC1155SupplyUpgradeable,\\n  HYDNSealStorage\\n{\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(string memory _baseURI) external initializer {\\n    __Context_init();\\n    __UUPSUpgradeable_init();\\n    __Ownable_init();\\n    __ERC1155_init(_baseURI);\\n    __ERC1155Supply_init();\\n    currentAuditId = block.chainid * 10_000_000;\\n    name = 'HYDN Seal';\\n    // solhint-disable-next-line prettier/prettier\\n    // prettier-ignore\\n    symbol = unicode\\\"\\u26d1\\\";\\n  }\\n\\n  function reinitialize(string memory _baseURI) external reinitializer(2) {\\n    _setURI(_baseURI);\\n  }\\n\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\\n    newImplementation; // avoid empty block\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override(HYDNERC1155SupplyUpgradeable, HYDNERC1155Upgradeable) {\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n  }\\n\\n  function safeTransferFrom(\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    bytes memory\\n  ) public override {\\n    revert('HYDNSeal: transfer not allowed');\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address,\\n    address,\\n    uint256[] memory,\\n    uint256[] memory,\\n    bytes memory\\n  ) public override {\\n    revert('HYDNSeal: transfer batch not allowed');\\n  }\\n\\n  function uri(uint256 _tokenId) public view override returns (string memory) {\\n    require(exists(_tokenId), 'HYDNSeal: token not existing');\\n    return string(abi.encodePacked(super.uri(_tokenId), StringsUpgradeable.toString(_tokenId)));\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return currentAuditId - block.chainid * 10_000_000;\\n  }\\n\\n  function mintSeal(address[] calldata _contracts) external onlyOwner returns (bool success) {\\n    currentAuditId += 1;\\n    uint256 id = currentAuditId;\\n    for (uint256 i = 0; i < _contracts.length; i++) {\\n      require(AddressUpgradeable.isContract(_contracts[i]), 'HYDNSeal: receiver is not a contract');\\n      _mint(_contracts[i], id, 1, '');\\n    }\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xc62f1398acc68f1067f9d4ada61b4e6777447881b2bbf0f2ed1bc968d35f3c29\",\"license\":\"MIT\"},\"contracts/HYDNSealStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n//\\n\\nabstract contract HYDNSealStorage {\\n  string public name;\\n  string public symbol;\\n  uint256 public currentAuditId;\\n}\\n\",\"keccak256\":\"0xc76deeabe9be9179fff8e767894f0884e2e409b1e28d4875bc84d39df2f65b1a\",\"license\":\"MIT\"},\"contracts/openzepplin/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n// Hydn: Copy of OpenZeppelin - only change is to reference the modified ERC1155Upgradeable reference\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\\nimport './ERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract HYDNERC1155SupplyUpgradeable is Initializable, HYDNERC1155Upgradeable {\\n  function __ERC1155Supply_init() internal onlyInitializing {}\\n\\n  function __ERC1155Supply_init_unchained() internal onlyInitializing {}\\n\\n  mapping(uint256 => uint256) private _totalSupply;\\n\\n  /**\\n   * @dev Total amount of tokens in with a given id.\\n   */\\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\\n    return _totalSupply[id];\\n  }\\n\\n  /**\\n   * @dev Indicates whether any token exist with a given id, or not.\\n   */\\n  function exists(uint256 id) public view virtual returns (bool) {\\n    return HYDNERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n  }\\n\\n  /**\\n   * @dev See {ERC1155-_beforeTokenTransfer}.\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    if (from == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        _totalSupply[ids[i]] += amounts[i];\\n      }\\n    }\\n\\n    if (to == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        uint256 id = ids[i];\\n        uint256 amount = amounts[i];\\n        uint256 supply = _totalSupply[id];\\n        require(supply >= amount, 'ERC1155: burn amount exceeds totalSupply');\\n        unchecked {\\n          _totalSupply[id] = supply - amount;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cccb13e902780fc616e9508ebba5a0b026f26fbba95e82bda9f40b543708dd7\",\"license\":\"MIT\"},\"contracts/openzepplin/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n// Hydn: Copy of OpenZeppelin - change are:\\n//  - _mint function do not call the _doSafeTransferAcceptanceCheck hook as the token is not transferable we don't want to check if the contract accept it or not\\n\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract HYDNERC1155Upgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  ERC165Upgradeable,\\n  IERC1155Upgradeable,\\n  IERC1155MetadataURIUpgradeable\\n{\\n  using AddressUpgradeable for address;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n  string private _uri;\\n\\n  /**\\n   * @dev See {_setURI}.\\n   */\\n  function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n    __ERC1155_init_unchained(uri_);\\n  }\\n\\n  function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n    _setURI(uri_);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * This implementation returns the same URI for *all* token types. It relies\\n   * on the token type ID substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual override returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), 'ERC1155: address zero is not a valid owner');\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    _setApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      'ERC1155: caller is not token owner nor approved'\\n    );\\n    _safeTransferFrom(from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      'ERC1155: caller is not token owner nor approved'\\n    );\\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n    _balances[id][to] += amount;\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n      _balances[id][to] += amount;\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   * substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\\n   * clients with the token type ID.\\n   *\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n   * interpreted by clients as\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n   * for token type ID 0x4cce0.\\n   *\\n   * See {uri}.\\n   *\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\n   * this function emits no events.\\n   */\\n  function _setURI(string memory newuri) internal virtual {\\n    _uri = newuri;\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: mint to the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _balances[id][to] += amount;\\n    emit TransferSingle(operator, address(0), to, id, amount);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: mint to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      _balances[ids[i]][to] += amounts[i];\\n    }\\n\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens of token type `id` from `from`\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `from` must have at least `amount` tokens of token type `id`.\\n   */\\n  function _burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), 'ERC1155: burn from the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n\\n    emit TransferSingle(operator, from, address(0), id, amount);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   */\\n  function _burnBatch(\\n    address from,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal virtual {\\n    require(from != address(0), 'ERC1155: burn from the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n    }\\n\\n    emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\\n  }\\n\\n  /**\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function _setApprovalForAll(\\n    address owner,\\n    address operator,\\n    bool approved\\n  ) internal virtual {\\n    require(owner != operator, 'ERC1155: setting approval status for self');\\n    _operatorApprovals[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x659f303c7337f284f2464fd5abb5aedb6440afb3fbcd6aab1ca8b28631c807cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":509,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2691,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":806,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"_owner","offset":0,"slot":"151","type":"t_address"},{"astId":130,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":3021,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":3516,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"_balances","offset":0,"slot":"251","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":3522,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"_operatorApprovals","offset":0,"slot":"252","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3524,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"_uri","offset":0,"slot":"253","type":"t_string_storage"},{"astId":4719,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"__gap","offset":0,"slot":"254","type":"t_array(t_uint256)47_storage"},{"astId":3334,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"_totalSupply","offset":0,"slot":"301","type":"t_mapping(t_uint256,t_uint256)"},{"astId":3485,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"__gap","offset":0,"slot":"302","type":"t_array(t_uint256)49_storage"},{"astId":3303,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"name","offset":0,"slot":"351","type":"t_string_storage"},{"astId":3305,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"symbol","offset":0,"slot":"352","type":"t_string_storage"},{"astId":3307,"contract":"contracts/HYDNSeal.sol:HYDNSeal","label":"currentAuditId","offset":0,"slot":"353","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HYDNSealStorage.sol":{"HYDNSealStorage":{"abi":[{"inputs":[],"name":"currentAuditId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"currentAuditId()":"9458e718","name()":"06fdde03","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"currentAuditId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HYDNSealStorage.sol\":\"HYDNSealStorage\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"contracts/HYDNSealStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n//\\n\\nabstract contract HYDNSealStorage {\\n  string public name;\\n  string public symbol;\\n  uint256 public currentAuditId;\\n}\\n\",\"keccak256\":\"0xc76deeabe9be9179fff8e767894f0884e2e409b1e28d4875bc84d39df2f65b1a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3303,"contract":"contracts/HYDNSealStorage.sol:HYDNSealStorage","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3305,"contract":"contracts/HYDNSealStorage.sol:HYDNSealStorage","label":"symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3307,"contract":"contracts/HYDNSealStorage.sol:HYDNSealStorage","label":"currentAuditId","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/openzepplin/ERC1155SupplyUpgradeable.sol":{"HYDNERC1155SupplyUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted.","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply(uint256)":{"details":"Total amount of tokens in with a given id."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","exists(uint256)":"4f558e79","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","totalSupply(uint256)":"bd85b039","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/openzepplin/ERC1155SupplyUpgradeable.sol\":\"HYDNERC1155SupplyUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/openzepplin/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n// Hydn: Copy of OpenZeppelin - only change is to reference the modified ERC1155Upgradeable reference\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\\nimport './ERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract HYDNERC1155SupplyUpgradeable is Initializable, HYDNERC1155Upgradeable {\\n  function __ERC1155Supply_init() internal onlyInitializing {}\\n\\n  function __ERC1155Supply_init_unchained() internal onlyInitializing {}\\n\\n  mapping(uint256 => uint256) private _totalSupply;\\n\\n  /**\\n   * @dev Total amount of tokens in with a given id.\\n   */\\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\\n    return _totalSupply[id];\\n  }\\n\\n  /**\\n   * @dev Indicates whether any token exist with a given id, or not.\\n   */\\n  function exists(uint256 id) public view virtual returns (bool) {\\n    return HYDNERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n  }\\n\\n  /**\\n   * @dev See {ERC1155-_beforeTokenTransfer}.\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    if (from == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        _totalSupply[ids[i]] += amounts[i];\\n      }\\n    }\\n\\n    if (to == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        uint256 id = ids[i];\\n        uint256 amount = amounts[i];\\n        uint256 supply = _totalSupply[id];\\n        require(supply >= amount, 'ERC1155: burn amount exceeds totalSupply');\\n        unchecked {\\n          _totalSupply[id] = supply - amount;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cccb13e902780fc616e9508ebba5a0b026f26fbba95e82bda9f40b543708dd7\",\"license\":\"MIT\"},\"contracts/openzepplin/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n// Hydn: Copy of OpenZeppelin - change are:\\n//  - _mint function do not call the _doSafeTransferAcceptanceCheck hook as the token is not transferable we don't want to check if the contract accept it or not\\n\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract HYDNERC1155Upgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  ERC165Upgradeable,\\n  IERC1155Upgradeable,\\n  IERC1155MetadataURIUpgradeable\\n{\\n  using AddressUpgradeable for address;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n  string private _uri;\\n\\n  /**\\n   * @dev See {_setURI}.\\n   */\\n  function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n    __ERC1155_init_unchained(uri_);\\n  }\\n\\n  function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n    _setURI(uri_);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * This implementation returns the same URI for *all* token types. It relies\\n   * on the token type ID substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual override returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), 'ERC1155: address zero is not a valid owner');\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    _setApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      'ERC1155: caller is not token owner nor approved'\\n    );\\n    _safeTransferFrom(from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      'ERC1155: caller is not token owner nor approved'\\n    );\\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n    _balances[id][to] += amount;\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n      _balances[id][to] += amount;\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   * substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\\n   * clients with the token type ID.\\n   *\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n   * interpreted by clients as\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n   * for token type ID 0x4cce0.\\n   *\\n   * See {uri}.\\n   *\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\n   * this function emits no events.\\n   */\\n  function _setURI(string memory newuri) internal virtual {\\n    _uri = newuri;\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: mint to the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _balances[id][to] += amount;\\n    emit TransferSingle(operator, address(0), to, id, amount);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: mint to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      _balances[ids[i]][to] += amounts[i];\\n    }\\n\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens of token type `id` from `from`\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `from` must have at least `amount` tokens of token type `id`.\\n   */\\n  function _burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), 'ERC1155: burn from the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n\\n    emit TransferSingle(operator, from, address(0), id, amount);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   */\\n  function _burnBatch(\\n    address from,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal virtual {\\n    require(from != address(0), 'ERC1155: burn from the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n    }\\n\\n    emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\\n  }\\n\\n  /**\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function _setApprovalForAll(\\n    address owner,\\n    address operator,\\n    bool approved\\n  ) internal virtual {\\n    require(owner != operator, 'ERC1155: setting approval status for self');\\n    _operatorApprovals[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x659f303c7337f284f2464fd5abb5aedb6440afb3fbcd6aab1ca8b28631c807cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2691,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3021,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":3516,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":3522,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3524,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":4719,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"},{"astId":3334,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"_totalSupply","offset":0,"slot":"151","type":"t_mapping(t_uint256,t_uint256)"},{"astId":3485,"contract":"contracts/openzepplin/ERC1155SupplyUpgradeable.sol:HYDNERC1155SupplyUpgradeable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/openzepplin/ERC1155Upgradeable.sol":{"HYDNERC1155Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611b65806100206000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461018657600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004611265565b610199565b6040519081526020015b60405180910390f35b6100c56100c03660046112c1565b61027b565b60405190151581526020016100a9565b6100e86100e33660046112e5565b61035e565b6040516100a99190611322565b610108610103366004611538565b6103f2565b005b61011d6101183660046115f2565b6104bb565b6040516100a99190611706565b610108610138366004611719565b610613565b6100c561014b366004611758565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260666020908152604080832093909416825291909152205460ff1690565b61010861019436600461178d565b610622565b600073ffffffffffffffffffffffffffffffffffffffff8316610243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061030e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061027557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610275565b60606067805461036d906117ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610399906117ea565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff851633148061041b575061041b853361014b565b6104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b485858585856106e4565b5050505050565b6060815183511461054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161023a565b6000835167ffffffffffffffff81111561056a5761056a611373565b604051908082528060200260200182016040528015610593578160200160208202803683370190505b50905060005b845181101561060b576105de8582815181106105b7576105b761183d565b60200260200101518583815181106105d1576105d161183d565b6020026020010151610199565b8282815181106105f0576105f061183d565b60209081029190910101526106048161189b565b9050610599565b509392505050565b61061e338383610a21565b5050565b73ffffffffffffffffffffffffffffffffffffffff851633148061064b575061064b853361014b565b6106d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b48585858585610b74565b8151835114610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff8416610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b3360005b845181101561098c5760008582815181106108395761083961183d565b6020026020010151905060008583815181106108575761085761183d565b602090810291909101810151600084815260658352604080822073ffffffffffffffffffffffffffffffffffffffff8e168352909352919091205490915081811015610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600083815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e8116855292528083208585039055908b168252812080548492906109719084906118d3565b92505081905550505050806109859061189b565b905061081c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610a039291906118e6565b60405180910390a4610a19818787878787610db6565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526066602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8416610c17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b336000610c2385611049565b90506000610c3085611049565b9050600086815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8c16845290915290205485811015610cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600087815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8d8116855292528083208985039055908a16825281208054889290610d3e9084906118d3565b9091555050604080518881526020810188905273ffffffffffffffffffffffffffffffffffffffff808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610dab848a8a8a8a8a611094565b505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c8190610e2d908990899088908890889060040161195e565b6020604051808303816000875af1925050508015610e86575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610e83918101906119db565b60015b610f6f57610e926119f8565b806308c379a003610ee55750610ea6611a14565b80610eb15750610ee7565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023a9190611322565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161023a565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b50505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106110835761108361183d565b602090810291909101015292915050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e619061110b9089908990889088908890600401611acd565b6020604051808303816000875af1925050508015611164575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611161918101906119db565b60015b61117057610e926119f8565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027557600080fd5b6000806040838503121561127857600080fd5b6112828484611241565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146112be57600080fd5b50565b6000602082840312156112d357600080fd5b81356112de81611290565b9392505050565b6000602082840312156112f757600080fd5b5035919050565b60005b83811015611319578181015183820152602001611301565b50506000910152565b60208152600082518060208401526113418160408501602087016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156113e6576113e6611373565b6040525050565b600067ffffffffffffffff82111561140757611407611373565b5060051b60200190565b600082601f83011215801561142557600080fd5b823567ffffffffffffffff81111561143f5761143f611373565b8060051b60405161145360208301826113a2565b91825260208186018101929081018784111561146e57600080fd5b6020870192505b83831015611497578415611487578485fd5b8235815260209283019201611475565b509695505050505050565b600082601f8301121580156114b657600080fd5b50813567ffffffffffffffff8111156114d1576114d1611373565b60405161150660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601826113a2565b81815284602083860101111561151b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312801561155157600080fd5b5061155c8787611241565b945061156b8760208801611241565b9350604086013567ffffffffffffffff81111561158757600080fd5b61159388828901611411565b935050606086013567ffffffffffffffff8111156115b057600080fd5b6115bc88828901611411565b925050608086013567ffffffffffffffff8111156115d957600080fd5b6115e5888289016114a2565b9150509295509295909350565b600080604083850312801561160657600080fd5b50823567ffffffffffffffff81111561161e57600080fd5b8301601f8101851361162f57600080fd5b803561163a816113ed565b60405161164782826113a2565b80915082815260208101915060208360051b85010192508783111561166b57600080fd5b6020840193505b82841015611695576116848885611241565b825260209384019390910190611672565b9450505050602083013567ffffffffffffffff8111156116b457600080fd5b6116c085828601611411565b9150509250929050565b600081518084526020840193506020830160005b828110156116fc5781518652602095860195909101906001016116de565b5093949350505050565b6020815260006112de60208301846116ca565b600080604083850312801561172d57600080fd5b506117388484611241565b91506020830135801515811461174d57600080fd5b809150509250929050565b6000806040838503121561176b57600080fd5b6117758484611241565b91506117848460208501611241565b90509250929050565b600080600080600060a08688031280156117a657600080fd5b506117b18787611241565b94506117c08760208801611241565b93506040860135925060608601359150608086013567ffffffffffffffff8111156115d957600080fd5b600181811c908216806117fe57607f821691505b602082108103611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118cc576118cc61186c565b5060010190565b808201808211156102755761027561186c565b6040815260006118f960408301856116ca565b828103602084015261190b81856116ca565b95945050505050565b6000815180845261192c8160208601602086016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006119a960a08301866116ca565b82810360608401526119bb81866116ca565b905082810360808401526119cf8185611914565b98975050505050505050565b6000602082840312156119ed57600080fd5b81516112de81611290565b600060033d1115611a115760046000803e5060005160e01c5b90565b600060443d1015611a225790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d602482011167ffffffffffffffff82111715611a6a57505090565b808201805167ffffffffffffffff811115611a86575050505090565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d8501016020828401011115611abe575050505090565b61060b602082850101856113a2565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015283604082015282606082015260a060808201526000611b2460a0830184611914565b97965050505050505056fea26469706673582212205da742920da09a235456cc1bff053a2ceedd34295949f1022fee11e86ce4241e64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B65 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x199 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C1 JUMP JUMPDEST PUSH2 0x27B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x1538 JUMP JUMPDEST PUSH2 0x3F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x15F2 JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1706 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1719 JUMP JUMPDEST PUSH2 0x613 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x1758 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x622 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x243 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x30E JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x275 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x275 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x36D SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3E6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3BB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3E6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3C9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x41B JUMPI POP PUSH2 0x41B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x6E4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH2 0x56A PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x593 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH2 0x5DE DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B7 JUMPI PUSH2 0x5B7 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D1 JUMPI PUSH2 0x5D1 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x199 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5F0 JUMPI PUSH2 0x5F0 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x604 DUP2 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x599 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x61E CALLER DUP4 DUP4 PUSH2 0xA21 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x64B JUMPI POP PUSH2 0x64B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xB74 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x818 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x98C JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x839 JUMPI PUSH2 0x839 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x857 JUMPI PUSH2 0x857 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x971 SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x985 SWAP1 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x81C JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA03 SWAP3 SWAP2 SWAP1 PUSH2 0x18E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA19 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xDB6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xADC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0xC23 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC30 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xCF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xD3E SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDAB DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1094 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0xE2D SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x195E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE86 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE83 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF6F JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0xEE5 JUMPI POP PUSH2 0xEA6 PUSH2 0x1A14 JUMP JUMPDEST DUP1 PUSH2 0xEB1 JUMPI POP PUSH2 0xEE7 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2045524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1083 JUMPI PUSH2 0x1083 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x110B SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1164 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1161 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1170 JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1282 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x12BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1319 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1301 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1341 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x13E6 JUMPI PUSH2 0x13E6 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1407 JUMPI PUSH2 0x1407 PUSH2 0x1373 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x1425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x143F JUMPI PUSH2 0x143F PUSH2 0x1373 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH2 0x1453 PUSH1 0x20 DUP4 ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD DUP8 DUP5 GT ISZERO PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x1497 JUMPI DUP5 ISZERO PUSH2 0x1487 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1475 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x14B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x14D1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1506 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x151B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x1551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x155C DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x156B DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1593 DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15BC DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E5 DUP9 DUP3 DUP10 ADD PUSH2 0x14A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x1606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x161E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x162F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x163A DUP2 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1647 DUP3 DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP1 SWAP2 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 POP PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 POP DUP8 DUP4 GT ISZERO PUSH2 0x166B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x1695 JUMPI PUSH2 0x1684 DUP9 DUP6 PUSH2 0x1241 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1672 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C0 DUP6 DUP3 DUP7 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16FC JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x16DE JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12DE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16CA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x172D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1738 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x174D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1775 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH2 0x1784 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x17A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B1 DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x17C0 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x17FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1837 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x18CC JUMPI PUSH2 0x18CC PUSH2 0x186C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x275 JUMPI PUSH2 0x275 PUSH2 0x186C JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18F9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190B DUP2 DUP6 PUSH2 0x16CA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x192C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x19A9 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x19BB DUP2 DUP7 PUSH2 0x16CA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x19CF DUP2 DUP6 PUSH2 0x1914 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x1A11 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x1A22 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD RETURNDATASIZE PUSH1 0x24 DUP3 ADD GT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1A6A JUMPI POP POP SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A86 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE DUP6 ADD ADD PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x1ABE JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x60B PUSH1 0x20 DUP3 DUP6 ADD ADD DUP6 PUSH2 0x13A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1B24 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xA7 TIMESTAMP SWAP3 0xD LOG0 SWAP11 0x23 SLOAD JUMP 0xCC SHL SELFDESTRUCT SDIV GASPRICE 0x2C 0xEE 0xDD CALLVALUE 0x29 MSIZE 0x49 CALL MUL 0x2F 0xEE GT 0xE8 PUSH13 0xE4241E64736F6C634300081000 CALLER ","sourceMap":"1234:15887:20:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_4558":{"entryPoint":null,"id":4558,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_4714":{"entryPoint":4169,"id":4714,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_4539":{"entryPoint":null,"id":4539,"parameterSlots":6,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_4686":{"entryPoint":3510,"id":4686,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_4621":{"entryPoint":4244,"id":4621,"parameterSlots":6,"returnSlots":0},"@_msgSender_2677":{"entryPoint":null,"id":2677,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_4049":{"entryPoint":1764,"id":4049,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_3914":{"entryPoint":2932,"id":3914,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_4520":{"entryPoint":2593,"id":4520,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_3684":{"entryPoint":1211,"id":3684,"parameterSlots":2,"returnSlots":1},"@balanceOf_3620":{"entryPoint":409,"id":3620,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_3719":{"entryPoint":null,"id":3719,"parameterSlots":2,"returnSlots":1},"@isContract_2425":{"entryPoint":null,"id":2425,"parameterSlots":1,"returnSlots":1},"@safeBatchTransferFrom_3797":{"entryPoint":1010,"id":3797,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_3757":{"entryPoint":1570,"id":3757,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_3701":{"entryPoint":1555,"id":3701,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3016":{"entryPoint":null,"id":3016,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3580":{"entryPoint":635,"id":3580,"parameterSlots":1,"returnSlots":1},"@uri_3592":{"entryPoint":862,"id":3592,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":4673,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":5137,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":5282,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5976,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":5432,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":6029,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":5913,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4709,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":5618,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":6619,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4837,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":5834,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":6420,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6494,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6861,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5894,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":6374,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4898,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":5101,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6355,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4862,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6122,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":5026,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":6299,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6252,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6205,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4979,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":6648,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":6676,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":4752,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17323:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"68:176:21","statements":[{"nodeType":"YulAssignment","src":"78:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"100:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"87:12:21"},"nodeType":"YulFunctionCall","src":"87:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"78:5:21"}]},{"nodeType":"YulVariableDeclaration","src":"116:20:21","value":{"name":"value","nodeType":"YulIdentifier","src":"131:5:21"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"120:7:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"222:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"231:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"234:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"224:6:21"},"nodeType":"YulFunctionCall","src":"224:12:21"},"nodeType":"YulExpressionStatement","src":"224:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"158:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"169:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"176:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"165:3:21"},"nodeType":"YulFunctionCall","src":"165:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"155:2:21"},"nodeType":"YulFunctionCall","src":"155:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"148:6:21"},"nodeType":"YulFunctionCall","src":"148:73:21"},"nodeType":"YulIf","src":"145:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"50:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"58:5:21","type":""}],"src":"14:230:21"},{"body":{"nodeType":"YulBlock","src":"336:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"382:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"391:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"394:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"384:6:21"},"nodeType":"YulFunctionCall","src":"384:12:21"},"nodeType":"YulExpressionStatement","src":"384:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"357:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"366:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"353:3:21"},"nodeType":"YulFunctionCall","src":"353:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"378:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"349:3:21"},"nodeType":"YulFunctionCall","src":"349:32:21"},"nodeType":"YulIf","src":"346:52:21"},{"nodeType":"YulAssignment","src":"407:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"436:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"447:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"417:18:21"},"nodeType":"YulFunctionCall","src":"417:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:21"}]},{"nodeType":"YulAssignment","src":"464:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"491:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"502:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"487:3:21"},"nodeType":"YulFunctionCall","src":"487:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"474:12:21"},"nodeType":"YulFunctionCall","src":"474:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"464:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"294:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"305:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"317:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"325:6:21","type":""}],"src":"249:263:21"},{"body":{"nodeType":"YulBlock","src":"618:76:21","statements":[{"nodeType":"YulAssignment","src":"628:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"640:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"651:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"636:3:21"},"nodeType":"YulFunctionCall","src":"636:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"628:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"670:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"681:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"663:6:21"},"nodeType":"YulFunctionCall","src":"663:25:21"},"nodeType":"YulExpressionStatement","src":"663:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"587:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"598:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"609:4:21","type":""}],"src":"517:177:21"},{"body":{"nodeType":"YulBlock","src":"743:133:21","statements":[{"body":{"nodeType":"YulBlock","src":"854:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"863:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"866:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"856:6:21"},"nodeType":"YulFunctionCall","src":"856:12:21"},"nodeType":"YulExpressionStatement","src":"856:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"766:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"777:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"784:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"773:3:21"},"nodeType":"YulFunctionCall","src":"773:78:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"763:2:21"},"nodeType":"YulFunctionCall","src":"763:89:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"756:6:21"},"nodeType":"YulFunctionCall","src":"756:97:21"},"nodeType":"YulIf","src":"753:117:21"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"732:5:21","type":""}],"src":"699:177:21"},{"body":{"nodeType":"YulBlock","src":"950:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"996:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1005:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1008:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"998:6:21"},"nodeType":"YulFunctionCall","src":"998:12:21"},"nodeType":"YulExpressionStatement","src":"998:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"971:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"980:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"967:3:21"},"nodeType":"YulFunctionCall","src":"967:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"992:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"963:3:21"},"nodeType":"YulFunctionCall","src":"963:32:21"},"nodeType":"YulIf","src":"960:52:21"},{"nodeType":"YulVariableDeclaration","src":"1021:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1047:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1034:12:21"},"nodeType":"YulFunctionCall","src":"1034:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1025:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1090:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"1066:23:21"},"nodeType":"YulFunctionCall","src":"1066:30:21"},"nodeType":"YulExpressionStatement","src":"1066:30:21"},{"nodeType":"YulAssignment","src":"1105:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1115:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1105:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"916:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"927:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"939:6:21","type":""}],"src":"881:245:21"},{"body":{"nodeType":"YulBlock","src":"1226:92:21","statements":[{"nodeType":"YulAssignment","src":"1236:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1248:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1259:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1244:3:21"},"nodeType":"YulFunctionCall","src":"1244:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1236:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1278:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1303:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1296:6:21"},"nodeType":"YulFunctionCall","src":"1296:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1289:6:21"},"nodeType":"YulFunctionCall","src":"1289:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1271:6:21"},"nodeType":"YulFunctionCall","src":"1271:41:21"},"nodeType":"YulExpressionStatement","src":"1271:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1195:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1206:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1217:4:21","type":""}],"src":"1131:187:21"},{"body":{"nodeType":"YulBlock","src":"1393:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"1439:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1448:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1451:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1441:6:21"},"nodeType":"YulFunctionCall","src":"1441:12:21"},"nodeType":"YulExpressionStatement","src":"1441:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1414:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1423:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1410:3:21"},"nodeType":"YulFunctionCall","src":"1410:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1435:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1406:3:21"},"nodeType":"YulFunctionCall","src":"1406:32:21"},"nodeType":"YulIf","src":"1403:52:21"},{"nodeType":"YulAssignment","src":"1464:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1487:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1474:12:21"},"nodeType":"YulFunctionCall","src":"1474:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1464:6:21"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1359:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1370:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1382:6:21","type":""}],"src":"1323:180:21"},{"body":{"nodeType":"YulBlock","src":"1574:184:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1584:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1593:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1588:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1653:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1678:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"1683:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1674:3:21"},"nodeType":"YulFunctionCall","src":"1674:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1697:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"1702:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1693:3:21"},"nodeType":"YulFunctionCall","src":"1693:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1687:5:21"},"nodeType":"YulFunctionCall","src":"1687:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1667:6:21"},"nodeType":"YulFunctionCall","src":"1667:39:21"},"nodeType":"YulExpressionStatement","src":"1667:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1614:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"1617:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1611:2:21"},"nodeType":"YulFunctionCall","src":"1611:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1625:19:21","statements":[{"nodeType":"YulAssignment","src":"1627:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1636:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"1639:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1632:3:21"},"nodeType":"YulFunctionCall","src":"1632:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1627:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"1607:3:21","statements":[]},"src":"1603:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1736:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1732:3:21"},"nodeType":"YulFunctionCall","src":"1732:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"1750:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1725:6:21"},"nodeType":"YulFunctionCall","src":"1725:27:21"},"nodeType":"YulExpressionStatement","src":"1725:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1552:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1557:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"1562:6:21","type":""}],"src":"1508:250:21"},{"body":{"nodeType":"YulBlock","src":"1884:334:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1901:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1894:6:21"},"nodeType":"YulFunctionCall","src":"1894:21:21"},"nodeType":"YulExpressionStatement","src":"1894:21:21"},{"nodeType":"YulVariableDeclaration","src":"1924:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1944:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1938:5:21"},"nodeType":"YulFunctionCall","src":"1938:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1928:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1971:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1967:3:21"},"nodeType":"YulFunctionCall","src":"1967:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"1987:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1960:6:21"},"nodeType":"YulFunctionCall","src":"1960:34:21"},"nodeType":"YulExpressionStatement","src":"1960:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2042:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2050:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2038:3:21"},"nodeType":"YulFunctionCall","src":"2038:15:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2059:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2070:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2055:3:21"},"nodeType":"YulFunctionCall","src":"2055:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"2075:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2003:34:21"},"nodeType":"YulFunctionCall","src":"2003:79:21"},"nodeType":"YulExpressionStatement","src":"2003:79:21"},{"nodeType":"YulAssignment","src":"2091:121:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2107:9:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2126:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2134:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:21"},"nodeType":"YulFunctionCall","src":"2122:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"2139:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:21"},"nodeType":"YulFunctionCall","src":"2118:88:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2103:3:21"},"nodeType":"YulFunctionCall","src":"2103:104:21"},{"kind":"number","nodeType":"YulLiteral","src":"2209:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2099:3:21"},"nodeType":"YulFunctionCall","src":"2099:113:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2091:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1853:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1864:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1875:4:21","type":""}],"src":"1763:455:21"},{"body":{"nodeType":"YulBlock","src":"2255:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2272:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2275:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2265:6:21"},"nodeType":"YulFunctionCall","src":"2265:88:21"},"nodeType":"YulExpressionStatement","src":"2265:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2369:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2372:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2362:6:21"},"nodeType":"YulFunctionCall","src":"2362:15:21"},"nodeType":"YulExpressionStatement","src":"2362:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2393:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2396:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2386:6:21"},"nodeType":"YulFunctionCall","src":"2386:15:21"},"nodeType":"YulExpressionStatement","src":"2386:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2223:184:21"},{"body":{"nodeType":"YulBlock","src":"2459:261:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2469:117:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2491:6:21"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2507:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2513:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2503:3:21"},"nodeType":"YulFunctionCall","src":"2503:13:21"},{"kind":"number","nodeType":"YulLiteral","src":"2518:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2499:3:21"},"nodeType":"YulFunctionCall","src":"2499:86:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2487:3:21"},"nodeType":"YulFunctionCall","src":"2487:99:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2473:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2661:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2663:16:21"},"nodeType":"YulFunctionCall","src":"2663:18:21"},"nodeType":"YulExpressionStatement","src":"2663:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2604:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2616:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2601:2:21"},"nodeType":"YulFunctionCall","src":"2601:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2640:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2652:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2637:2:21"},"nodeType":"YulFunctionCall","src":"2637:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2598:2:21"},"nodeType":"YulFunctionCall","src":"2598:62:21"},"nodeType":"YulIf","src":"2595:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2699:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2703:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2692:6:21"},"nodeType":"YulFunctionCall","src":"2692:22:21"},"nodeType":"YulExpressionStatement","src":"2692:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2441:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"2449:4:21","type":""}],"src":"2412:308:21"},{"body":{"nodeType":"YulBlock","src":"2794:114:21","statements":[{"body":{"nodeType":"YulBlock","src":"2838:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2840:16:21"},"nodeType":"YulFunctionCall","src":"2840:18:21"},"nodeType":"YulExpressionStatement","src":"2840:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2810:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2818:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2807:2:21"},"nodeType":"YulFunctionCall","src":"2807:30:21"},"nodeType":"YulIf","src":"2804:56:21"},{"nodeType":"YulAssignment","src":"2869:33:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2885:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2888:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2881:3:21"},"nodeType":"YulFunctionCall","src":"2881:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"2897:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2877:3:21"},"nodeType":"YulFunctionCall","src":"2877:25:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2869:4:21"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2774:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2785:4:21","type":""}],"src":"2725:183:21"},{"body":{"nodeType":"YulBlock","src":"2977:758:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2987:45:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3012:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3020:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3008:3:21"},"nodeType":"YulFunctionCall","src":"3008:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3027:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3004:3:21"},"nodeType":"YulFunctionCall","src":"3004:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2997:6:21"},"nodeType":"YulFunctionCall","src":"2997:35:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2991:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3047:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3056:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3059:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3049:6:21"},"nodeType":"YulFunctionCall","src":"3049:12:21"},"nodeType":"YulExpressionStatement","src":"3049:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3044:2:21"},"nodeType":"YulIf","src":"3041:22:21"},{"nodeType":"YulVariableDeclaration","src":"3072:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3099:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3086:12:21"},"nodeType":"YulFunctionCall","src":"3086:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3076:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3149:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3151:16:21"},"nodeType":"YulFunctionCall","src":"3151:18:21"},"nodeType":"YulExpressionStatement","src":"3151:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3121:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3129:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3118:2:21"},"nodeType":"YulFunctionCall","src":"3118:30:21"},"nodeType":"YulIf","src":"3115:56:21"},{"nodeType":"YulVariableDeclaration","src":"3180:26:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3196:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3199:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3192:3:21"},"nodeType":"YulFunctionCall","src":"3192:14:21"},"variables":[{"name":"size","nodeType":"YulTypedName","src":"3184:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3215:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3235:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3229:5:21"},"nodeType":"YulFunctionCall","src":"3229:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3219:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3267:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3279:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"3285:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3275:3:21"},"nodeType":"YulFunctionCall","src":"3275:15:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3247:19:21"},"nodeType":"YulFunctionCall","src":"3247:44:21"},"nodeType":"YulExpressionStatement","src":"3247:44:21"},{"nodeType":"YulVariableDeclaration","src":"3300:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3311:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3304:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3333:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"3341:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3326:6:21"},"nodeType":"YulFunctionCall","src":"3326:22:21"},"nodeType":"YulExpressionStatement","src":"3326:22:21"},{"nodeType":"YulAssignment","src":"3357:24:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3368:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3376:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3364:3:21"},"nodeType":"YulFunctionCall","src":"3364:17:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3357:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"3390:42:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3412:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"3420:4:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3408:3:21"},"nodeType":"YulFunctionCall","src":"3408:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"3427:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3404:3:21"},"nodeType":"YulFunctionCall","src":"3404:28:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3394:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3460:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3472:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3462:6:21"},"nodeType":"YulFunctionCall","src":"3462:12:21"},"nodeType":"YulExpressionStatement","src":"3462:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3447:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"3455:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3444:2:21"},"nodeType":"YulFunctionCall","src":"3444:15:21"},"nodeType":"YulIf","src":"3441:35:21"},{"nodeType":"YulVariableDeclaration","src":"3485:28:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3500:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3508:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:21"},"nodeType":"YulFunctionCall","src":"3496:17:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3489:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3580:125:21","statements":[{"body":{"nodeType":"YulBlock","src":"3600:18:21","statements":[{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3609:2:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3613:2:21"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3602:6:21"},"nodeType":"YulFunctionCall","src":"3602:14:21"},"nodeType":"YulExpressionStatement","src":"3602:14:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3597:2:21"},"nodeType":"YulIf","src":"3594:24:21"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3638:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3656:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3643:12:21"},"nodeType":"YulFunctionCall","src":"3643:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3631:6:21"},"nodeType":"YulFunctionCall","src":"3631:30:21"},"nodeType":"YulExpressionStatement","src":"3631:30:21"},{"nodeType":"YulAssignment","src":"3674:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3685:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3690:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3681:3:21"},"nodeType":"YulFunctionCall","src":"3681:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3674:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3533:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3538:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3530:2:21"},"nodeType":"YulFunctionCall","src":"3530:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3546:25:21","statements":[{"nodeType":"YulAssignment","src":"3548:21:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3559:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3564:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3555:3:21"},"nodeType":"YulFunctionCall","src":"3555:14:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3548:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"3526:3:21","statements":[]},"src":"3522:183:21"},{"nodeType":"YulAssignment","src":"3714:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3723:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3714:5:21"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2951:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"2959:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2967:5:21","type":""}],"src":"2913:822:21"},{"body":{"nodeType":"YulBlock","src":"3792:611:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3802:45:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3827:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3835:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3823:3:21"},"nodeType":"YulFunctionCall","src":"3823:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3842:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3819:3:21"},"nodeType":"YulFunctionCall","src":"3819:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3812:6:21"},"nodeType":"YulFunctionCall","src":"3812:35:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3806:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3862:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3871:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3874:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3864:6:21"},"nodeType":"YulFunctionCall","src":"3864:12:21"},"nodeType":"YulExpressionStatement","src":"3864:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"3859:2:21"},"nodeType":"YulIf","src":"3856:22:21"},{"nodeType":"YulVariableDeclaration","src":"3887:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3914:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3901:12:21"},"nodeType":"YulFunctionCall","src":"3901:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3891:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3964:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3966:16:21"},"nodeType":"YulFunctionCall","src":"3966:18:21"},"nodeType":"YulExpressionStatement","src":"3966:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3936:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3944:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3933:2:21"},"nodeType":"YulFunctionCall","src":"3933:30:21"},"nodeType":"YulIf","src":"3930:56:21"},{"nodeType":"YulVariableDeclaration","src":"3995:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4015:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4009:5:21"},"nodeType":"YulFunctionCall","src":"4009:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3999:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4047:6:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4067:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4075:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4063:3:21"},"nodeType":"YulFunctionCall","src":"4063:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"4082:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4059:3:21"},"nodeType":"YulFunctionCall","src":"4059:90:21"},{"kind":"number","nodeType":"YulLiteral","src":"4151:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:21"},"nodeType":"YulFunctionCall","src":"4055:101:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4027:19:21"},"nodeType":"YulFunctionCall","src":"4027:130:21"},"nodeType":"YulExpressionStatement","src":"4027:130:21"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4173:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"4181:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4166:6:21"},"nodeType":"YulFunctionCall","src":"4166:22:21"},"nodeType":"YulExpressionStatement","src":"4166:22:21"},{"body":{"nodeType":"YulBlock","src":"4240:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4249:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4252:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4242:6:21"},"nodeType":"YulFunctionCall","src":"4242:12:21"},"nodeType":"YulExpressionStatement","src":"4242:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4211:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"4219:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4207:3:21"},"nodeType":"YulFunctionCall","src":"4207:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"4228:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4203:3:21"},"nodeType":"YulFunctionCall","src":"4203:30:21"},{"name":"end","nodeType":"YulIdentifier","src":"4235:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4200:2:21"},"nodeType":"YulFunctionCall","src":"4200:39:21"},"nodeType":"YulIf","src":"4197:59:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4282:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4290:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4278:3:21"},"nodeType":"YulFunctionCall","src":"4278:17:21"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4301:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4309:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:21"},"nodeType":"YulFunctionCall","src":"4297:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"4316:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4265:12:21"},"nodeType":"YulFunctionCall","src":"4265:58:21"},"nodeType":"YulExpressionStatement","src":"4265:58:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4347:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"4355:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4343:3:21"},"nodeType":"YulFunctionCall","src":"4343:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"4364:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4339:3:21"},"nodeType":"YulFunctionCall","src":"4339:30:21"},{"kind":"number","nodeType":"YulLiteral","src":"4371:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4332:6:21"},"nodeType":"YulFunctionCall","src":"4332:41:21"},"nodeType":"YulExpressionStatement","src":"4332:41:21"},{"nodeType":"YulAssignment","src":"4382:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4391:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4382:5:21"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3766:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3774:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3782:5:21","type":""}],"src":"3740:663:21"},{"body":{"nodeType":"YulBlock","src":"4605:796:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4615:43:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4633:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4642:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4629:3:21"},"nodeType":"YulFunctionCall","src":"4629:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4654:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4625:3:21"},"nodeType":"YulFunctionCall","src":"4625:33:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4619:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4673:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4682:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4685:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4675:6:21"},"nodeType":"YulFunctionCall","src":"4675:12:21"},"nodeType":"YulExpressionStatement","src":"4675:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"4670:2:21"},"nodeType":"YulIf","src":"4667:22:21"},{"nodeType":"YulAssignment","src":"4698:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4727:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4738:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4708:18:21"},"nodeType":"YulFunctionCall","src":"4708:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4698:6:21"}]},{"nodeType":"YulAssignment","src":"4755:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4788:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4799:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4784:3:21"},"nodeType":"YulFunctionCall","src":"4784:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4804:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4765:18:21"},"nodeType":"YulFunctionCall","src":"4765:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4755:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4821:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4852:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4863:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4848:3:21"},"nodeType":"YulFunctionCall","src":"4848:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4835:12:21"},"nodeType":"YulFunctionCall","src":"4835:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4825:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4910:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4919:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4922:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4912:6:21"},"nodeType":"YulFunctionCall","src":"4912:12:21"},"nodeType":"YulExpressionStatement","src":"4912:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4882:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4890:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4879:2:21"},"nodeType":"YulFunctionCall","src":"4879:30:21"},"nodeType":"YulIf","src":"4876:50:21"},{"nodeType":"YulAssignment","src":"4935:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4978:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4989:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4974:3:21"},"nodeType":"YulFunctionCall","src":"4974:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4998:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4945:28:21"},"nodeType":"YulFunctionCall","src":"4945:61:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4935:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5015:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5048:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5059:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5044:3:21"},"nodeType":"YulFunctionCall","src":"5044:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5031:12:21"},"nodeType":"YulFunctionCall","src":"5031:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5019:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5108:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5117:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5120:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5110:6:21"},"nodeType":"YulFunctionCall","src":"5110:12:21"},"nodeType":"YulExpressionStatement","src":"5110:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5078:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5088:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5075:2:21"},"nodeType":"YulFunctionCall","src":"5075:32:21"},"nodeType":"YulIf","src":"5072:52:21"},{"nodeType":"YulAssignment","src":"5133:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5176:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5187:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:21"},"nodeType":"YulFunctionCall","src":"5172:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5198:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5143:28:21"},"nodeType":"YulFunctionCall","src":"5143:63:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5133:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5215:49:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5248:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5259:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5244:3:21"},"nodeType":"YulFunctionCall","src":"5244:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5231:12:21"},"nodeType":"YulFunctionCall","src":"5231:33:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5219:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5309:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5318:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5321:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5311:6:21"},"nodeType":"YulFunctionCall","src":"5311:12:21"},"nodeType":"YulExpressionStatement","src":"5311:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5279:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5289:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5276:2:21"},"nodeType":"YulFunctionCall","src":"5276:32:21"},"nodeType":"YulIf","src":"5273:52:21"},{"nodeType":"YulAssignment","src":"5334:61:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5365:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5376:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5361:3:21"},"nodeType":"YulFunctionCall","src":"5361:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5387:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5344:16:21"},"nodeType":"YulFunctionCall","src":"5344:51:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5334:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4539:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4550:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4562:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4570:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4578:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4586:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4594:6:21","type":""}],"src":"4408:993:21"},{"body":{"nodeType":"YulBlock","src":"5543:1135:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5553:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5571:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5580:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5567:3:21"},"nodeType":"YulFunctionCall","src":"5567:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5592:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5563:3:21"},"nodeType":"YulFunctionCall","src":"5563:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5557:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5610:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5619:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5622:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5612:6:21"},"nodeType":"YulFunctionCall","src":"5612:12:21"},"nodeType":"YulExpressionStatement","src":"5612:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"5607:2:21"},"nodeType":"YulIf","src":"5604:22:21"},{"nodeType":"YulVariableDeclaration","src":"5635:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5662:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5649:12:21"},"nodeType":"YulFunctionCall","src":"5649:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5639:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5715:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5724:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5727:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5717:6:21"},"nodeType":"YulFunctionCall","src":"5717:12:21"},"nodeType":"YulExpressionStatement","src":"5717:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5687:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5695:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5684:2:21"},"nodeType":"YulFunctionCall","src":"5684:30:21"},"nodeType":"YulIf","src":"5681:50:21"},{"nodeType":"YulVariableDeclaration","src":"5740:38:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5760:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5771:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5756:3:21"},"nodeType":"YulFunctionCall","src":"5756:22:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5744:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5832:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5841:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5844:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5834:6:21"},"nodeType":"YulFunctionCall","src":"5834:12:21"},"nodeType":"YulExpressionStatement","src":"5834:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5805:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"5815:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5801:3:21"},"nodeType":"YulFunctionCall","src":"5801:19:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5822:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5797:3:21"},"nodeType":"YulFunctionCall","src":"5797:33:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5790:6:21"},"nodeType":"YulFunctionCall","src":"5790:41:21"},"nodeType":"YulIf","src":"5787:61:21"},{"nodeType":"YulVariableDeclaration","src":"5857:36:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5884:8:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5871:12:21"},"nodeType":"YulFunctionCall","src":"5871:22:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5861:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5902:59:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5954:6:21"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"5914:39:21"},"nodeType":"YulFunctionCall","src":"5914:47:21"},"variables":[{"name":"size","nodeType":"YulTypedName","src":"5906:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5970:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5990:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5984:5:21"},"nodeType":"YulFunctionCall","src":"5984:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5974:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6022:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"6030:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6002:19:21"},"nodeType":"YulFunctionCall","src":"6002:33:21"},"nodeType":"YulExpressionStatement","src":"6002:33:21"},{"nodeType":"YulVariableDeclaration","src":"6044:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6055:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6048:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6077:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"6085:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6070:6:21"},"nodeType":"YulFunctionCall","src":"6070:22:21"},"nodeType":"YulExpressionStatement","src":"6070:22:21"},{"nodeType":"YulAssignment","src":"6101:24:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6112:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6120:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6108:3:21"},"nodeType":"YulFunctionCall","src":"6108:17:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6101:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"6134:54:21","value":{"arguments":[{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6156:8:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6170:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"6173:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6166:3:21"},"nodeType":"YulFunctionCall","src":"6166:14:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6152:3:21"},"nodeType":"YulFunctionCall","src":"6152:29:21"},{"kind":"number","nodeType":"YulLiteral","src":"6183:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6148:3:21"},"nodeType":"YulFunctionCall","src":"6148:40:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6138:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6220:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6229:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6232:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6222:6:21"},"nodeType":"YulFunctionCall","src":"6222:12:21"},"nodeType":"YulExpressionStatement","src":"6222:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6203:6:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6211:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6200:2:21"},"nodeType":"YulFunctionCall","src":"6200:19:21"},"nodeType":"YulIf","src":"6197:39:21"},{"nodeType":"YulVariableDeclaration","src":"6245:30:21","value":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6260:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"6270:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6256:3:21"},"nodeType":"YulFunctionCall","src":"6256:19:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6249:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6342:103:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6363:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6387:3:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6392:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6368:18:21"},"nodeType":"YulFunctionCall","src":"6368:32:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6356:6:21"},"nodeType":"YulFunctionCall","src":"6356:45:21"},"nodeType":"YulExpressionStatement","src":"6356:45:21"},{"nodeType":"YulAssignment","src":"6414:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6425:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6430:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6421:3:21"},"nodeType":"YulFunctionCall","src":"6421:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6414:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6295:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6300:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6292:2:21"},"nodeType":"YulFunctionCall","src":"6292:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6308:25:21","statements":[{"nodeType":"YulAssignment","src":"6310:21:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6321:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6326:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6317:3:21"},"nodeType":"YulFunctionCall","src":"6317:14:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6310:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"6288:3:21","statements":[]},"src":"6284:161:21"},{"nodeType":"YulAssignment","src":"6454:16:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6464:6:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6454:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"6479:50:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6512:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6523:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6508:3:21"},"nodeType":"YulFunctionCall","src":"6508:20:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6495:12:21"},"nodeType":"YulFunctionCall","src":"6495:34:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6483:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6574:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6583:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6586:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6576:6:21"},"nodeType":"YulFunctionCall","src":"6576:12:21"},"nodeType":"YulExpressionStatement","src":"6576:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6544:8:21"},{"kind":"number","nodeType":"YulLiteral","src":"6554:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6541:2:21"},"nodeType":"YulFunctionCall","src":"6541:32:21"},"nodeType":"YulIf","src":"6538:52:21"},{"nodeType":"YulAssignment","src":"6599:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6642:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6653:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6638:3:21"},"nodeType":"YulFunctionCall","src":"6638:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6664:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6609:28:21"},"nodeType":"YulFunctionCall","src":"6609:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6599:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5501:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5512:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5524:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5532:6:21","type":""}],"src":"5406:1272:21"},{"body":{"nodeType":"YulBlock","src":"6744:359:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6754:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6774:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6768:5:21"},"nodeType":"YulFunctionCall","src":"6768:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6758:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6796:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6801:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6789:6:21"},"nodeType":"YulFunctionCall","src":"6789:19:21"},"nodeType":"YulExpressionStatement","src":"6789:19:21"},{"nodeType":"YulAssignment","src":"6817:21:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6828:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6833:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6824:3:21"},"nodeType":"YulFunctionCall","src":"6824:14:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6817:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"6847:30:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6865:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"6872:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6861:3:21"},"nodeType":"YulFunctionCall","src":"6861:16:21"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6851:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6886:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6895:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6890:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6954:124:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6975:3:21"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6986:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6980:5:21"},"nodeType":"YulFunctionCall","src":"6980:13:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6968:6:21"},"nodeType":"YulFunctionCall","src":"6968:26:21"},"nodeType":"YulExpressionStatement","src":"6968:26:21"},{"nodeType":"YulAssignment","src":"7007:21:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7018:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7023:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7014:3:21"},"nodeType":"YulFunctionCall","src":"7014:14:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7007:3:21"}]},{"nodeType":"YulAssignment","src":"7041:27:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7055:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7063:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7051:3:21"},"nodeType":"YulFunctionCall","src":"7051:17:21"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7041:6:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6916:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"6919:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6913:2:21"},"nodeType":"YulFunctionCall","src":"6913:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6927:18:21","statements":[{"nodeType":"YulAssignment","src":"6929:14:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6938:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"6941:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6934:3:21"},"nodeType":"YulFunctionCall","src":"6934:9:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6929:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"6909:3:21","statements":[]},"src":"6905:173:21"},{"nodeType":"YulAssignment","src":"7087:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"7094:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7087:3:21"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6721:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6728:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6736:3:21","type":""}],"src":"6683:420:21"},{"body":{"nodeType":"YulBlock","src":"7259:110:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7276:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7287:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7269:6:21"},"nodeType":"YulFunctionCall","src":"7269:21:21"},"nodeType":"YulExpressionStatement","src":"7269:21:21"},{"nodeType":"YulAssignment","src":"7299:64:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7336:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7348:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7359:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7344:3:21"},"nodeType":"YulFunctionCall","src":"7344:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"7307:28:21"},"nodeType":"YulFunctionCall","src":"7307:56:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7299:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7228:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7239:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7250:4:21","type":""}],"src":"7108:261:21"},{"body":{"nodeType":"YulBlock","src":"7458:293:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7468:42:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7486:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7495:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7482:3:21"},"nodeType":"YulFunctionCall","src":"7482:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7507:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7478:3:21"},"nodeType":"YulFunctionCall","src":"7478:32:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7472:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7525:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7534:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7537:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7527:6:21"},"nodeType":"YulFunctionCall","src":"7527:12:21"},"nodeType":"YulExpressionStatement","src":"7527:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"7522:2:21"},"nodeType":"YulIf","src":"7519:22:21"},{"nodeType":"YulAssignment","src":"7550:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7579:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7590:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7560:18:21"},"nodeType":"YulFunctionCall","src":"7560:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7550:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"7607:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7637:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7648:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7633:3:21"},"nodeType":"YulFunctionCall","src":"7633:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7620:12:21"},"nodeType":"YulFunctionCall","src":"7620:32:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7611:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7705:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7714:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7717:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7707:6:21"},"nodeType":"YulFunctionCall","src":"7707:12:21"},"nodeType":"YulExpressionStatement","src":"7707:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7674:5:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7695:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7688:6:21"},"nodeType":"YulFunctionCall","src":"7688:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7681:6:21"},"nodeType":"YulFunctionCall","src":"7681:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7671:2:21"},"nodeType":"YulFunctionCall","src":"7671:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7664:6:21"},"nodeType":"YulFunctionCall","src":"7664:40:21"},"nodeType":"YulIf","src":"7661:60:21"},{"nodeType":"YulAssignment","src":"7730:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"7740:5:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7730:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7416:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7427:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7439:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7447:6:21","type":""}],"src":"7374:377:21"},{"body":{"nodeType":"YulBlock","src":"7843:191:21","statements":[{"body":{"nodeType":"YulBlock","src":"7889:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7898:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7901:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7891:6:21"},"nodeType":"YulFunctionCall","src":"7891:12:21"},"nodeType":"YulExpressionStatement","src":"7891:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7864:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7873:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7860:3:21"},"nodeType":"YulFunctionCall","src":"7860:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7885:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7856:3:21"},"nodeType":"YulFunctionCall","src":"7856:32:21"},"nodeType":"YulIf","src":"7853:52:21"},{"nodeType":"YulAssignment","src":"7914:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7943:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7954:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7924:18:21"},"nodeType":"YulFunctionCall","src":"7924:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7914:6:21"}]},{"nodeType":"YulAssignment","src":"7971:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8004:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8015:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8000:3:21"},"nodeType":"YulFunctionCall","src":"8000:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8020:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7981:18:21"},"nodeType":"YulFunctionCall","src":"7981:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7971:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7801:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7812:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7824:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7832:6:21","type":""}],"src":"7756:278:21"},{"body":{"nodeType":"YulBlock","src":"8186:498:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8196:43:21","value":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8214:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8223:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8210:3:21"},"nodeType":"YulFunctionCall","src":"8210:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8235:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8206:3:21"},"nodeType":"YulFunctionCall","src":"8206:33:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8200:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8254:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8263:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8266:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8256:6:21"},"nodeType":"YulFunctionCall","src":"8256:12:21"},"nodeType":"YulExpressionStatement","src":"8256:12:21"}]},"condition":{"name":"_1","nodeType":"YulIdentifier","src":"8251:2:21"},"nodeType":"YulIf","src":"8248:22:21"},{"nodeType":"YulAssignment","src":"8279:48:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8308:9:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8319:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8289:18:21"},"nodeType":"YulFunctionCall","src":"8289:38:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8279:6:21"}]},{"nodeType":"YulAssignment","src":"8336:57:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8369:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8380:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8365:3:21"},"nodeType":"YulFunctionCall","src":"8365:18:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8385:7:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8346:18:21"},"nodeType":"YulFunctionCall","src":"8346:47:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8336:6:21"}]},{"nodeType":"YulAssignment","src":"8402:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8429:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8440:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8425:3:21"},"nodeType":"YulFunctionCall","src":"8425:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8412:12:21"},"nodeType":"YulFunctionCall","src":"8412:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8402:6:21"}]},{"nodeType":"YulAssignment","src":"8453:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8480:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8491:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8476:3:21"},"nodeType":"YulFunctionCall","src":"8476:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8463:12:21"},"nodeType":"YulFunctionCall","src":"8463:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8453:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"8504:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8535:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8546:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8531:3:21"},"nodeType":"YulFunctionCall","src":"8531:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8518:12:21"},"nodeType":"YulFunctionCall","src":"8518:33:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8508:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8594:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8603:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8606:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8596:6:21"},"nodeType":"YulFunctionCall","src":"8596:12:21"},"nodeType":"YulExpressionStatement","src":"8596:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8566:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8574:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8563:2:21"},"nodeType":"YulFunctionCall","src":"8563:30:21"},"nodeType":"YulIf","src":"8560:50:21"},{"nodeType":"YulAssignment","src":"8619:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8650:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8661:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8646:3:21"},"nodeType":"YulFunctionCall","src":"8646:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8670:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8629:16:21"},"nodeType":"YulFunctionCall","src":"8629:49:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8619:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8120:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8131:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8143:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8151:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8159:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8167:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8175:6:21","type":""}],"src":"8039:645:21"},{"body":{"nodeType":"YulBlock","src":"8863:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8880:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8891:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8873:6:21"},"nodeType":"YulFunctionCall","src":"8873:21:21"},"nodeType":"YulExpressionStatement","src":"8873:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8914:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8925:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8910:3:21"},"nodeType":"YulFunctionCall","src":"8910:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"8930:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8903:6:21"},"nodeType":"YulFunctionCall","src":"8903:30:21"},"nodeType":"YulExpressionStatement","src":"8903:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8953:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8964:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8949:3:21"},"nodeType":"YulFunctionCall","src":"8949:18:21"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"8969:34:21","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8942:6:21"},"nodeType":"YulFunctionCall","src":"8942:62:21"},"nodeType":"YulExpressionStatement","src":"8942:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9024:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9035:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9020:3:21"},"nodeType":"YulFunctionCall","src":"9020:18:21"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9040:12:21","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9013:6:21"},"nodeType":"YulFunctionCall","src":"9013:40:21"},"nodeType":"YulExpressionStatement","src":"9013:40:21"},{"nodeType":"YulAssignment","src":"9062:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9074:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9085:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9070:3:21"},"nodeType":"YulFunctionCall","src":"9070:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9062:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8840:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8854:4:21","type":""}],"src":"8689:406:21"},{"body":{"nodeType":"YulBlock","src":"9155:413:21","statements":[{"nodeType":"YulAssignment","src":"9165:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9179:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"9182:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9175:3:21"},"nodeType":"YulFunctionCall","src":"9175:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9165:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"9196:22:21","value":{"name":"length","nodeType":"YulIdentifier","src":"9212:6:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"9200:8:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9227:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9257:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"9263:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9253:3:21"},"nodeType":"YulFunctionCall","src":"9253:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"9231:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9304:31:21","statements":[{"nodeType":"YulAssignment","src":"9306:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9320:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9328:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9316:3:21"},"nodeType":"YulFunctionCall","src":"9316:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9306:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9284:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9277:6:21"},"nodeType":"YulFunctionCall","src":"9277:26:21"},"nodeType":"YulIf","src":"9274:61:21"},{"body":{"nodeType":"YulBlock","src":"9394:168:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9415:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9418:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9408:6:21"},"nodeType":"YulFunctionCall","src":"9408:88:21"},"nodeType":"YulExpressionStatement","src":"9408:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9516:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9519:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9509:6:21"},"nodeType":"YulFunctionCall","src":"9509:15:21"},"nodeType":"YulExpressionStatement","src":"9509:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9544:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9547:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9537:6:21"},"nodeType":"YulFunctionCall","src":"9537:15:21"},"nodeType":"YulExpressionStatement","src":"9537:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9350:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9373:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9381:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9370:2:21"},"nodeType":"YulFunctionCall","src":"9370:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9347:2:21"},"nodeType":"YulFunctionCall","src":"9347:38:21"},"nodeType":"YulIf","src":"9344:218:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"9135:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9144:6:21","type":""}],"src":"9100:468:21"},{"body":{"nodeType":"YulBlock","src":"9747:237:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9764:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9775:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9757:6:21"},"nodeType":"YulFunctionCall","src":"9757:21:21"},"nodeType":"YulExpressionStatement","src":"9757:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9798:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9809:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9794:3:21"},"nodeType":"YulFunctionCall","src":"9794:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9814:2:21","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9787:6:21"},"nodeType":"YulFunctionCall","src":"9787:30:21"},"nodeType":"YulExpressionStatement","src":"9787:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9837:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9848:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9833:3:21"},"nodeType":"YulFunctionCall","src":"9833:18:21"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"9853:34:21","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9826:6:21"},"nodeType":"YulFunctionCall","src":"9826:62:21"},"nodeType":"YulExpressionStatement","src":"9826:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9908:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9919:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9904:3:21"},"nodeType":"YulFunctionCall","src":"9904:18:21"},{"hexValue":"6572206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9924:17:21","type":"","value":"er nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9897:6:21"},"nodeType":"YulFunctionCall","src":"9897:45:21"},"nodeType":"YulExpressionStatement","src":"9897:45:21"},{"nodeType":"YulAssignment","src":"9951:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9963:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9974:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9959:3:21"},"nodeType":"YulFunctionCall","src":"9959:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9951:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9724:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9738:4:21","type":""}],"src":"9573:411:21"},{"body":{"nodeType":"YulBlock","src":"10163:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10180:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10191:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10173:6:21"},"nodeType":"YulFunctionCall","src":"10173:21:21"},"nodeType":"YulExpressionStatement","src":"10173:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10214:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10225:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10210:3:21"},"nodeType":"YulFunctionCall","src":"10210:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10230:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10203:6:21"},"nodeType":"YulFunctionCall","src":"10203:30:21"},"nodeType":"YulExpressionStatement","src":"10203:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10253:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10264:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10249:3:21"},"nodeType":"YulFunctionCall","src":"10249:18:21"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"10269:34:21","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10242:6:21"},"nodeType":"YulFunctionCall","src":"10242:62:21"},"nodeType":"YulExpressionStatement","src":"10242:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10324:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10335:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10320:3:21"},"nodeType":"YulFunctionCall","src":"10320:18:21"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10340:11:21","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10313:6:21"},"nodeType":"YulFunctionCall","src":"10313:39:21"},"nodeType":"YulExpressionStatement","src":"10313:39:21"},{"nodeType":"YulAssignment","src":"10361:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10373:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10384:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10369:3:21"},"nodeType":"YulFunctionCall","src":"10369:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10361:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10140:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10154:4:21","type":""}],"src":"9989:405:21"},{"body":{"nodeType":"YulBlock","src":"10431:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10448:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10451:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10441:6:21"},"nodeType":"YulFunctionCall","src":"10441:88:21"},"nodeType":"YulExpressionStatement","src":"10441:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10545:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10548:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10538:6:21"},"nodeType":"YulFunctionCall","src":"10538:15:21"},"nodeType":"YulExpressionStatement","src":"10538:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10569:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10572:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10562:6:21"},"nodeType":"YulFunctionCall","src":"10562:15:21"},"nodeType":"YulExpressionStatement","src":"10562:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10399:184:21"},{"body":{"nodeType":"YulBlock","src":"10620:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10630:6:21"},"nodeType":"YulFunctionCall","src":"10630:88:21"},"nodeType":"YulExpressionStatement","src":"10630:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10734:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10737:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10727:6:21"},"nodeType":"YulFunctionCall","src":"10727:15:21"},"nodeType":"YulExpressionStatement","src":"10727:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10758:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10761:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10751:6:21"},"nodeType":"YulFunctionCall","src":"10751:15:21"},"nodeType":"YulExpressionStatement","src":"10751:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10588:184:21"},{"body":{"nodeType":"YulBlock","src":"10824:148:21","statements":[{"body":{"nodeType":"YulBlock","src":"10915:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10917:16:21"},"nodeType":"YulFunctionCall","src":"10917:18:21"},"nodeType":"YulExpressionStatement","src":"10917:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10840:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"10847:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10837:2:21"},"nodeType":"YulFunctionCall","src":"10837:77:21"},"nodeType":"YulIf","src":"10834:103:21"},{"nodeType":"YulAssignment","src":"10946:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10957:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"10964:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10953:3:21"},"nodeType":"YulFunctionCall","src":"10953:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10946:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10806:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10816:3:21","type":""}],"src":"10777:195:21"},{"body":{"nodeType":"YulBlock","src":"11151:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11168:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11179:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11161:6:21"},"nodeType":"YulFunctionCall","src":"11161:21:21"},"nodeType":"YulExpressionStatement","src":"11161:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11202:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11213:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11198:3:21"},"nodeType":"YulFunctionCall","src":"11198:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11218:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11191:6:21"},"nodeType":"YulFunctionCall","src":"11191:30:21"},"nodeType":"YulExpressionStatement","src":"11191:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11241:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11252:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11237:3:21"},"nodeType":"YulFunctionCall","src":"11237:18:21"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"11257:34:21","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11230:6:21"},"nodeType":"YulFunctionCall","src":"11230:62:21"},"nodeType":"YulExpressionStatement","src":"11230:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11312:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11323:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11308:3:21"},"nodeType":"YulFunctionCall","src":"11308:18:21"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"11328:10:21","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11301:6:21"},"nodeType":"YulFunctionCall","src":"11301:38:21"},"nodeType":"YulExpressionStatement","src":"11301:38:21"},{"nodeType":"YulAssignment","src":"11348:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11360:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11371:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11356:3:21"},"nodeType":"YulFunctionCall","src":"11356:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11348:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11128:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11142:4:21","type":""}],"src":"10977:404:21"},{"body":{"nodeType":"YulBlock","src":"11560:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11577:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11588:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11570:6:21"},"nodeType":"YulFunctionCall","src":"11570:21:21"},"nodeType":"YulExpressionStatement","src":"11570:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11611:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11622:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11607:3:21"},"nodeType":"YulFunctionCall","src":"11607:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11627:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11600:6:21"},"nodeType":"YulFunctionCall","src":"11600:30:21"},"nodeType":"YulExpressionStatement","src":"11600:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11650:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11661:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11646:3:21"},"nodeType":"YulFunctionCall","src":"11646:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"11666:34:21","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11639:6:21"},"nodeType":"YulFunctionCall","src":"11639:62:21"},"nodeType":"YulExpressionStatement","src":"11639:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11721:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11732:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:21"},"nodeType":"YulFunctionCall","src":"11717:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"11737:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11710:6:21"},"nodeType":"YulFunctionCall","src":"11710:35:21"},"nodeType":"YulExpressionStatement","src":"11710:35:21"},{"nodeType":"YulAssignment","src":"11754:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11766:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11777:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11762:3:21"},"nodeType":"YulFunctionCall","src":"11762:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11754:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11537:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11551:4:21","type":""}],"src":"11386:401:21"},{"body":{"nodeType":"YulBlock","src":"11966:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11983:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11994:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11976:6:21"},"nodeType":"YulFunctionCall","src":"11976:21:21"},"nodeType":"YulExpressionStatement","src":"11976:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12017:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12028:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12013:3:21"},"nodeType":"YulFunctionCall","src":"12013:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12033:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12006:6:21"},"nodeType":"YulFunctionCall","src":"12006:30:21"},"nodeType":"YulExpressionStatement","src":"12006:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12056:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12067:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12052:3:21"},"nodeType":"YulFunctionCall","src":"12052:18:21"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"12072:34:21","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12045:6:21"},"nodeType":"YulFunctionCall","src":"12045:62:21"},"nodeType":"YulExpressionStatement","src":"12045:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12127:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12138:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12123:3:21"},"nodeType":"YulFunctionCall","src":"12123:18:21"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"12143:12:21","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12116:6:21"},"nodeType":"YulFunctionCall","src":"12116:40:21"},"nodeType":"YulExpressionStatement","src":"12116:40:21"},{"nodeType":"YulAssignment","src":"12165:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12177:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12188:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12173:3:21"},"nodeType":"YulFunctionCall","src":"12173:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12165:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11943:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11957:4:21","type":""}],"src":"11792:406:21"},{"body":{"nodeType":"YulBlock","src":"12251:102:21","statements":[{"nodeType":"YulAssignment","src":"12261:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12272:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"12275:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12268:3:21"},"nodeType":"YulFunctionCall","src":"12268:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"12261:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"12286:16:21","value":{"name":"sum","nodeType":"YulIdentifier","src":"12299:3:21"},"variables":[{"name":"sum_1","nodeType":"YulTypedName","src":"12290:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"12325:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12327:16:21"},"nodeType":"YulFunctionCall","src":"12327:18:21"},"nodeType":"YulExpressionStatement","src":"12327:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12317:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"12320:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12314:2:21"},"nodeType":"YulFunctionCall","src":"12314:10:21"},"nodeType":"YulIf","src":"12311:36:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12234:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"12237:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"12243:3:21","type":""}],"src":"12203:150:21"},{"body":{"nodeType":"YulBlock","src":"12587:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12604:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12615:2:21","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12597:6:21"},"nodeType":"YulFunctionCall","src":"12597:21:21"},"nodeType":"YulExpressionStatement","src":"12597:21:21"},{"nodeType":"YulVariableDeclaration","src":"12627:70:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12670:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12682:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12693:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12678:3:21"},"nodeType":"YulFunctionCall","src":"12678:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"12641:28:21"},"nodeType":"YulFunctionCall","src":"12641:56:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"12631:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12717:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12728:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12713:3:21"},"nodeType":"YulFunctionCall","src":"12713:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12737:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12745:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12733:3:21"},"nodeType":"YulFunctionCall","src":"12733:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12706:6:21"},"nodeType":"YulFunctionCall","src":"12706:50:21"},"nodeType":"YulExpressionStatement","src":"12706:50:21"},{"nodeType":"YulAssignment","src":"12765:52:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12802:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"12810:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"12773:28:21"},"nodeType":"YulFunctionCall","src":"12773:44:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12765:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12548:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12559:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12567:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12578:4:21","type":""}],"src":"12358:465:21"},{"body":{"nodeType":"YulBlock","src":"13002:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13019:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13030:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13012:6:21"},"nodeType":"YulFunctionCall","src":"13012:21:21"},"nodeType":"YulExpressionStatement","src":"13012:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13053:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13064:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13049:3:21"},"nodeType":"YulFunctionCall","src":"13049:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13069:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13042:6:21"},"nodeType":"YulFunctionCall","src":"13042:30:21"},"nodeType":"YulExpressionStatement","src":"13042:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13092:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13103:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13088:3:21"},"nodeType":"YulFunctionCall","src":"13088:18:21"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"13108:34:21","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13081:6:21"},"nodeType":"YulFunctionCall","src":"13081:62:21"},"nodeType":"YulExpressionStatement","src":"13081:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13163:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13174:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13159:3:21"},"nodeType":"YulFunctionCall","src":"13159:18:21"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"13179:11:21","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13152:6:21"},"nodeType":"YulFunctionCall","src":"13152:39:21"},"nodeType":"YulExpressionStatement","src":"13152:39:21"},{"nodeType":"YulAssignment","src":"13200:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13212:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13223:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13208:3:21"},"nodeType":"YulFunctionCall","src":"13208:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13200:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12979:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12993:4:21","type":""}],"src":"12828:405:21"},{"body":{"nodeType":"YulBlock","src":"13367:119:21","statements":[{"nodeType":"YulAssignment","src":"13377:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13389:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13400:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13385:3:21"},"nodeType":"YulFunctionCall","src":"13385:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13377:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13419:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"13430:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13412:6:21"},"nodeType":"YulFunctionCall","src":"13412:25:21"},"nodeType":"YulExpressionStatement","src":"13412:25:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13457:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13468:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13453:3:21"},"nodeType":"YulFunctionCall","src":"13453:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"13473:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13446:6:21"},"nodeType":"YulFunctionCall","src":"13446:34:21"},"nodeType":"YulExpressionStatement","src":"13446:34:21"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13328:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13339:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13347:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13358:4:21","type":""}],"src":"13238:248:21"},{"body":{"nodeType":"YulBlock","src":"13540:280:21","statements":[{"nodeType":"YulVariableDeclaration","src":"13550:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13570:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13564:5:21"},"nodeType":"YulFunctionCall","src":"13564:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13554:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13592:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"13597:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13585:6:21"},"nodeType":"YulFunctionCall","src":"13585:19:21"},"nodeType":"YulExpressionStatement","src":"13585:19:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13652:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"13659:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13648:3:21"},"nodeType":"YulFunctionCall","src":"13648:16:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13670:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"13675:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13666:3:21"},"nodeType":"YulFunctionCall","src":"13666:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"13682:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13613:34:21"},"nodeType":"YulFunctionCall","src":"13613:76:21"},"nodeType":"YulExpressionStatement","src":"13613:76:21"},{"nodeType":"YulAssignment","src":"13698:116:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13713:3:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13726:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"13734:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13722:3:21"},"nodeType":"YulFunctionCall","src":"13722:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"13739:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13718:3:21"},"nodeType":"YulFunctionCall","src":"13718:88:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13709:3:21"},"nodeType":"YulFunctionCall","src":"13709:98:21"},{"kind":"number","nodeType":"YulLiteral","src":"13809:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13705:3:21"},"nodeType":"YulFunctionCall","src":"13705:109:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13698:3:21"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13517:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13524:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13532:3:21","type":""}],"src":"13491:329:21"},{"body":{"nodeType":"YulBlock","src":"14156:537:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14173:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14188:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14196:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14184:3:21"},"nodeType":"YulFunctionCall","src":"14184:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14166:6:21"},"nodeType":"YulFunctionCall","src":"14166:74:21"},"nodeType":"YulExpressionStatement","src":"14166:74:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14260:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14271:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14256:3:21"},"nodeType":"YulFunctionCall","src":"14256:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14280:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14288:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14276:3:21"},"nodeType":"YulFunctionCall","src":"14276:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14249:6:21"},"nodeType":"YulFunctionCall","src":"14249:83:21"},"nodeType":"YulExpressionStatement","src":"14249:83:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14352:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14363:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14348:3:21"},"nodeType":"YulFunctionCall","src":"14348:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14368:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14341:6:21"},"nodeType":"YulFunctionCall","src":"14341:31:21"},"nodeType":"YulExpressionStatement","src":"14341:31:21"},{"nodeType":"YulVariableDeclaration","src":"14381:71:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14424:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14436:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14447:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14432:3:21"},"nodeType":"YulFunctionCall","src":"14432:19:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"14395:28:21"},"nodeType":"YulFunctionCall","src":"14395:57:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"14385:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14472:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14483:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14468:3:21"},"nodeType":"YulFunctionCall","src":"14468:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"14492:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14500:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14488:3:21"},"nodeType":"YulFunctionCall","src":"14488:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14461:6:21"},"nodeType":"YulFunctionCall","src":"14461:50:21"},"nodeType":"YulExpressionStatement","src":"14461:50:21"},{"nodeType":"YulVariableDeclaration","src":"14520:58:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"14563:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"14571:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"14534:28:21"},"nodeType":"YulFunctionCall","src":"14534:44:21"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"14524:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14598:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14609:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14594:3:21"},"nodeType":"YulFunctionCall","src":"14594:19:21"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"14619:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14627:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14615:3:21"},"nodeType":"YulFunctionCall","src":"14615:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14587:6:21"},"nodeType":"YulFunctionCall","src":"14587:51:21"},"nodeType":"YulExpressionStatement","src":"14587:51:21"},{"nodeType":"YulAssignment","src":"14647:40:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"14672:6:21"},{"name":"tail_2","nodeType":"YulIdentifier","src":"14680:6:21"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"14655:16:21"},"nodeType":"YulFunctionCall","src":"14655:32:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14647:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14093:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14104:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14112:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14120:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14128:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14136:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14147:4:21","type":""}],"src":"13825:868:21"},{"body":{"nodeType":"YulBlock","src":"14778:169:21","statements":[{"body":{"nodeType":"YulBlock","src":"14824:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14833:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14836:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14826:6:21"},"nodeType":"YulFunctionCall","src":"14826:12:21"},"nodeType":"YulExpressionStatement","src":"14826:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14799:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14808:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14795:3:21"},"nodeType":"YulFunctionCall","src":"14795:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"14820:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14791:3:21"},"nodeType":"YulFunctionCall","src":"14791:32:21"},"nodeType":"YulIf","src":"14788:52:21"},{"nodeType":"YulVariableDeclaration","src":"14849:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14868:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14862:5:21"},"nodeType":"YulFunctionCall","src":"14862:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14853:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14911:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"14887:23:21"},"nodeType":"YulFunctionCall","src":"14887:30:21"},"nodeType":"YulExpressionStatement","src":"14887:30:21"},{"nodeType":"YulAssignment","src":"14926:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"14936:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14926:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14744:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14755:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14767:6:21","type":""}],"src":"14698:249:21"},{"body":{"nodeType":"YulBlock","src":"14995:136:21","statements":[{"body":{"nodeType":"YulBlock","src":"15040:85:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15069:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15072:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15075:1:21","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"15054:14:21"},"nodeType":"YulFunctionCall","src":"15054:23:21"},"nodeType":"YulExpressionStatement","src":"15054:23:21"},{"nodeType":"YulAssignment","src":"15090:25:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15101:3:21","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15112:1:21","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15106:5:21"},"nodeType":"YulFunctionCall","src":"15106:8:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15097:3:21"},"nodeType":"YulFunctionCall","src":"15097:18:21"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"15090:3:21"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15011:14:21"},"nodeType":"YulFunctionCall","src":"15011:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15029:1:21","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15008:2:21"},"nodeType":"YulFunctionCall","src":"15008:23:21"},"nodeType":"YulIf","src":"15005:120:21"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"14987:3:21","type":""}],"src":"14952:179:21"},{"body":{"nodeType":"YulBlock","src":"15183:701:21","statements":[{"body":{"nodeType":"YulBlock","src":"15223:9:21","statements":[{"nodeType":"YulLeave","src":"15225:5:21"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15199:14:21"},"nodeType":"YulFunctionCall","src":"15199:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15217:4:21","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15196:2:21"},"nodeType":"YulFunctionCall","src":"15196:26:21"},"nodeType":"YulIf","src":"15193:39:21"},{"nodeType":"YulVariableDeclaration","src":"15241:21:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15259:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15253:5:21"},"nodeType":"YulFunctionCall","src":"15253:9:21"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"15245:4:21","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15286:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"15292:1:21","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15299:14:21"},"nodeType":"YulFunctionCall","src":"15299:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15317:66:21","type":"","value":"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15295:3:21"},"nodeType":"YulFunctionCall","src":"15295:89:21"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"15271:14:21"},"nodeType":"YulFunctionCall","src":"15271:114:21"},"nodeType":"YulExpressionStatement","src":"15271:114:21"},{"nodeType":"YulVariableDeclaration","src":"15394:25:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15414:4:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15408:5:21"},"nodeType":"YulFunctionCall","src":"15408:11:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15398:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"15507:9:21","statements":[{"nodeType":"YulLeave","src":"15509:5:21"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15437:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15445:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15434:2:21"},"nodeType":"YulFunctionCall","src":"15434:30:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15473:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15481:4:21","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15469:3:21"},"nodeType":"YulFunctionCall","src":"15469:17:21"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15488:14:21"},"nodeType":"YulFunctionCall","src":"15488:16:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15466:2:21"},"nodeType":"YulFunctionCall","src":"15466:39:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15431:2:21"},"nodeType":"YulFunctionCall","src":"15431:75:21"},"nodeType":"YulIf","src":"15428:88:21"},{"nodeType":"YulVariableDeclaration","src":"15525:28:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15540:4:21"},{"name":"offset","nodeType":"YulIdentifier","src":"15546:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15536:3:21"},"nodeType":"YulFunctionCall","src":"15536:17:21"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"15529:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15562:24:21","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"15582:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15576:5:21"},"nodeType":"YulFunctionCall","src":"15576:10:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15566:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"15629:9:21","statements":[{"nodeType":"YulLeave","src":"15631:5:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15601:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15609:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15598:2:21"},"nodeType":"YulFunctionCall","src":"15598:30:21"},"nodeType":"YulIf","src":"15595:43:21"},{"body":{"nodeType":"YulBlock","src":"15784:9:21","statements":[{"nodeType":"YulLeave","src":"15786:5:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"15661:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15666:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15657:3:21"},"nodeType":"YulFunctionCall","src":"15657:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15675:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15653:3:21"},"nodeType":"YulFunctionCall","src":"15653:27:21"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15690:4:21"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"15696:14:21"},"nodeType":"YulFunctionCall","src":"15696:16:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15686:3:21"},"nodeType":"YulFunctionCall","src":"15686:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"15715:66:21","type":"","value":"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15682:3:21"},"nodeType":"YulFunctionCall","src":"15682:100:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15650:2:21"},"nodeType":"YulFunctionCall","src":"15650:133:21"},"nodeType":"YulIf","src":"15647:146:21"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15822:4:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15836:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"15844:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15832:3:21"},"nodeType":"YulFunctionCall","src":"15832:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"15853:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15828:3:21"},"nodeType":"YulFunctionCall","src":"15828:30:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"15802:19:21"},"nodeType":"YulFunctionCall","src":"15802:57:21"},"nodeType":"YulExpressionStatement","src":"15802:57:21"},{"nodeType":"YulAssignment","src":"15868:10:21","value":{"name":"msg","nodeType":"YulIdentifier","src":"15875:3:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"15868:3:21"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15175:3:21","type":""}],"src":"15136:748:21"},{"body":{"nodeType":"YulBlock","src":"16063:242:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16080:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16091:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16073:6:21"},"nodeType":"YulFunctionCall","src":"16073:21:21"},"nodeType":"YulExpressionStatement","src":"16073:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16114:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16125:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16110:3:21"},"nodeType":"YulFunctionCall","src":"16110:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16130:2:21","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16103:6:21"},"nodeType":"YulFunctionCall","src":"16103:30:21"},"nodeType":"YulExpressionStatement","src":"16103:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16153:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16164:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16149:3:21"},"nodeType":"YulFunctionCall","src":"16149:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2045524331313535","kind":"string","nodeType":"YulLiteral","src":"16169:34:21","type":"","value":"ERC1155: transfer to non ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16142:6:21"},"nodeType":"YulFunctionCall","src":"16142:62:21"},"nodeType":"YulExpressionStatement","src":"16142:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16224:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16235:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16220:3:21"},"nodeType":"YulFunctionCall","src":"16220:18:21"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"16240:22:21","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16213:6:21"},"nodeType":"YulFunctionCall","src":"16213:50:21"},"nodeType":"YulExpressionStatement","src":"16213:50:21"},{"nodeType":"YulAssignment","src":"16272:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16284:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16295:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16280:3:21"},"nodeType":"YulFunctionCall","src":"16280:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16272:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16040:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16054:4:21","type":""}],"src":"15889:416:21"},{"body":{"nodeType":"YulBlock","src":"16484:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16501:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16512:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16494:6:21"},"nodeType":"YulFunctionCall","src":"16494:21:21"},"nodeType":"YulExpressionStatement","src":"16494:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16535:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16546:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16531:3:21"},"nodeType":"YulFunctionCall","src":"16531:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16551:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16524:6:21"},"nodeType":"YulFunctionCall","src":"16524:30:21"},"nodeType":"YulExpressionStatement","src":"16524:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16574:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16585:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16570:3:21"},"nodeType":"YulFunctionCall","src":"16570:18:21"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"16590:34:21","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16563:6:21"},"nodeType":"YulFunctionCall","src":"16563:62:21"},"nodeType":"YulExpressionStatement","src":"16563:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16645:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16656:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16641:3:21"},"nodeType":"YulFunctionCall","src":"16641:18:21"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"16661:10:21","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16634:6:21"},"nodeType":"YulFunctionCall","src":"16634:38:21"},"nodeType":"YulExpressionStatement","src":"16634:38:21"},{"nodeType":"YulAssignment","src":"16681:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16693:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16704:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16689:3:21"},"nodeType":"YulFunctionCall","src":"16689:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16681:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16461:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16475:4:21","type":""}],"src":"16310:404:21"},{"body":{"nodeType":"YulBlock","src":"16950:371:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16967:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16982:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16990:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16978:3:21"},"nodeType":"YulFunctionCall","src":"16978:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16960:6:21"},"nodeType":"YulFunctionCall","src":"16960:74:21"},"nodeType":"YulExpressionStatement","src":"16960:74:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17054:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17065:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17050:3:21"},"nodeType":"YulFunctionCall","src":"17050:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17074:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17082:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17070:3:21"},"nodeType":"YulFunctionCall","src":"17070:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17043:6:21"},"nodeType":"YulFunctionCall","src":"17043:83:21"},"nodeType":"YulExpressionStatement","src":"17043:83:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17146:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17157:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17142:3:21"},"nodeType":"YulFunctionCall","src":"17142:18:21"},{"name":"value2","nodeType":"YulIdentifier","src":"17162:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17135:6:21"},"nodeType":"YulFunctionCall","src":"17135:34:21"},"nodeType":"YulExpressionStatement","src":"17135:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17189:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17200:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17185:3:21"},"nodeType":"YulFunctionCall","src":"17185:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"17205:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17178:6:21"},"nodeType":"YulFunctionCall","src":"17178:34:21"},"nodeType":"YulExpressionStatement","src":"17178:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17232:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17243:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17228:3:21"},"nodeType":"YulFunctionCall","src":"17228:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"17249:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17221:6:21"},"nodeType":"YulFunctionCall","src":"17221:32:21"},"nodeType":"YulExpressionStatement","src":"17221:32:21"},{"nodeType":"YulAssignment","src":"17262:53:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"17287:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17299:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17310:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17295:3:21"},"nodeType":"YulFunctionCall","src":"17295:19:21"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17270:16:21"},"nodeType":"YulFunctionCall","src":"17270:45:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17262:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16887:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"16898:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16906:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16914:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16922:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16930:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16941:4:21","type":""}],"src":"16719:602:21"}]},"contents":"{\n    { }\n    function abi_decode_address(offset, end) -> value\n    {\n        value := calldataload(offset)\n        let value_1 := value\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        let _1 := iszero(slt(add(offset, 0x1f), end))\n        if _1 { revert(0, 0) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let size := shl(5, length)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(size, 0x20))\n        let dst := memPtr\n        mstore(memPtr, length)\n        dst := add(memPtr, 0x20)\n        let srcEnd := add(add(offset, size), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            if _1 { revert(_1, _1) }\n            mstore(dst, calldataload(src))\n            dst := add(dst, 0x20)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        let _1 := iszero(slt(add(offset, 0x1f), end))\n        if _1 { revert(0, 0) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20))\n        mstore(memPtr, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        let _1 := slt(sub(dataEnd, headStart), 160)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 64)\n        if _1 { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let offset_1 := add(headStart, offset)\n        if iszero(slt(add(offset_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(offset_1)\n        let size := array_allocation_size_array_uint256_dyn(length)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, size)\n        let dst := memPtr\n        mstore(memPtr, length)\n        dst := add(memPtr, 0x20)\n        let srcEnd := add(add(offset_1, shl(5, length)), 0x20)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(offset_1, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, abi_decode_address(src, dataEnd))\n            dst := add(dst, 0x20)\n        }\n        value0 := memPtr\n        let offset_2 := calldataload(add(headStart, 0x20))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 0x20)\n            srcPtr := add(srcPtr, 0x20)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := slt(sub(dataEnd, headStart), 64)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        let _1 := slt(sub(dataEnd, headStart), 160)\n        if _1 { revert(0, 0) }\n        value0 := abi_decode_address(headStart, dataEnd)\n        value1 := abi_decode_address(add(headStart, 32), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let length_1 := length\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_0398ed728bb0e096e3166d2c16e1078c0ca95e6b3fb31971215526318a2e5370__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        let sum_1 := sum\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_bytes(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        returndatacopy(data, 4, add(returndatasize(), 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc))\n        let offset := mload(data)\n        if or(gt(offset, 0xffffffffffffffff), gt(add(offset, 0x24), returndatasize())) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, 0xffffffffffffffff) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_00aa752fb1526000e5241602affc3d70ef506da48a27ea57140102b439e655ed__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_bytes(value4, add(headStart, 160))\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461018657600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004611265565b610199565b6040519081526020015b60405180910390f35b6100c56100c03660046112c1565b61027b565b60405190151581526020016100a9565b6100e86100e33660046112e5565b61035e565b6040516100a99190611322565b610108610103366004611538565b6103f2565b005b61011d6101183660046115f2565b6104bb565b6040516100a99190611706565b610108610138366004611719565b610613565b6100c561014b366004611758565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260666020908152604080832093909416825291909152205460ff1690565b61010861019436600461178d565b610622565b600073ffffffffffffffffffffffffffffffffffffffff8316610243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061030e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061027557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610275565b60606067805461036d906117ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610399906117ea565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff851633148061041b575061041b853361014b565b6104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b485858585856106e4565b5050505050565b6060815183511461054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161023a565b6000835167ffffffffffffffff81111561056a5761056a611373565b604051908082528060200260200182016040528015610593578160200160208202803683370190505b50905060005b845181101561060b576105de8582815181106105b7576105b761183d565b60200260200101518583815181106105d1576105d161183d565b6020026020010151610199565b8282815181106105f0576105f061183d565b60209081029190910101526106048161189b565b9050610599565b509392505050565b61061e338383610a21565b5050565b73ffffffffffffffffffffffffffffffffffffffff851633148061064b575061064b853361014b565b6106d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606482015260840161023a565b6104b48585858585610b74565b8151835114610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff8416610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b3360005b845181101561098c5760008582815181106108395761083961183d565b6020026020010151905060008583815181106108575761085761183d565b602090810291909101810151600084815260658352604080822073ffffffffffffffffffffffffffffffffffffffff8e168352909352919091205490915081811015610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600083815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e8116855292528083208585039055908b168252812080548492906109719084906118d3565b92505081905550505050806109859061189b565b905061081c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610a039291906118e6565b60405180910390a4610a19818787878787610db6565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161023a565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526066602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8416610c17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161023a565b336000610c2385611049565b90506000610c3085611049565b9050600086815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8c16845290915290205485811015610cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e7366657200000000000000000000000000000000000000000000606482015260840161023a565b600087815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8d8116855292528083208985039055908a16825281208054889290610d3e9084906118d3565b9091555050604080518881526020810188905273ffffffffffffffffffffffffffffffffffffffff808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610dab848a8a8a8a8a611094565b505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c8190610e2d908990899088908890889060040161195e565b6020604051808303816000875af1925050508015610e86575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610e83918101906119db565b60015b610f6f57610e926119f8565b806308c379a003610ee55750610ea6611a14565b80610eb15750610ee7565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023a9190611322565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161023a565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b50505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106110835761108361183d565b602090810291909101015292915050565b73ffffffffffffffffffffffffffffffffffffffff84163b15610a19576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e619061110b9089908990889088908890600401611acd565b6020604051808303816000875af1925050508015611164575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611161918101906119db565b60015b61117057610e926119f8565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e73000000000000000000000000000000000000000000000000606482015260840161023a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027557600080fd5b6000806040838503121561127857600080fd5b6112828484611241565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146112be57600080fd5b50565b6000602082840312156112d357600080fd5b81356112de81611290565b9392505050565b6000602082840312156112f757600080fd5b5035919050565b60005b83811015611319578181015183820152602001611301565b50506000910152565b60208152600082518060208401526113418160408501602087016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156113e6576113e6611373565b6040525050565b600067ffffffffffffffff82111561140757611407611373565b5060051b60200190565b600082601f83011215801561142557600080fd5b823567ffffffffffffffff81111561143f5761143f611373565b8060051b60405161145360208301826113a2565b91825260208186018101929081018784111561146e57600080fd5b6020870192505b83831015611497578415611487578485fd5b8235815260209283019201611475565b509695505050505050565b600082601f8301121580156114b657600080fd5b50813567ffffffffffffffff8111156114d1576114d1611373565b60405161150660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601826113a2565b81815284602083860101111561151b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312801561155157600080fd5b5061155c8787611241565b945061156b8760208801611241565b9350604086013567ffffffffffffffff81111561158757600080fd5b61159388828901611411565b935050606086013567ffffffffffffffff8111156115b057600080fd5b6115bc88828901611411565b925050608086013567ffffffffffffffff8111156115d957600080fd5b6115e5888289016114a2565b9150509295509295909350565b600080604083850312801561160657600080fd5b50823567ffffffffffffffff81111561161e57600080fd5b8301601f8101851361162f57600080fd5b803561163a816113ed565b60405161164782826113a2565b80915082815260208101915060208360051b85010192508783111561166b57600080fd5b6020840193505b82841015611695576116848885611241565b825260209384019390910190611672565b9450505050602083013567ffffffffffffffff8111156116b457600080fd5b6116c085828601611411565b9150509250929050565b600081518084526020840193506020830160005b828110156116fc5781518652602095860195909101906001016116de565b5093949350505050565b6020815260006112de60208301846116ca565b600080604083850312801561172d57600080fd5b506117388484611241565b91506020830135801515811461174d57600080fd5b809150509250929050565b6000806040838503121561176b57600080fd5b6117758484611241565b91506117848460208501611241565b90509250929050565b600080600080600060a08688031280156117a657600080fd5b506117b18787611241565b94506117c08760208801611241565b93506040860135925060608601359150608086013567ffffffffffffffff8111156115d957600080fd5b600181811c908216806117fe57607f821691505b602082108103611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118cc576118cc61186c565b5060010190565b808201808211156102755761027561186c565b6040815260006118f960408301856116ca565b828103602084015261190b81856116ca565b95945050505050565b6000815180845261192c8160208601602086016112fe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006119a960a08301866116ca565b82810360608401526119bb81866116ca565b905082810360808401526119cf8185611914565b98975050505050505050565b6000602082840312156119ed57600080fd5b81516112de81611290565b600060033d1115611a115760046000803e5060005160e01c5b90565b600060443d1015611a225790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d602482011167ffffffffffffffff82111715611a6a57505090565b808201805167ffffffffffffffff811115611a86575050505090565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d8501016020828401011115611abe575050505090565b61060b602082850101856113a2565b73ffffffffffffffffffffffffffffffffffffffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015283604082015282606082015260a060808201526000611b2460a0830184611914565b97965050505050505056fea26469706673582212205da742920da09a235456cc1bff053a2ceedd34295949f1022fee11e86ce4241e64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x1265 JUMP JUMPDEST PUSH2 0x199 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C1 JUMP JUMPDEST PUSH2 0x27B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x1538 JUMP JUMPDEST PUSH2 0x3F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x15F2 JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1706 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1719 JUMP JUMPDEST PUSH2 0x613 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x1758 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x622 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x243 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x30E JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x275 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x275 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x36D SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x17EA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3E6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3BB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3E6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3C9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x41B JUMPI POP PUSH2 0x41B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x6E4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH2 0x56A PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x593 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH2 0x5DE DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B7 JUMPI PUSH2 0x5B7 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D1 JUMPI PUSH2 0x5D1 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x199 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5F0 JUMPI PUSH2 0x5F0 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x604 DUP2 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x599 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x61E CALLER DUP4 DUP4 PUSH2 0xA21 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER EQ DUP1 PUSH2 0x64B JUMPI POP PUSH2 0x64B DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206E6F7220617070726F7665640000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x4B4 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xB74 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x818 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x98C JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x839 JUMPI PUSH2 0x839 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x857 JUMPI PUSH2 0x857 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x971 SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x985 SWAP1 PUSH2 0x189B JUMP JUMPDEST SWAP1 POP PUSH2 0x81C JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xA03 SWAP3 SWAP2 SWAP1 PUSH2 0x18E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA19 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xDB6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xADC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0xC23 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC30 DUP6 PUSH2 0x1049 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xCF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207472616E7366657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xD3E SWAP1 DUP5 SWAP1 PUSH2 0x18D3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDAB DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1094 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0xE2D SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x195E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE86 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xE83 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF6F JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0xEE5 JUMPI POP PUSH2 0xEA6 PUSH2 0x1A14 JUMP JUMPDEST DUP1 PUSH2 0xEB1 JUMPI POP PUSH2 0xEE7 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x1322 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2045524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1083 JUMPI PUSH2 0x1083 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA19 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x110B SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1164 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1161 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1170 JUMPI PUSH2 0xE92 PUSH2 0x19F8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E73000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x23A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1282 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x12BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1319 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1301 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1341 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x13E6 JUMPI PUSH2 0x13E6 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1407 JUMPI PUSH2 0x1407 PUSH2 0x1373 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x1425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x143F JUMPI PUSH2 0x143F PUSH2 0x1373 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH2 0x1453 PUSH1 0x20 DUP4 ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD DUP8 DUP5 GT ISZERO PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x1497 JUMPI DUP5 ISZERO PUSH2 0x1487 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1475 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO DUP1 ISZERO PUSH2 0x14B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x14D1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1506 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x151B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x1551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x155C DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x156B DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1593 DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15BC DUP9 DUP3 DUP10 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E5 DUP9 DUP3 DUP10 ADD PUSH2 0x14A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x1606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x161E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x162F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x163A DUP2 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1647 DUP3 DUP3 PUSH2 0x13A2 JUMP JUMPDEST DUP1 SWAP2 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 POP PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 POP DUP8 DUP4 GT ISZERO PUSH2 0x166B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x1695 JUMPI PUSH2 0x1684 DUP9 DUP6 PUSH2 0x1241 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1672 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C0 DUP6 DUP3 DUP7 ADD PUSH2 0x1411 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16FC JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x16DE JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12DE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16CA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT DUP1 ISZERO PUSH2 0x172D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1738 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x174D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1775 DUP5 DUP5 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP PUSH2 0x1784 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT DUP1 ISZERO PUSH2 0x17A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B1 DUP8 DUP8 PUSH2 0x1241 JUMP JUMPDEST SWAP5 POP PUSH2 0x17C0 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x1241 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x17FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1837 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x18CC JUMPI PUSH2 0x18CC PUSH2 0x186C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x275 JUMPI PUSH2 0x275 PUSH2 0x186C JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18F9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190B DUP2 DUP6 PUSH2 0x16CA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x192C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x19A9 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x16CA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x19BB DUP2 DUP7 PUSH2 0x16CA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x19CF DUP2 DUP6 PUSH2 0x1914 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12DE DUP2 PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x1A11 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x1A22 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD RETURNDATASIZE PUSH1 0x24 DUP3 ADD GT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1A6A JUMPI POP POP SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A86 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC RETURNDATASIZE DUP6 ADD ADD PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x1ABE JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x60B PUSH1 0x20 DUP3 DUP6 ADD ADD DUP6 PUSH2 0x13A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1B24 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xA7 TIMESTAMP SWAP3 0xD LOG0 SWAP11 0x23 SLOAD JUMP 0xCC SHL SELFDESTRUCT SDIV GASPRICE 0x2C 0xEE 0xDD CALLVALUE 0x29 MSIZE 0x49 CALL MUL 0x2F 0xEE GT 0xE8 PUSH13 0xE4241E64736F6C634300081000 CALLER ","sourceMap":"1234:15887:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3069:217;;;;;;:::i;:::-;;:::i;:::-;;;663:25:21;;;651:2;636:18;3069:217:20;;;;;;;;2122:347;;;;;;:::i;:::-;;:::i;:::-;;;1296:14:21;;1289:22;1271:41;;1259:2;1244:18;2122:347:20;1131:187:21;2846:97:20;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4781:379::-;;;;;;:::i;:::-;;:::i;:::-;;3427:458;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3945:147::-;;;;;;:::i;:::-;;:::i;4151:160::-;;;;;;:::i;:::-;4269:27;;;;4250:4;4269:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;4151:160;4370:347;;;;;;:::i;:::-;;:::i;3069:217::-;3155:7;3178:21;;;3170:76;;;;;;;8891:2:21;3170:76:20;;;8873:21:21;8930:2;8910:18;;;8903:30;8969:34;8949:18;;;8942:62;9040:12;9020:18;;;9013:40;9070:19;;3170:76:20;;;;;;;;;-1:-1:-1;3259:13:20;;;;:9;:13;;;;;;;;:22;;;;;;;;;;;3069:217;;;;;:::o;2122:347::-;2266:4;2293:52;;;2308:37;2293:52;;:125;;-1:-1:-1;2355:63:20;;;2370:48;2355:63;2293:125;:171;;;-1:-1:-1;1183:36:15;1168:51;;;;2428:36:20;1060:166:15;2846:97:20;2906:13;2934:4;2927:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2846:97;;;:::o;4781:379::-;4974:20;;;929:10:12;4974:20:20;;:60;;-1:-1:-1;4998:36:20;5015:4;929:10:12;4151:160:20;:::i;4998:36::-;4959:138;;;;;;;9775:2:21;4959:138:20;;;9757:21:21;9814:2;9794:18;;;9787:30;9853:34;9833:18;;;9826:62;9924:17;9904:18;;;9897:45;9959:19;;4959:138:20;9573:411:21;4959:138:20;5103:52;5126:4;5132:2;5136:3;5141:7;5150:4;5103:22;:52::i;:::-;4781:379;;;;;:::o;3427:458::-;3558:16;3611:3;:10;3592:8;:15;:29;3584:83;;;;;;;10191:2:21;3584:83:20;;;10173:21:21;10230:2;10210:18;;;10203:30;10269:34;10249:18;;;10242:62;10340:11;10320:18;;;10313:39;10369:19;;3584:83:20;9989:405:21;3584:83:20;3674:30;3721:8;:15;3707:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3707:30:20;;3674:63;;3749:9;3744:110;3768:8;:15;3764:1;:19;3744:110;;;3817:30;3827:8;3836:1;3827:11;;;;;;;;:::i;:::-;;;;;;;3840:3;3844:1;3840:6;;;;;;;;:::i;:::-;;;;;;;3817:9;:30::i;:::-;3798:13;3812:1;3798:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;3785:3;;;:::i;:::-;;;3744:110;;;-1:-1:-1;3867:13:20;3427:458;-1:-1:-1;;;3427:458:20:o;3945:147::-;4035:52;929:10:12;4068:8:20;4078;4035:18;:52::i;:::-;3945:147;;:::o;4370:347::-;4538:20;;;929:10:12;4538:20:20;;:60;;-1:-1:-1;4562:36:20;4579:4;929:10:12;4151:160:20;:::i;4562:36::-;4523:138;;;;;;;9775:2:21;4523:138:20;;;9757:21:21;9814:2;9794:18;;;9787:30;9853:34;9833:18;;;9826:62;9924:17;9904:18;;;9897:45;9959:19;;4523:138:20;9573:411:21;4523:138:20;4667:45;4685:4;4691:2;4695;4699:6;4707:4;4667:17;:45::i;6773:1005::-;6967:7;:14;6953:3;:10;:28;6945:81;;;;;;;11179:2:21;6945:81:20;;;11161:21:21;11218:2;11198:18;;;11191:30;11257:34;11237:18;;;11230:62;11328:10;11308:18;;;11301:38;11356:19;;6945:81:20;10977:404:21;6945:81:20;7040:16;;;7032:66;;;;;;;11588:2:21;7032:66:20;;;11570:21:21;11627:2;11607:18;;;11600:30;11666:34;11646:18;;;11639:62;11737:7;11717:18;;;11710:35;11762:19;;7032:66:20;11386:401:21;7032:66:20;929:10:12;7105:16:20;7210:357;7234:3;:10;7230:1;:14;7210:357;;;7259:10;7272:3;7276:1;7272:6;;;;;;;;:::i;:::-;;;;;;;7259:19;;7286:14;7303:7;7311:1;7303:10;;;;;;;;:::i;:::-;;;;;;;;;;;;7322:19;7344:13;;;:9;:13;;;;;;:19;;;;;;;;;;;;;7303:10;;-1:-1:-1;7379:21:20;;;;7371:76;;;;;;;11994:2:21;7371:76:20;;;11976:21:21;12033:2;12013:18;;;12006:30;12072:34;12052:18;;;12045:62;12143:12;12123:18;;;12116:40;12173:19;;7371:76:20;11792:406:21;7371:76:20;7475:13;;;;:9;:13;;;;;;;;:19;;;;;;;;;;;7497:20;;;7475:42;;7533:17;;;;;;;:27;;7497:20;;7475:13;7533:27;;7497:20;;7533:27;:::i;:::-;;;;;;;;7251:316;;;7246:3;;;;:::i;:::-;;;7210:357;;;;7608:2;7578:47;;7602:4;7578:47;;7592:8;7578:47;;;7612:3;7617:7;7578:47;;;;;;;:::i;:::-;;;;;;;;7698:75;7734:8;7744:4;7750:2;7754:3;7759:7;7768:4;7698:35;:75::i;:::-;6939:839;6773:1005;;;;;:::o;12835:295::-;12967:8;12958:17;;:5;:17;;;12950:71;;;;;;;13030:2:21;12950:71:20;;;13012:21:21;13069:2;13049:18;;;13042:30;13108:34;13088:18;;;13081:62;13179:11;13159:18;;;13152:39;13208:19;;12950:71:20;12828:405:21;12950:71:20;13027:25;;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;;;;;;;;;;;;13084:41;;1271::21;;;13084::20;;1244:18:21;13084:41:20;;;;;;;12835:295;;;:::o;5584:865::-;5739:16;;;5731:66;;;;;;;11588:2:21;5731:66:20;;;11570:21:21;11627:2;11607:18;;;11600:30;11666:34;11646:18;;;11639:62;11737:7;11717:18;;;11710:35;11762:19;;5731:66:20;11386:401:21;5731:66:20;929:10:12;5804:16:20;5864:21;5882:2;5864:17;:21::i;:::-;5841:44;;5891:24;5918:25;5936:6;5918:17;:25::i;:::-;5891:52;;6017:19;6039:13;;;:9;:13;;;;;;;;:19;;;;;;;;;;;6072:21;;;;6064:76;;;;;;;11994:2:21;6064:76:20;;;11976:21:21;12033:2;12013:18;;;12006:30;12072:34;12052:18;;;12045:62;12143:12;12123:18;;;12116:40;12173:19;;6064:76:20;11792:406:21;6064:76:20;6164:13;;;;:9;:13;;;;;;;;:19;;;;;;;;;;;6186:20;;;6164:42;;6218:17;;;;;;;:27;;6186:20;;6164:13;6218:27;;6186:20;;6218:27;:::i;:::-;;;;-1:-1:-1;;6257:46:20;;;13412:25:21;;;13468:2;13453:18;;13446:34;;;6257:46:20;;;;;;;;;;;;;;;13385:18:21;6257:46:20;;;;;;;6376:68;6407:8;6417:4;6423:2;6427;6431:6;6439:4;6376:30;:68::i;:::-;5725:724;;;;5584:865;;;;;:::o;15959:698::-;16161:13;;;1476:19:11;:23;16157:496:20;;16190:90;;;;;:54;;;;;;:90;;16245:8;;16255:4;;16261:3;;16266:7;;16275:4;;16190:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16190:90:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;16186:461;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16543:6;16536:14;;;;;;;;;;;:::i;16186:461::-;;;16576:62;;;;;16091:2:21;16576:62:20;;;16073:21:21;16130:2;16110:18;;;16103:30;16169:34;16149:18;;;16142:62;16240:22;16220:18;;;16213:50;16280:19;;16576:62:20;15889:416:21;16186:461:20;16337:71;;;16349:59;16337:71;16333:150;;16422:50;;;;;16512:2:21;16422:50:20;;;16494:21:21;16551:2;16531:18;;;16524:30;16590:34;16570:18;;;16563:62;16661:10;16641:18;;;16634:38;16689:19;;16422:50:20;16310:404:21;16333:150:20;16281:210;15959:698;;;;;;:::o;16661:179::-;16776:16;;;16790:1;16776:16;;;;;;;;;16727;;16751:22;;16776:16;;;;;;;;;;;;-1:-1:-1;16776:16:20;16751:41;;16809:7;16798:5;16804:1;16798:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;16830:5;16661:179;-1:-1:-1;;16661:179:20:o;15294:661::-;15471:13;;;1476:19:11;:23;15467:484:20;;15500:83;;;;;:49;;;;;;:83;;15550:8;;15560:4;;15566:2;;15570:6;;15578:4;;15500:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15500:83:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;15496:449;;;;:::i;:::-;15640:66;;;15652:54;15640:66;15636:145;;15720:50;;;;;16512:2:21;15720:50:20;;;16494:21:21;16551:2;16531:18;;;16524:30;16590:34;16570:18;;;16563:62;16661:10;16641:18;;;16634:38;16689:19;;15720:50:20;16310:404:21;14:230;87:20;;176:42;165:54;;155:65;;145:93;;234:1;231;224:12;249:263;317:6;325;378:2;366:9;357:7;353:23;349:32;346:52;;;394:1;391;384:12;346:52;417:38;447:7;436:9;417:38;:::i;:::-;407:48;502:2;487:18;;;;474:32;;-1:-1:-1;;;249:263:21:o;699:177::-;784:66;777:5;773:78;766:5;763:89;753:117;;866:1;863;856:12;753:117;699:177;:::o;881:245::-;939:6;992:2;980:9;971:7;967:23;963:32;960:52;;;1008:1;1005;998:12;960:52;1047:9;1034:23;1066:30;1090:5;1066:30;:::i;:::-;1115:5;881:245;-1:-1:-1;;;881:245:21:o;1323:180::-;1382:6;1435:2;1423:9;1414:7;1410:23;1406:32;1403:52;;;1451:1;1448;1441:12;1403:52;-1:-1:-1;1474:23:21;;1323:180;-1:-1:-1;1323:180:21:o;1508:250::-;1593:1;1603:113;1617:6;1614:1;1611:13;1603:113;;;1693:11;;;1687:18;1674:11;;;1667:39;1639:2;1632:10;1603:113;;;-1:-1:-1;;1750:1:21;1732:16;;1725:27;1508:250::o;1763:455::-;1912:2;1901:9;1894:21;1875:4;1944:6;1938:13;1987:6;1982:2;1971:9;1967:18;1960:34;2003:79;2075:6;2070:2;2059:9;2055:18;2050:2;2042:6;2038:15;2003:79;:::i;:::-;2134:2;2122:15;2139:66;2118:88;2103:104;;;;2209:2;2099:113;;1763:455;-1:-1:-1;;1763:455:21:o;2223:184::-;2275:77;2272:1;2265:88;2372:4;2369:1;2362:15;2396:4;2393:1;2386:15;2412:308;2518:66;2513:2;2507:4;2503:13;2499:86;2491:6;2487:99;2652:6;2640:10;2637:22;2616:18;2604:10;2601:34;2598:62;2595:88;;;2663:18;;:::i;:::-;2699:2;2692:22;-1:-1:-1;;2412:308:21:o;2725:183::-;2785:4;2818:18;2810:6;2807:30;2804:56;;;2840:18;;:::i;:::-;-1:-1:-1;2885:1:21;2881:14;2897:4;2877:25;;2725:183::o;2913:822::-;2967:5;3027:3;3020:4;3012:6;3008:17;3004:27;2997:35;3044:2;3041:22;;;3059:1;3056;3049:12;3041:22;3099:6;3086:20;3129:18;3121:6;3118:30;3115:56;;;3151:18;;:::i;:::-;3199:6;3196:1;3192:14;3235:2;3229:9;3247:44;3285:4;3279;3275:15;3267:6;3247:44;:::i;:::-;3326:22;;;3376:4;3408:17;;;3404:28;;;3326:22;3364:17;;3444:15;;;3441:35;;;3472:1;3469;3462:12;3441:35;3508:4;3500:6;3496:17;3485:28;;3522:183;3538:6;3533:3;3530:15;3522:183;;;3597:2;3594:24;;;3613:2;3609;3602:14;3594:24;3643:17;;3631:30;;3690:4;3555:14;;;;3681;3522:183;;;-1:-1:-1;3723:6:21;2913:822;-1:-1:-1;;;;;;2913:822:21:o;3740:663::-;3782:5;3842:3;3835:4;3827:6;3823:17;3819:27;3812:35;3859:2;3856:22;;;3874:1;3871;3864:12;3856:22;;3914:6;3901:20;3944:18;3936:6;3933:30;3930:56;;;3966:18;;:::i;:::-;4015:2;4009:9;4027:130;4151:4;4082:66;4075:4;4067:6;4063:17;4059:90;4055:101;4047:6;4027:130;:::i;:::-;4181:6;4173;4166:22;4235:3;4228:4;4219:6;4211;4207:19;4203:30;4200:39;4197:59;;;4252:1;4249;4242:12;4197:59;4316:6;4309:4;4301:6;4297:17;4290:4;4282:6;4278:17;4265:58;4371:1;4343:19;;;4364:4;4339:30;4332:41;;;;4347:6;3740:663;-1:-1:-1;;;3740:663:21:o;4408:993::-;4562:6;4570;4578;4586;4594;4654:3;4642:9;4633:7;4629:23;4625:33;4670:2;4667:22;;;4685:1;4682;4675:12;4667:22;;4708:38;4738:7;4727:9;4708:38;:::i;:::-;4698:48;;4765:47;4804:7;4799:2;4788:9;4784:18;4765:47;:::i;:::-;4755:57;;4863:2;4852:9;4848:18;4835:32;4890:18;4882:6;4879:30;4876:50;;;4922:1;4919;4912:12;4876:50;4945:61;4998:7;4989:6;4978:9;4974:22;4945:61;:::i;:::-;4935:71;;;5059:2;5048:9;5044:18;5031:32;5088:18;5078:8;5075:32;5072:52;;;5120:1;5117;5110:12;5072:52;5143:63;5198:7;5187:8;5176:9;5172:24;5143:63;:::i;:::-;5133:73;;;5259:3;5248:9;5244:19;5231:33;5289:18;5279:8;5276:32;5273:52;;;5321:1;5318;5311:12;5273:52;5344:51;5387:7;5376:8;5365:9;5361:24;5344:51;:::i;:::-;5334:61;;;4408:993;;;;;;;;:::o;5406:1272::-;5524:6;5532;5592:2;5580:9;5571:7;5567:23;5563:32;5607:2;5604:22;;;5622:1;5619;5612:12;5604:22;;5662:9;5649:23;5695:18;5687:6;5684:30;5681:50;;;5727:1;5724;5717:12;5681:50;5756:22;;5815:4;5801:19;;5797:33;-1:-1:-1;5787:61:21;;5844:1;5841;5834:12;5787:61;5884:8;5871:22;5914:47;5954:6;5914:47;:::i;:::-;5990:2;5984:9;6002:33;6030:4;6022:6;6002:33;:::i;:::-;6055:6;6044:17;;6085:6;6077;6070:22;6120:4;6112:6;6108:17;6101:24;;6183:4;6173:6;6170:1;6166:14;6156:8;6152:29;6148:40;6134:54;;6211:7;6203:6;6200:19;6197:39;;;6232:1;6229;6222:12;6197:39;6270:4;6260:8;6256:19;6245:30;;6284:161;6300:6;6295:3;6292:15;6284:161;;;6368:32;6392:7;6387:3;6368:32;:::i;:::-;6356:45;;6430:4;6317:14;;;;6421;;;;6284:161;;;6464:6;-1:-1:-1;;;;6523:4:21;6508:20;;6495:34;6554:18;6541:32;;6538:52;;;6586:1;6583;6576:12;6538:52;6609:63;6664:7;6653:8;6642:9;6638:24;6609:63;:::i;:::-;6599:73;;;5406:1272;;;;;:::o;6683:420::-;6736:3;6774:5;6768:12;6801:6;6796:3;6789:19;6833:4;6828:3;6824:14;6817:21;;6872:4;6865:5;6861:16;6895:1;6905:173;6919:6;6916:1;6913:13;6905:173;;;6980:13;;6968:26;;7023:4;7014:14;;;;7051:17;;;;6941:1;6934:9;6905:173;;;-1:-1:-1;7094:3:21;;6683:420;-1:-1:-1;;;;6683:420:21:o;7108:261::-;7287:2;7276:9;7269:21;7250:4;7307:56;7359:2;7348:9;7344:18;7336:6;7307:56;:::i;7374:377::-;7439:6;7447;7507:2;7495:9;7486:7;7482:23;7478:32;7522:2;7519:22;;;7537:1;7534;7527:12;7519:22;;7560:38;7590:7;7579:9;7560:38;:::i;:::-;7550:48;;7648:2;7637:9;7633:18;7620:32;7695:5;7688:13;7681:21;7674:5;7671:32;7661:60;;7717:1;7714;7707:12;7661:60;7740:5;7730:15;;;7374:377;;;;;:::o;7756:278::-;7824:6;7832;7885:2;7873:9;7864:7;7860:23;7856:32;7853:52;;;7901:1;7898;7891:12;7853:52;7924:38;7954:7;7943:9;7924:38;:::i;:::-;7914:48;;7981:47;8020:7;8015:2;8004:9;8000:18;7981:47;:::i;:::-;7971:57;;7756:278;;;;;:::o;8039:645::-;8143:6;8151;8159;8167;8175;8235:3;8223:9;8214:7;8210:23;8206:33;8251:2;8248:22;;;8266:1;8263;8256:12;8248:22;;8289:38;8319:7;8308:9;8289:38;:::i;:::-;8279:48;;8346:47;8385:7;8380:2;8369:9;8365:18;8346:47;:::i;:::-;8336:57;;8440:2;8429:9;8425:18;8412:32;8402:42;;8491:2;8480:9;8476:18;8463:32;8453:42;;8546:3;8535:9;8531:19;8518:33;8574:18;8566:6;8563:30;8560:50;;;8606:1;8603;8596:12;9100:468;9179:1;9175:12;;;;9253;;;9274:61;;9328:4;9320:6;9316:17;9306:27;;9274:61;9381:2;9373:6;9370:14;9350:18;9347:38;9344:218;;9418:77;9415:1;9408:88;9519:4;9516:1;9509:15;9547:4;9544:1;9537:15;9344:218;;9100:468;;;:::o;10399:184::-;10451:77;10448:1;10441:88;10548:4;10545:1;10538:15;10572:4;10569:1;10562:15;10588:184;10640:77;10637:1;10630:88;10737:4;10734:1;10727:15;10761:4;10758:1;10751:15;10777:195;10816:3;10847:66;10840:5;10837:77;10834:103;;10917:18;;:::i;:::-;-1:-1:-1;10964:1:21;10953:13;;10777:195::o;12203:150::-;12268:9;;;12314:10;;;12311:36;;;12327:18;;:::i;12358:465::-;12615:2;12604:9;12597:21;12578:4;12641:56;12693:2;12682:9;12678:18;12670:6;12641:56;:::i;:::-;12745:9;12737:6;12733:22;12728:2;12717:9;12713:18;12706:50;12773:44;12810:6;12802;12773:44;:::i;:::-;12765:52;12358:465;-1:-1:-1;;;;;12358:465:21:o;13491:329::-;13532:3;13570:5;13564:12;13597:6;13592:3;13585:19;13613:76;13682:6;13675:4;13670:3;13666:14;13659:4;13652:5;13648:16;13613:76;:::i;:::-;13734:2;13722:15;13739:66;13718:88;13709:98;;;;13809:4;13705:109;;13491:329;-1:-1:-1;;13491:329:21:o;13825:868::-;14196:42;14188:6;14184:55;14173:9;14166:74;14288:42;14280:6;14276:55;14271:2;14260:9;14256:18;14249:83;14368:3;14363:2;14352:9;14348:18;14341:31;14147:4;14395:57;14447:3;14436:9;14432:19;14424:6;14395:57;:::i;:::-;14500:9;14492:6;14488:22;14483:2;14472:9;14468:18;14461:50;14534:44;14571:6;14563;14534:44;:::i;:::-;14520:58;;14627:9;14619:6;14615:22;14609:3;14598:9;14594:19;14587:51;14655:32;14680:6;14672;14655:32;:::i;:::-;14647:40;13825:868;-1:-1:-1;;;;;;;;13825:868:21:o;14698:249::-;14767:6;14820:2;14808:9;14799:7;14795:23;14791:32;14788:52;;;14836:1;14833;14826:12;14788:52;14868:9;14862:16;14887:30;14911:5;14887:30;:::i;14952:179::-;14987:3;15029:1;15011:16;15008:23;15005:120;;;15075:1;15072;15069;15054:23;-1:-1:-1;15112:1:21;15106:8;15101:3;15097:18;15005:120;14952:179;:::o;15136:748::-;15175:3;15217:4;15199:16;15196:26;15193:39;;;15136:748;:::o;15193:39::-;15259:2;15253:9;15317:66;15299:16;15295:89;15292:1;15286:4;15271:114;15414:4;15408:11;15488:16;15481:4;15473:6;15469:17;15466:39;15445:18;15437:6;15434:30;15431:75;15428:88;;;15509:5;;15136:748;:::o;15428:88::-;15546:6;15540:4;15536:17;15582:3;15576:10;15609:18;15601:6;15598:30;15595:43;;;15631:5;;;;15136:748;:::o;15595:43::-;15715:66;15696:16;15690:4;15686:27;15682:100;15675:4;15666:6;15661:3;15657:16;15653:27;15650:133;15647:146;;;15786:5;;;;15136:748;:::o;15647:146::-;15802:57;15853:4;15844:6;15836;15832:19;15828:30;15822:4;15802:57;:::i;16719:602::-;16990:42;16982:6;16978:55;16967:9;16960:74;17082:42;17074:6;17070:55;17065:2;17054:9;17050:18;17043:83;17162:6;17157:2;17146:9;17142:18;17135:34;17205:6;17200:2;17189:9;17185:18;17178:34;17249:3;17243;17232:9;17228:19;17221:32;16941:4;17270:45;17310:3;17299:9;17295:19;17287:6;17270:45;:::i;:::-;17262:53;16719:602;-1:-1:-1;;;;;;;16719:602:21:o"},"gasEstimates":{"creation":{"codeDepositCost":"1402600","executionCost":"1465","totalCost":"1404065"},"external":{"balanceOf(address,uint256)":"infinite","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26664","supportsInterface(bytes4)":"477","uri(uint256)":"infinite"},"internal":{"__ERC1155_init(string memory)":"infinite","__ERC1155_init_unchained(string memory)":"infinite","_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_asSingletonArray(uint256)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_burn(address,uint256,uint256)":"infinite","_burnBatch(address,uint256[] memory,uint256[] memory)":"infinite","_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)":"infinite","_mint(address,uint256,uint256,bytes memory)":"infinite","_mintBatch(address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeBatchTransferFrom(address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferFrom(address,address,uint256,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_setURI(string memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/openzepplin/ERC1155Upgradeable.sol\":\"HYDNERC1155Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"[iMegsaxUlCficvOUcmMuifLDmjtvmOMjecIsDfrexTvhCCfMuLslOUrDhsjlmjfOCtMrnTvLUveeDLuTmUfDtgthOLfVr]\",\"stackAllocation\":true}},\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/openzepplin/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n// Hydn: Copy of OpenZeppelin - change are:\\n//  - _mint function do not call the _doSafeTransferAcceptanceCheck hook as the token is not transferable we don't want to check if the contract accept it or not\\n\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract HYDNERC1155Upgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  ERC165Upgradeable,\\n  IERC1155Upgradeable,\\n  IERC1155MetadataURIUpgradeable\\n{\\n  using AddressUpgradeable for address;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n  string private _uri;\\n\\n  /**\\n   * @dev See {_setURI}.\\n   */\\n  function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n    __ERC1155_init_unchained(uri_);\\n  }\\n\\n  function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n    _setURI(uri_);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * This implementation returns the same URI for *all* token types. It relies\\n   * on the token type ID substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual override returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), 'ERC1155: address zero is not a valid owner');\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    _setApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      'ERC1155: caller is not token owner nor approved'\\n    );\\n    _safeTransferFrom(from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      'ERC1155: caller is not token owner nor approved'\\n    );\\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n    _balances[id][to] += amount;\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n    require(to != address(0), 'ERC1155: transfer to the zero address');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n      _balances[id][to] += amount;\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   * substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\\n   * clients with the token type ID.\\n   *\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n   * interpreted by clients as\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n   * for token type ID 0x4cce0.\\n   *\\n   * See {uri}.\\n   *\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\n   * this function emits no events.\\n   */\\n  function _setURI(string memory newuri) internal virtual {\\n    _uri = newuri;\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: mint to the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _balances[id][to] += amount;\\n    emit TransferSingle(operator, address(0), to, id, amount);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), 'ERC1155: mint to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      _balances[ids[i]][to] += amounts[i];\\n    }\\n\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens of token type `id` from `from`\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `from` must have at least `amount` tokens of token type `id`.\\n   */\\n  function _burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), 'ERC1155: burn from the zero address');\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n\\n    emit TransferSingle(operator, from, address(0), id, amount);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   */\\n  function _burnBatch(\\n    address from,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal virtual {\\n    require(from != address(0), 'ERC1155: burn from the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, '');\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, 'ERC1155: burn amount exceeds balance');\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n    }\\n\\n    emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, '');\\n  }\\n\\n  /**\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function _setApprovalForAll(\\n    address owner,\\n    address operator,\\n    bool approved\\n  ) internal virtual {\\n    require(owner != operator, 'ERC1155: setting approval status for self');\\n    _operatorApprovals[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n          revert('ERC1155: ERC1155Receiver rejected tokens');\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x659f303c7337f284f2464fd5abb5aedb6440afb3fbcd6aab1ca8b28631c807cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":527,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":530,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2691,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3021,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":3516,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":3522,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3524,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":4719,"contract":"contracts/openzepplin/ERC1155Upgradeable.sol:HYDNERC1155Upgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}